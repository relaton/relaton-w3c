---
http_interactions:
- request:
    method: get
    uri: https://www.w3.org/TR/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.w3.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Cache-Control:
      - max-age=0, public, s-maxage=86400
      Date:
      - Fri, 14 May 2021 09:13:36 GMT
      Etag:
      - W/"2060cee50ee78ee92d419823b88e33bb"
      Last-Modified:
      - Thu, 13 May 2021 23:01:07 GMT
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Vary:
      - Accept-Encoding
      Accept-Ranges:
      - bytes
      Content-Length:
      - '135513'
      X-Backend:
      - symfony
      Strict-Transport-Security:
      - max-age=15552000; includeSubdomains; preload
      Content-Security-Policy:
      - upgrade-insecure-requests
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<title>All Standards and Drafts - W3C</title>
<link rel="Help" href="http://www.w3.org/Help/">
<link rel="stylesheet" href="//www.w3.org/2008/site/css/minimum.css" media="screen, all">
<style media="print, screen and (min-width: 520px)">
/*<![CDATA[*/
@import url("//www.w3.org/2008/site/css/advanced");
/*]]>*/
</style>
<link rel="stylesheet" href="//www.w3.org/2008/site/css/print.css" media="print">
<link rel="shortcut icon" href="//www.w3.org/2008/site/images/favicon.ico" type="image/x-icon">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="viewport" content="width=device-width">
    <link rel="stylesheet" href="/2008/site/sf/build/publication-tr.f47b5313.css">
</head>
<body id="www-w3-org" class="w3c_public w3c_javascript w3c_screen">
<div id="w3c_container">
    <div id="w3c_mast">
<h1 class="logo"><a tabindex="2" accesskey="1" href="http://www.w3.org/"><img src="https://www.w3.org/2008/site/images/logo-w3c-mobile-lg" alt="W3C" width="90" height="53"></a> <span class="alt-logo">W3C</span></h1>
<div id="w3c_nav">
<form action="//www.w3.org/Help/search" method="get" enctype="application/x-www-form-urlencoded">
<!-- w3c_sec_nav is populated through js -->
<div class="w3c_sec_nav"><!-- --></div>
<ul class="main_nav"><!-- Main navigation menu -->
<li class="first-item"><a href="http://www.w3.org/standards/">Standards</a></li>
<li><a href="http://www.w3.org/participate/">Participate</a></li>
<li><a href="http://www.w3.org/Consortium/membership">Membership</a></li>
<li class="last-item"><a href="http://www.w3.org/Consortium/">About W3C</a></li>

</ul>
</form>
</div>
</div>
<!-- /end #w3c_mast -->
    <div id="w3c_main">
        <div id="w3c_logo_shadow" class="w3c_leftCol">
            <img alt="" src="https://www.w3.org/2008/site/images/logo-shadow" height="32">
        </div>
        <div class="w3c_leftCol">
            <h2 class="offscreen">Site Navigation</h2>
            <h3 class="category tMargin"><span class="ribbon"><a href="/Consortium/mission.html#principles">Web for All <img src="/2008/site/images/header-link.gif" alt="Header link" width="13" height="13" class="header-link" /></a></span></h3>
            <ul class="theme">
                <li><a href="/WAI/">Accessibility</a></li>
                <li><a href="/International/">Internationalization</a></li>
                <li><a href="/Security/">Web Security</a></li>
                <li><a href="/Privacy/">Privacy</a></li>
            </ul>
            <h3 class="category tMargin"><span class="ribbon"><a href="/standards/">Web and Industry <img src="/2008/site/images/header-link.gif" alt="Header link" width="13" height="13" class="header-link" /></a></span></h3>
            <ul class="theme">
                <li><a href="/auto/">Automotive</a></li>
                <li><a href="/tv/">Entertainment (TV and Broadcasting)</a></li>
                <li><a href="/publishing/">Publishing</a></li>
                <li><a href="/Payments/">Web Payments</a></li>
                <li><a href="/2013/data/">Web of Data</a></li>
                <li><a href="/Telco/">Web and Telecommunications</a></li>
                <li><a href="/WoT/">Web of Things</a></li>
            </ul>
            <h3 class="category tMargin"><span class="ribbon"><a href="/groups/">W3C Work Groups <img src="/2008/site/images/header-link.gif" alt="Header link" width="13" height="13" class="header-link" /></a></span></h3>
            <ul class="theme">
                <li><a href="/Consortium/cepc/">Code of Ethics and Professional
                        Conduct</a></li>
                <li><a href="/Guide/">Participant guidebook</a></li>
                <li><a href="/community/groups/">W3C Community Groups</a></li>
                <li><a href="/Help/Account/">Get a W3C Account</a></li>
            </ul>
            <h3 class="category tMargin"><span class="ribbon"><a href="/participate/">Dev Resources <img src="/2008/site/images/header-link.gif" alt="Header link" width="13" height="13" class="header-link" /></a></span></h3>
            <ul class="theme">
                <li><a title="W3C Developer Avenue" href="/developers/"><img src="/2015/10/W3C-Developers_Assets/W3C-Developers-Dark.png" width="150" alt="W3C Developers" title="W3C Developer Avenue" /></a></li>
                <li><a title="W3C API" href="/api/">API<img id="apilogo" src="//www.w3.org/2020/07/w3c-api.png" width="60" alt="W3C API logo" title="W3C API" /></a></li>
                <li><a href="https://validator.w3.org/">Validators</a></li>
                <li><a href="https://www.w3.org/2009/cheatsheet/">W3C
                        cheatsheet</a></li>
                <li><a href="/Status.html">More Open Source Software</a></li>
                <li><a title="Open Web Platform testing" href="https://web-platform-tests.org/">Web Platform Tests</a></li>
                <li><a title="MOOCs from W3C on edX" href="https://www.edx.org/school/w3cx">W3Cx (Training)</a></li>
            </ul>
        </div>
        <div class="w3c_mainCol">
            <div id="w3c_crumbs">
           <div id="w3c_crumbs_frame">
            <ul class="bct"> <!-- .bct / Breadcrumbs -->
              <li class="skip"><a tabindex="1" accesskey="2" title="Skip to content (e.g., when browsing via audio)" href="#w3c_content_body">Skip</a></li>
              <li><a href="http://www.w3.org/">W3C</a>&nbsp;<span class="cr">»</span>&nbsp;</li>
              <li><a href="http://www.w3.org/standards/">Standards</a>&nbsp;<span class="cr">»</span>&nbsp;</li>
              <li class="current">All Standards and Drafts</li>
            </ul>
         </div>
        </div>
    <h1 class="title">All Standards and Drafts</h1>
    <div class="w3c_toc"><!-- --></div>            <div id="w3c_content_body">
   <div class="hierarchy tMargin">
      <div class="container">
        <h2 id="summary"></h2>
        <p>W3C publishes a range of specifications and guidelines which help move web standards forward. Find out more about the various types of <a href="/standards/types">documents published at W3C</a>.</p>
        <form id="filters" method="get" action="#">
          <fieldset>
            <label for="title">Title</label>
            <input id="title" name="title" type="text" autofocus />
          </fieldset>
          <fieldset>
            <label for="tag">Tag</label>
            <select id="tag" name="tag">
              <option value="" selected="selected"></option>
                            <option value="accessibility">Accessibility</option>
                            <option value="css">CSS</option>
                            <option value="data">Data</option>
                            <option value="dom">DOM</option>
                            <option value="graphics">Graphics</option>
                            <option value="html">HTML</option>
                            <option value="http">HTTP</option>
                            <option value="i18n">i18n</option>
                            <option value="media">Media</option>
                            <option value="performance">Performance</option>
                            <option value="privacy">Privacy</option>
                            <option value="security">Security</option>
                            <option value="webapi">Web API</option>
                            <option value="wot">WoT</option>
                            <option value="xml">XML</option>
                          </select>
          </fieldset>
          <fieldset>
            <label for="status">Status</label>
            <select id="status" name="status">
              <option value="" selected="selected"></option>
              <option value="cr">Candidate Recommendation</option>
              <option value="note">Group Note</option>
              <option value="per">Proposed Edited Recommendation</option>
              <option value="pr">Proposed Recommendation</option>
              <option value="rec">Recommendation</option>
              <option value="ret">Retired</option>
              <option value="wd">Working Draft</option>
            </select>
          </fieldset>
          <fieldset>
            <label for="version">Version</label>
            <select id="version" name="version">
              <option value="" selected="selected"></option>
              <option value="latest">Latest</option>
              <option value="upcoming">Upcoming</option>
              <option value="ed">Editor's draft</option>
            </select>
          </fieldset>
          <fieldset class="help">
            <a class="trhelp" href="https://w3c.github.io/tr-pages/help.html">?<span>Help about search criteria</span></a>
          </fieldset>
          <fieldset class="buttons">
            <input id="reset" type="reset" value="Reset" />
            <input id="submit" type="submit" value="Filter" />
          </fieldset>
        </form>
        <ul id="container">
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="web content accessibility guidelines (wcag) 2.2" data-tag="accessibility" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-WCAG22-20210513/" title="Latest draft of Web Content Accessibility Guidelines (WCAG) 2.2 formally approved by the group">Web  Content  Accessibility  Guidelines  (WCAG)&nbsp;2.2</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2021-05-13 - <a title="Web Content Accessibility Guidelines (WCAG) 2.2 publication history" href="/standards/history/WCAG22">History</a>
                        - <a href="https://w3c.github.io/wcag/guidelines/22/" title="Latest editor's draft of Web Content Accessibility Guidelines (WCAG) 2.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Charles Adams
                            <li>Alastair Campbell
                            <li>Rachael Bradley Montgomery
                            <li>Michael Cooper
                            <li>Andrew Kirkpatrick
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webcodecs" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-webcodecs-20210513/" title="Latest draft of WebCodecs formally approved by the group">WebCodecs</a></h2>
                        <p class=deliverer>Media Working Group</p>
                        <p class=pubdetails>2021-05-13 - <a title="WebCodecs publication history" href="/standards/history/webcodecs">History</a>
                        - <a href="https://w3c.github.io/webcodecs/" title="Latest editor's draft of WebCodecs">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Cunningham
                            <li>Paul Adenot
                            <li>Bernard Aboba
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="aria in html" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-html-aria-20210513/" title="Latest draft of ARIA in HTML formally approved by the group">ARIA in HTML</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-05-13 - <a title="ARIA in HTML publication history" href="/standards/history/html-aria">History</a>
                        - <a href="https://w3c.github.io/html-aria/" title="Latest editor's draft of ARIA in HTML">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Scott O&#039;Hara
                            <li>Patrick Lauke
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="device posture api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-device-posture-20210513/" title="Latest draft of Device Posture API formally approved by the group">Device Posture API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2021-05-13 - <a title="Device Posture API publication history" href="/standards/history/device-posture">History</a>
                        - <a href="https://w3c.github.io/device-posture/" title="Latest editor's draft of Device Posture API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Diego Gonzalez-Zuniga
                            <li>Kenneth Christiansen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="pointer events" data-tag="webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-pointerevents3-20210513/" title="Latest draft of Pointer Events formally approved by the group">Pointer Events</a></h2>
                        <p class=deliverer>Pointer Events Working Group</p>
                        <p class=pubdetails>2021-05-13 - <a title="Pointer Events publication history" href="/standards/history/pointerevents3">History</a>
                        - <a href="https://w3c.github.io/pointerevents/" title="Latest editor's draft of Pointer Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Lauke
                            <li>Navid Zolghadr
                            <li>Matt Brubeck
                            <li>Rick Byers
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webcodecs codec registry" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-webcodecs-codec-registry-20210513/" title="Latest draft of WebCodecs Codec Registry formally approved by the group">WebCodecs Codec Registry</a></h2>
                        <p class=deliverer>Media Working Group</p>
                        <p class=pubdetails>2021-05-13 - <a title="WebCodecs Codec Registry publication history" href="/standards/history/webcodecs-codec-registry">History</a>
                        - <a href="https://w3c.github.io/webcodecs/codec_registry.html" title="Latest editor's draft of WebCodecs Codec Registry">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Cunningham
                            <li>Paul Adenot
                            <li>Bernard Aboba
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="avc (h.264) webcodecs registration" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-webcodecs-avc-codec-registration-20210513/" title="Latest draft of AVC (H.264) WebCodecs Registration formally approved by the group">AVC (H.264) WebCodecs Registration</a></h2>
                        <p class=deliverer>Media Working Group</p>
                        <p class=pubdetails>2021-05-13 - <a title="AVC (H.264) WebCodecs Registration publication history" href="/standards/history/webcodecs-avc-codec-registration">History</a>
                        - <a href="https://w3c.github.io/webcodecs/avc_codec_registration.html" title="Latest editor's draft of AVC (H.264) WebCodecs Registration">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Cunningham
                            <li>Paul Adenot
                            <li>Bernard Aboba
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="content security policy level 3" data-tag="security" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-CSP3-20210512/" title="Latest draft of Content Security Policy Level 3 formally approved by the group">Content  Security  Policy  Level&nbsp;3</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2021-05-12 - <a title="Content Security Policy Level 3 publication history" href="/standards/history/CSP3">History</a>
                        - <a href="https://w3c.github.io/webappsec-csp/" title="Latest editor's draft of Content Security Policy Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="miniapp manifest" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-miniapp-manifest-20210511/" title="Latest draft of MiniApp Manifest formally approved by the group">MiniApp Manifest</a></h2>
                        <p class=deliverer>MiniApps Working Group</p>
                        <p class=pubdetails>2021-05-11 - <a title="MiniApp Manifest publication history" href="/standards/history/miniapp-manifest">History</a>
                        - <a href="https://w3c.github.io/miniapp-manifest/" title="Latest editor's draft of MiniApp Manifest">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Alvarez-Espinar
                            <li>Yongjing ZHANG
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="did specification registries" data-tag="privacy security" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2021/NOTE-did-spec-registries-20210508/" title="Latest draft of DID Specification Registries formally approved by the group">DID Specification Registries</a></h2>
                        <p class=deliverer>Decentralized Identifier Working Group</p>
                        <p class=pubdetails>2021-05-08 - <a title="DID Specification Registries publication history" href="/standards/history/did-spec-registries">History</a>
                        - <a href="https://w3c.github.io/did-spec-registries/" title="Latest editor's draft of DID Specification Registries">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Orie Steele
                            <li>Manu Sporny
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web audio api" data-tag="media webapi" data-status="pr" data-version="latest upcoming ed">
            <div class="profile">PR</div>
            <h2 class="ProposedRecommendation"><a href="https://www.w3.org/TR/2021/PR-webaudio-20210506/" title="Latest draft of Web Audio API formally approved by the group">Web Audio API</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2021-05-06 - <a title="Web Audio API publication history" href="/standards/history/webaudio">History</a>
                        - <a href="https://webaudio.github.io/web-audio-api/" title="Latest editor's draft of Web Audio API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Adenot
                            <li>Hongchan Choi
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="picture-in-picture" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-picture-in-picture-20210505/" title="Latest draft of Picture-in-Picture formally approved by the group">Picture-in-Picture</a></h2>
                        <p class=deliverer>Media Working Group</p>
                        <p class=pubdetails>2021-05-05 - <a title="Picture-in-Picture publication history" href="/standards/history/picture-in-picture">History</a>
                        - <a href="https://w3c.github.io/picture-in-picture/" title="Latest editor's draft of Picture-in-Picture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Francois Beaufort
                            <li>Mounir Lamouri
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webtransport" data-tag="http" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-webtransport-20210504/" title="Latest draft of WebTransport formally approved by the group">WebTransport</a></h2>
                        <p class=deliverer>WebTransport Working Group</p>
                        <p class=pubdetails>2021-05-04 - <a title="WebTransport publication history" href="/standards/history/webtransport">History</a>
                        - <a href="https://w3c.github.io/webtransport/" title="Latest editor's draft of WebTransport">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernard Aboba
                            <li>Victor Vasiliev
                            <li>Yutaka Hirano
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="data catalog vocabulary (dcat) - version 3" data-tag="data" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-vocab-dcat-3-20210504/" title="Latest draft of Data Catalog Vocabulary (DCAT) - Version 3 formally approved by the group">Data  Catalog  Vocabulary  (DCAT)  -  Version&nbsp;3</a></h2>
                        <p class=deliverer>Dataset Exchange Working Group</p>
                        <p class=pubdetails>2021-05-04 - <a title="Data Catalog Vocabulary (DCAT) - Version 3 publication history" href="/standards/history/vocab-dcat-3">History</a>
                        - <a href="https://w3c.github.io/dxwg/dcat/" title="Latest editor's draft of Data Catalog Vocabulary (DCAT) - Version 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Riccardo Albertoni
                            <li>David Browning
                            <li>Simon Cox
                            <li>Alejandra Gonzalez Beltran
                            <li>Andrea Perego
                            <li>Peter Winstanley
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media session standard" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-mediasession-20210504/" title="Latest draft of Media Session Standard formally approved by the group">Media Session Standard</a></h2>
                        <p class=deliverer>Media Working Group</p>
                        <p class=pubdetails>2021-05-04 - <a title="Media Session Standard publication history" href="/standards/history/mediasession">History</a>
                        - <a href="https://w3c.github.io/mediasession/" title="Latest editor's draft of Media Session Standard">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Becca Hughes
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="decentralized identifiers (dids) v1.0" data-tag="privacy security" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2021/CRD-did-core-20210430/" title="Latest draft of Decentralized Identifiers (DIDs) v1.0 formally approved by the group">Decentralized Identifiers (DIDs) v1.0</a></h2>
                        <p class=deliverer>Decentralized Identifier Working Group</p>
                        <p class=pubdetails>2021-04-30 - <a title="Decentralized Identifiers (DIDs) v1.0 publication history" href="/standards/history/did-core">History</a>
                        - <a href="https://w3c.github.io/did-core/" title="Latest editor's draft of Decentralized Identifiers (DIDs) v1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Drummond Reed
                            <li>Manu Sporny
                            <li>Markus Sabadello
                            <li>Dave Longley
                            <li>Christopher Allen
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="making content usable for people with cognitive and learning disabilities" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2021/NOTE-coga-usable-20210429/" title="Latest draft of Making Content Usable for People with Cognitive and Learning Disabilities formally approved by the group">Making Content Usable for People with Cognitive and Learning Disabilities</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2021-04-29 - <a title="Making Content Usable for People with Cognitive and Learning Disabilities publication history" href="/standards/history/coga-usable">History</a>
                        - <a href="https://w3c.github.io/coga/content-usable/" title="Latest editor's draft of Making Content Usable for People with Cognitive and Learning Disabilities">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Horwitz
                            <li>Rachael Bradley Montgomery
                            <li>Steve Lee
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="payment handler api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-payment-handler-20210428/" title="Latest draft of Payment Handler API formally approved by the group">Payment Handler API</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2021-04-28 - <a title="Payment Handler API publication history" href="/standards/history/payment-handler">History</a>
                        - <a href="https://w3c.github.io/payment-handler/" title="Latest editor's draft of Payment Handler API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Adrian Hope-Bailie
                            <li>Jason Normore
                            <li>Ian Jacobs
                            <li>Rouslan Solomakhin
                            <li>Jinho Bang
                            <li>Tommy Thorsen
                            <li>Adam Roach
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="file api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-FileAPI-20210427/" title="Latest draft of File API formally approved by the group">File API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-04-27 - <a title="File API publication history" href="/standards/history/FileAPI">History</a>
                        - <a href="https://w3c.github.io/FileAPI/" title="Latest editor's draft of File API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marijn Kruisselbrink
                            <li>Arun Ranganathan
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="web authentication: an api for accessing public key credentials - level 3" data-tag="security" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-webauthn-3-20210427/" title="Latest draft of Web Authentication: An API for accessing Public Key Credentials - Level 3 formally approved by the group">Web  Authentication:  An  API  for  accessing  Public  Key  Credentials  -  Level&nbsp;3</a></h2>
                        <p class=deliverer>Web Authentication Working Group</p>
                        <p class=pubdetails>2021-04-27 - <a title="Web Authentication: An API for accessing Public Key Credentials - Level 3 publication history" href="/standards/history/webauthn-3">History</a>
                        - <a href="https://w3c.github.io/webauthn/" title="Latest editor's draft of Web Authentication: An API for accessing Public Key Credentials - Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeff Hodges
                            <li>J.C. Jones
                            <li>Michael Jones
                            <li>Akshay Kumar
                            <li>Emil Lundberg
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="image resource" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-image-resource-20210426/" title="Latest draft of Image Resource formally approved by the group">Image Resource</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-04-26 - <a title="Image Resource publication history" href="/standards/history/image-resource">History</a>
                        - <a href="https://w3c.github.io/image-resource/" title="Latest editor's draft of Image Resource">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Gustafson
                            <li>Rayan Kanso
                            <li>Marcos Caceres
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css text module level 3" data-tag="css i18n" data-status="cr" data-version="upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2021/CRD-css-text-3-20210422/" title="Latest draft of CSS Text Module Level 3 formally approved by the group">CSS  Text  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-04-22 - <a title="CSS Text Module Level 3 publication history" href="/standards/history/css-text-3">History</a>
                        - <a href="https://drafts.csswg.org/css-text-3/" title="Latest editor's draft of CSS Text Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="resource timing level 2" data-tag="performance webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-resource-timing-2-20210414/" title="Latest draft of Resource Timing Level 2 formally approved by the group">Resource  Timing  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2021-04-14 - <a title="Resource Timing Level 2 publication history" href="/standards/history/resource-timing-2">History</a>
                        - <a href="https://w3c.github.io/resource-timing/" title="Latest editor's draft of Resource Timing Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yoav Weiss
                            <li>Noam Rosenthal
                            <li>Ilya Grigorik
                            <li>Todd Reifsteck
                            <li>Arvind Jain
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                            <li>Anderson Quach
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="web authentication: an api for accessing public key credentials - level 2" data-tag="security" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2021/REC-webauthn-2-20210408/" title="Latest draft of Web Authentication: An API for accessing Public Key Credentials - Level 2 formally approved by the group">Web  Authentication:  An  API  for  accessing  Public  Key  Credentials  -  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Authentication Working Group</p>
                        <p class=pubdetails>2021-04-08 - <a title="Web Authentication: An API for accessing Public Key Credentials - Level 2 publication history" href="/standards/history/webauthn-2">History</a>
                        - <a href="https://w3c.github.io/webauthn/" title="Latest editor's draft of Web Authentication: An API for accessing Public Key Credentials - Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeff Hodges
                            <li>J.C. Jones
                            <li>Michael Jones
                            <li>Akshay Kumar
                            <li>Emil Lundberg
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="gamepad" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-gamepad-20210408/" title="Latest draft of Gamepad formally approved by the group">Gamepad</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-04-08 - <a title="Gamepad publication history" href="/standards/history/gamepad">History</a>
                        - <a href="https://w3c.github.io/gamepad/" title="Latest editor's draft of Gamepad">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Agoston
                            <li>James Hollyer
                            <li>Matthew Reynolds
                            <li>Brandon Jones
                            <li>Scott Graham
                            <li>Theodore Mielczarek
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media capture and streams" data-tag="media webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2021/CRD-mediacapture-streams-20210408/" title="Latest draft of Media Capture and Streams formally approved by the group">Media Capture and Streams</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-04-08 - <a title="Media Capture and Streams publication history" href="/standards/history/mediacapture-streams">History</a>
                        - <a href="https://w3c.github.io/mediacapture-main/" title="Latest editor's draft of Media Capture and Streams">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cullen Jennings
                            <li>Bernard Aboba
                            <li>Jan-Ivar Bruaroey
                            <li>Henrik Boström
                            <li>youenn fablet
                            <li>Daniel Burnett
                            <li>Adam Bergkvist
                            <li>Anant Narayanan
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web application manifest" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-appmanifest-20210407/" title="Latest draft of Web Application Manifest formally approved by the group">Web Application Manifest</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-04-07 - <a title="Web Application Manifest publication history" href="/standards/history/appmanifest">History</a>
                        - <a href="https://w3c.github.io/manifest/" title="Latest editor's draft of Web Application Manifest">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Kenneth Christiansen
                            <li>Mounir Lamouri
                            <li>Anssi Kostiainen
                            <li>Matt Giuca
                            <li>Aaron Gustafson
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="epub accessibility 1.1" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-epub-a11y-11-20210406/" title="Latest draft of EPUB Accessibility 1.1 formally approved by the group">EPUB  Accessibility&nbsp;1.1</a></h2>
                        <p class=deliverer>EPUB 3 Working Group</p>
                        <p class=pubdetails>2021-04-06 - <a title="EPUB Accessibility 1.1 publication history" href="/standards/history/epub-a11y-11">History</a>
                        - <a href="https://w3c.github.io/epub-specs/epub33/a11y/" title="Latest editor's draft of EPUB Accessibility 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                            <li>George Kerscher
                            <li>Charles LaPierre
                            <li>Gregorio Pellegrino
                            <li>Avneesh Singh
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="epub reading systems 3.3" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-epub-rs-33-20210406/" title="Latest draft of EPUB Reading Systems 3.3 formally approved by the group">EPUB  Reading  Systems&nbsp;3.3</a></h2>
                        <p class=deliverer>EPUB 3 Working Group</p>
                        <p class=pubdetails>2021-04-06 - <a title="EPUB Reading Systems 3.3 publication history" href="/standards/history/epub-rs-33">History</a>
                        - <a href="https://w3c.github.io/epub-specs/epub33/rs/" title="Latest editor's draft of EPUB Reading Systems 3.3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Cramer
                            <li>Matt Garrish
                            <li>Ivan Herman
                            <li>Garth Conboy
                            <li>Marisa DeMeglio
                            <li>Daniel Weck
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="mediastream image capture" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-image-capture-20210406/" title="Latest draft of MediaStream Image Capture formally approved by the group">MediaStream Image Capture</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-04-06 - <a title="MediaStream Image Capture publication history" href="/standards/history/image-capture">History</a>
                        - <a href="https://w3c.github.io/mediacapture-image/" title="Latest editor's draft of MediaStream Image Capture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Miguel Casas-sanchez
                            <li>Rijubrata Bhaumik
                            <li>Giridhar Mandyam
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                        <li data-title="epub 3.3" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-epub-33-20210406/" title="Latest draft of EPUB 3.3 formally approved by the group">EPUB&nbsp;3.3</a></h2>
                        <p class=deliverer>EPUB 3 Working Group</p>
                        <p class=pubdetails>2021-04-06 - <a title="EPUB 3.3 publication history" href="/standards/history/epub-33">History</a>
                        - <a href="https://w3c.github.io/epub-specs/epub33/core/" title="Latest editor's draft of EPUB 3.3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                            <li>Ivan Herman
                            <li>Dave Cramer
                            <li>Garth Conboy
                            <li>Marisa DeMeglio
                            <li>Daniel Weck
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css easing functions level 1" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2021/CRD-css-easing-1-20210401/" title="Latest draft of CSS Easing Functions Level 1 formally approved by the group">CSS  Easing  Functions  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-04-01 - <a title="CSS Easing Functions Level 1 publication history" href="/standards/history/css-easing-1">History</a>
                        - <a href="https://drafts.csswg.org/css-easing/" title="Latest editor's draft of CSS Easing Functions Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brian Birtles
                            <li>Dean Jackson
                            <li>Matt Rakow
                            <li>Shane Stephens
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="devanagari gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-deva-gap-20210331/" title="Latest draft of Devanagari Gap Analysis formally approved by the group">Devanagari Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-03-31 - <a title="Devanagari Gap Analysis publication history" href="/standards/history/deva-gap">History</a>
                        - <a href="https://w3c.github.io/iip/gap-analysis/deva-gap" title="Latest editor's draft of Devanagari Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Akshat Joshi
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="tamil gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-taml-gap-20210331/" title="Latest draft of Tamil Gap Analysis formally approved by the group">Tamil Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-03-31 - <a title="Tamil Gap Analysis publication history" href="/standards/history/taml-gap">History</a>
                        - <a href="https://w3c.github.io/iip/gap-analysis/taml-gap" title="Latest editor's draft of Tamil Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="bengali gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-beng-gap-20210331/" title="Latest draft of Bengali Gap Analysis formally approved by the group">Bengali Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-03-31 - <a title="Bengali Gap Analysis publication history" href="/standards/history/beng-gap">History</a>
                        - <a href="https://w3c.github.io/iip/gap-analysis/beng-gap" title="Latest editor's draft of Bengali Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                    <li data-title="xsl transformations (xslt) version 2.0 (second edition)" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2021/REC-xslt20-20210330/" title="Latest draft of XSL Transformations (XSLT) Version 2.0 (Second Edition) formally approved by the group">XSL Transformations (XSLT) Version 2.0 (Second Edition)</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2021-03-30 - <a title="XSL Transformations (XSLT) Version 2.0 (Second Edition) publication history" href="/standards/history/xslt20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="internationalization best practices for spec developers" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-international-specs-20210325/" title="Latest draft of Internationalization Best Practices for Spec Developers formally approved by the group">Internationalization Best Practices for Spec Developers</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-03-25 - <a title="Internationalization Best Practices for Spec Developers publication history" href="/standards/history/international-specs">History</a>
                        - <a href="https://w3c.github.io/bp-i18n-specdev/" title="Latest editor's draft of Internationalization Best Practices for Spec Developers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web app manifest - application information" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2021/NOTE-manifest-app-info-20210324/" title="Latest draft of Web App Manifest - Application Information formally approved by the group">Web App Manifest - Application Information</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-03-24 - <a title="Web App Manifest - Application Information publication history" href="/standards/history/manifest-app-info">History</a>
                        - <a href="https://w3c.github.io/manifest-app-info/" title="Latest editor's draft of Web App Manifest - Application Information">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Gustafson
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="high resolution time" data-tag="performance webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-hr-time-3-20210324/" title="Latest draft of High Resolution Time formally approved by the group">High Resolution Time</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2021-03-24 - <a title="High Resolution Time publication history" href="/standards/history/hr-time-3">History</a>
                        - <a href="https://w3c.github.io/hr-time/" title="Latest editor's draft of High Resolution Time">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yoav Weiss
                            <li>Ilya Grigorik
                            <li>James Simonsen
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="self-review questionnaire: security and privacy" data-tag="privacy" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2021/NOTE-security-privacy-questionnaire-20210323/" title="Latest draft of Self-Review Questionnaire: Security and Privacy formally approved by the group">Self-Review Questionnaire: Security and Privacy</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=deliverer>Privacy Interest Group</p>
                        <p class=pubdetails>2021-03-23 - <a title="Self-Review Questionnaire: Security and Privacy publication history" href="/standards/history/security-privacy-questionnaire">History</a>
                        - <a href="https://w3ctag.github.io/security-questionnaire/" title="Latest editor's draft of Self-Review Questionnaire: Security and Privacy">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Theresa O&#039;Connor
                            <li>Peter Snyder
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="css cascading and inheritance level 4" data-tag="css" data-status="wd" data-version="ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-css-cascade-4-20210319/" title="Latest draft of CSS Cascading and Inheritance Level 4 formally approved by the group">CSS  Cascading  and  Inheritance  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-03-19 - <a title="CSS Cascading and Inheritance Level 4 publication history" href="/standards/history/css-cascade-4">History</a>
                        - <a href="https://drafts.csswg.org/css-cascade/" title="Latest editor's draft of CSS Cascading and Inheritance Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css cascading and inheritance level 5" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-css-cascade-5-20210319/" title="Latest draft of CSS Cascading and Inheritance Level 5 formally approved by the group">CSS  Cascading  and  Inheritance  Level&nbsp;5</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-03-19 - <a title="CSS Cascading and Inheritance Level 5 publication history" href="/standards/history/css-cascade-5">History</a>
                        - <a href="https://drafts.csswg.org/css-cascade/" title="Latest editor's draft of CSS Cascading and Inheritance Level 5">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Miriam Suzanne
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webrtc priority control api" data-tag="media webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationSnapshot"><a href="https://www.w3.org/TR/2021/CR-webrtc-priority-20210318/" title="Latest draft of WebRTC Priority Control API formally approved by the group">WebRTC Priority Control API</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-03-18 - <a title="WebRTC Priority Control API publication history" href="/standards/history/webrtc-priority">History</a>
                        - <a href="https://w3c.github.io/webrtc-priority/" title="Latest editor's draft of WebRTC Priority Control API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harald Alvestrand
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="open screen protocol" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-openscreenprotocol-20210318/" title="Latest draft of Open Screen Protocol formally approved by the group">Open Screen Protocol</a></h2>
                        <p class=deliverer>Second Screen Working Group</p>
                        <p class=pubdetails>2021-03-18 - <a title="Open Screen Protocol publication history" href="/standards/history/openscreenprotocol">History</a>
                        - <a href="https://w3c.github.io/openscreenprotocol/" title="Latest editor's draft of Open Screen Protocol">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Foltz
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css box sizing module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-css-sizing-3-20210317/" title="Latest draft of CSS Box Sizing Module Level 3 formally approved by the group">CSS  Box  Sizing  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-03-17 - <a title="CSS Box Sizing Module Level 3 publication history" href="/standards/history/css-sizing-3">History</a>
                        - <a href="https://drafts.csswg.org/css-sizing-3/" title="Latest editor's draft of CSS Box Sizing Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="use cases and requirements for decentralized identifiers" data-tag="privacy security" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2021/NOTE-did-use-cases-20210317/" title="Latest draft of Use Cases and Requirements for Decentralized Identifiers formally approved by the group">Use Cases and Requirements for Decentralized Identifiers</a></h2>
                        <p class=deliverer>Decentralized Identifier Working Group</p>
                        <p class=pubdetails>2021-03-17 - <a title="Use Cases and Requirements for Decentralized Identifiers publication history" href="/standards/history/did-use-cases">History</a>
                        - <a href="https://w3c.github.io/did-use-cases/" title="Latest editor's draft of Use Cases and Requirements for Decentralized Identifiers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joe Andrieu
                            <li>Phil Archer
                            <li>Kim Duffy
                            <li>Ryan Grant
                            <li>Adrian Gropper
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css basic user interface module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-css-ui-4-20210316/" title="Latest draft of CSS Basic User Interface Module Level 4 formally approved by the group">CSS  Basic  User  Interface  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-03-16 - <a title="CSS Basic User Interface Module Level 4 publication history" href="/standards/history/css-ui-4">History</a>
                        - <a href="https://drafts.csswg.org/css-ui-4/" title="Latest editor's draft of CSS Basic User Interface Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="post-spectre web development" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-post-spectre-webdev-20210316/" title="Latest draft of Post-Spectre Web Development formally approved by the group">Post-Spectre Web Development</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2021-03-16 - <a title="Post-Spectre Web Development publication history" href="/standards/history/post-spectre-webdev">History</a>
                        - <a href="https://w3c.github.io/webappsec-post-spectre-webdev/" title="Latest editor's draft of Post-Spectre Web Development">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media capabilities" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-media-capabilities-20210316/" title="Latest draft of Media Capabilities formally approved by the group">Media Capabilities</a></h2>
                        <p class=deliverer>Media Working Group</p>
                        <p class=pubdetails>2021-03-16 - <a title="Media Capabilities publication history" href="/standards/history/media-capabilities">History</a>
                        - <a href="https://w3c.github.io/media-capabilities/" title="Latest editor's draft of Media Capabilities">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Chris Cunningham
                            <li>Vi Nguyen
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webrtc next version use cases" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-webrtc-nv-use-cases-20210316/" title="Latest draft of WebRTC Next Version Use Cases formally approved by the group">WebRTC Next Version Use Cases</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-03-16 - <a title="WebRTC Next Version Use Cases publication history" href="/standards/history/webrtc-nv-use-cases">History</a>
                        - <a href="https://w3c.github.io/webrtc-nv-use-cases/" title="Latest editor's draft of WebRTC Next Version Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernard Aboba
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="scalable video coding (svc) extension for webrtc" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-webrtc-svc-20210315/" title="Latest draft of Scalable Video Coding (SVC) Extension for WebRTC formally approved by the group">Scalable Video Coding (SVC) Extension for WebRTC</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-03-15 - <a title="Scalable Video Coding (SVC) Extension for WebRTC publication history" href="/standards/history/webrtc-svc">History</a>
                        - <a href="https://w3c.github.io/webrtc-svc/" title="Latest editor's draft of Scalable Video Coding (SVC) Extension for WebRTC">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernard Aboba
                            <li>Peter Thatcher
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="fetch metadata request headers" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-fetch-metadata-20210313/" title="Latest draft of Fetch Metadata Request Headers formally approved by the group">Fetch Metadata Request Headers</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2021-03-13 - <a title="Fetch Metadata Request Headers publication history" href="/standards/history/fetch-metadata">History</a>
                        - <a href="https://w3c.github.io/webappsec-fetch-metadata/" title="Latest editor's draft of Fetch Metadata Request Headers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="indexed database api 3.0" data-tag="webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-IndexedDB-3-20210311/" title="Latest draft of Indexed Database API 3.0 formally approved by the group">Indexed  Database  API&nbsp;3.0</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-03-11 - <a title="Indexed Database API 3.0 publication history" href="/standards/history/IndexedDB-3">History</a>
                        - <a href="https://w3c.github.io/IndexedDB/" title="Latest editor's draft of Indexed Database API 3.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ali Alabbas
                            <li>Joshua Bell
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css scroll snap module level 1" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationSnapshot"><a href="https://www.w3.org/TR/2021/CR-css-scroll-snap-1-20210311/" title="Latest draft of CSS Scroll Snap Module Level 1 formally approved by the group">CSS  Scroll  Snap  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-03-11 - <a title="CSS Scroll Snap Module Level 1 publication history" href="/standards/history/css-scroll-snap-1">History</a>
                        - <a href="https://drafts.csswg.org/css-scroll-snap-1/" title="Latest editor's draft of CSS Scroll Snap Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Rakow
                            <li>Jacob Rossi
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css ruby annotation layout module level 1" data-tag="css i18n" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-css-ruby-1-20210310/" title="Latest draft of CSS Ruby Annotation Layout Module Level 1 formally approved by the group">CSS  Ruby  Annotation  Layout  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-03-10 - <a title="CSS Ruby Annotation Layout Module Level 1 publication history" href="/standards/history/css-ruby-1">History</a>
                        - <a href="https://drafts.csswg.org/css-ruby-1/" title="Latest editor's draft of CSS Ruby Annotation Layout Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                            <li>Xidorn Quan
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="timed text markup language 2 (ttml2) (2nd edition)" data-tag="accessibility css html" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationSnapshot"><a href="https://www.w3.org/TR/2021/CR-ttml2-20210309/" title="Latest draft of Timed Text Markup Language 2 (TTML2) (2nd Edition) formally approved by the group">Timed Text Markup Language 2 (TTML2) (2nd Edition)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2021-03-09 - <a title="Timed Text Markup Language 2 (TTML2) (2nd Edition) publication history" href="/standards/history/ttml2">History</a>
                        - <a href="https://w3c.github.io/ttml2/index.html" title="Latest editor's draft of Timed Text Markup Language 2 (TTML2) (2nd Edition)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                            <li>Cyril Concolato
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="css">CSS
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="user timing level 3" data-tag="performance webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-user-timing-3-20210308/" title="Latest draft of User Timing Level 3 formally approved by the group">User  Timing  Level&nbsp;3</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2021-03-08 - <a title="User Timing Level 3 publication history" href="/standards/history/user-timing-3">History</a>
                        - <a href="https://w3c.github.io/user-timing/" title="Latest editor's draft of User Timing Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nicolas Pena Moreno
                            <li>Ilya Grigorik
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                            <li>Anderson Quach
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="navigation timing level 2" data-tag="performance webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-navigation-timing-2-20210308/" title="Latest draft of Navigation Timing Level 2 formally approved by the group">Navigation  Timing  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2021-03-08 - <a title="Navigation Timing Level 2 publication history" href="/standards/history/navigation-timing-2">History</a>
                        - <a href="https://w3c.github.io/navigation-timing/" title="Latest editor's draft of Navigation Timing Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yoav Weiss
                            <li>Ilya Grigorik
                            <li>Tobin Titus
                            <li>Jatinder Mann
                            <li>Arvind Jain
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="accessible rich internet applications (wai-aria) 1.2" data-tag="accessibility" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationSnapshot"><a href="https://www.w3.org/TR/2021/CR-wai-aria-1.2-20210302/" title="Latest draft of Accessible Rich Internet Applications (WAI-ARIA) 1.2 formally approved by the group">Accessible  Rich  Internet  Applications  (WAI-ARIA)&nbsp;1.2</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2021-03-02 - <a title="Accessible Rich Internet Applications (WAI-ARIA) 1.2 publication history" href="/standards/history/wai-aria-1.2">History</a>
                        - <a href="https://w3c.github.io/aria/" title="Latest editor's draft of Accessible Rich Internet Applications (WAI-ARIA) 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>James Nurthen
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="epub accessibility techniques 1.1" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2021/NOTE-epub-a11y-tech-11-20210223/" title="Latest draft of EPUB Accessibility Techniques 1.1 formally approved by the group">EPUB  Accessibility  Techniques&nbsp;1.1</a></h2>
                        <p class=deliverer>EPUB 3 Working Group</p>
                        <p class=pubdetails>2021-02-23 - <a title="EPUB Accessibility Techniques 1.1 publication history" href="/standards/history/epub-a11y-tech-11">History</a>
                        - <a href="https://w3c.github.io/epub-specs/epub33/a11y-tech/" title="Latest editor's draft of EPUB Accessibility Techniques 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                            <li>George Kerscher
                            <li>Charles LaPierre
                            <li>Gregorio Pellegrino
                            <li>Avneesh Singh
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="thai gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-thai-gap-20210218/" title="Latest draft of Thai Gap Analysis formally approved by the group">Thai Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-02-18 - <a title="Thai Gap Analysis publication history" href="/standards/history/thai-gap">History</a>
                        - <a href="https://w3c.github.io/sealreq/gap-analysis/thai-gap" title="Latest editor's draft of Thai Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="gujarati gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-gujr-gap-20210217/" title="Latest draft of Gujarati Gap Analysis formally approved by the group">Gujarati Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-02-17 - <a title="Gujarati Gap Analysis publication history" href="/standards/history/gujr-gap">History</a>
                        - <a href="https://w3c.github.io/iip/gap-analysis/gujr-gap" title="Latest editor's draft of Gujarati Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Neha Gupta
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mediastream recording" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-mediastream-recording-20210216/" title="Latest draft of MediaStream Recording formally approved by the group">MediaStream Recording</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-02-16 - <a title="MediaStream Recording publication history" href="/standards/history/mediastream-recording">History</a>
                        - <a href="https://w3c.github.io/mediacapture-record/" title="Latest editor's draft of MediaStream Recording">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Miguel Casas-sanchez
                            <li>James Barnett
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="adlam gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-adlm-gap-20210216/" title="Latest draft of Adlam Gap Analysis formally approved by the group">Adlam Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-02-16 - <a title="Adlam Gap Analysis publication history" href="/standards/history/adlm-gap">History</a>
                        - <a href="https://w3c.github.io/afrlreq/gap-analysis/adlm-gap" title="Latest editor's draft of Adlam Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="arabic and persian gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-alreq-gap-20210216/" title="Latest draft of Arabic and Persian Gap Analysis formally approved by the group">Arabic and Persian Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-02-16 - <a title="Arabic and Persian Gap Analysis publication history" href="/standards/history/alreq-gap">History</a>
                        - <a href="https://w3c.github.io/alreq/gap-analysis/" title="Latest editor's draft of Arabic and Persian Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shervin Afshar
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="n’ko gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-nkoo-gap-20210216/" title="Latest draft of N’Ko Gap Analysis formally approved by the group">N’Ko Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-02-16 - <a title="N’Ko Gap Analysis publication history" href="/standards/history/nkoo-gap">History</a>
                        - <a href="https://w3c.github.io/afrlreq/gap-analysis/nkoo-gap" title="Latest editor's draft of N’Ko Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="identifiers for webrtc&#039;s statistics api" data-tag="media webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2021/CRD-webrtc-stats-20210215/" title="Latest draft of Identifiers for WebRTC&#039;s Statistics API formally approved by the group">Identifiers for WebRTC's Statistics API</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-02-15 - <a title="Identifiers for WebRTC&#039;s Statistics API publication history" href="/standards/history/webrtc-stats">History</a>
                        - <a href="https://w3c.github.io/webrtc-stats/" title="Latest editor's draft of Identifiers for WebRTC&#039;s Statistics API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harald Alvestrand
                            <li>Varun Singh
                            <li>Henrik Boström
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="audio output devices api" data-tag="media webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2021/CRD-audio-output-20210215/" title="Latest draft of Audio Output Devices API formally approved by the group">Audio Output Devices API</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-02-15 - <a title="Audio Output Devices API publication history" href="/standards/history/audio-output">History</a>
                        - <a href="https://w3c.github.io/mediacapture-output/" title="Latest editor's draft of Audio Output Devices API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Justin Uberti
                            <li>Guido Urdaneta
                            <li>youenn fablet
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css multi-column layout module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-css-multicol-1-20210212/" title="Latest draft of CSS Multi-column Layout Module Level 1 formally approved by the group">CSS  Multi-column  Layout  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-02-12 - <a title="CSS Multi-column Layout Module Level 1 publication history" href="/standards/history/css-multicol-1">History</a>
                        - <a href="https://drafts.csswg.org/css-multicol/" title="Latest editor's draft of CSS Multi-column Layout Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Håkon Wium Lie
                            <li>Florian Rivoal
                            <li>Rachel Andrew
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css cascading and inheritance level 3" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2021/REC-css-cascade-3-20210211/" title="Latest draft of CSS Cascading and Inheritance Level 3 formally approved by the group">CSS  Cascading  and  Inheritance  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2021-02-11 - <a title="CSS Cascading and Inheritance Level 3 publication history" href="/standards/history/css-cascade-3">History</a>
                        - <a href="https://drafts.csswg.org/css-cascade-3/" title="Latest editor's draft of CSS Cascading and Inheritance Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="screen capture" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-screen-capture-20210205/" title="Latest draft of Screen Capture formally approved by the group">Screen Capture</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-02-05 - <a title="Screen Capture publication history" href="/standards/history/screen-capture">History</a>
                        - <a href="https://w3c.github.io/mediacapture-screen-share/" title="Latest editor's draft of Screen Capture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Thomson
                            <li>Keith Griffin
                            <li>Suhas Nandakumar
                            <li>Henrik Boström
                            <li>Jan-Ivar Bruaroey
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="hebrew gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-hebr-gap-20210204/" title="Latest draft of Hebrew Gap Analysis formally approved by the group">Hebrew Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-02-04 - <a title="Hebrew Gap Analysis publication history" href="/standards/history/hebr-gap">History</a>
                        - <a href="https://w3c.github.io/hlreq/gap-analysis/" title="Latest editor's draft of Hebrew Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="german gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-latn-de-gap-20210204/" title="Latest draft of German Gap Analysis formally approved by the group">German Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-02-04 - <a title="German Gap Analysis publication history" href="/standards/history/latn-de-gap">History</a>
                        - <a href="https://w3c.github.io/eurlreq/gap-analysis/latn-de-gap" title="Latest editor's draft of German Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="french gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-latn-fr-gap-20210204/" title="Latest draft of French Gap Analysis formally approved by the group">French Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-02-04 - <a title="French Gap Analysis publication history" href="/standards/history/latn-fr-gap">History</a>
                        - <a href="https://w3c.github.io/eurlreq/gap-analysis/latn-fr-gap" title="Latest editor's draft of French Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="osage gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-osge-osa-gap-20210204/" title="Latest draft of Osage Gap Analysis formally approved by the group">Osage Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-02-04 - <a title="Osage Gap Analysis publication history" href="/standards/history/osge-osa-gap">History</a>
                        - <a href="https://w3c.github.io/amlreq/gap-analysis/osge-osa-gap" title="Latest editor's draft of Osage Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="intersection observer" data-tag="dom" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-intersection-observer-20210203/" title="Latest draft of Intersection Observer formally approved by the group">Intersection Observer</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-02-03 - <a title="Intersection Observer publication history" href="/standards/history/intersection-observer">History</a>
                        - <a href="https://w3c.github.io/IntersectionObserver/" title="Latest editor's draft of Intersection Observer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stefan Zager
                            <li>Emilio Cobos Álvarez
                            <li>Michael Blain
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="clipboard api and events" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-clipboard-apis-20210203/" title="Latest draft of Clipboard API and events formally approved by the group">Clipboard API and events</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-02-03 - <a title="Clipboard API and events publication history" href="/standards/history/clipboard-apis">History</a>
                        - <a href="https://w3c.github.io/clipboard-apis/" title="Latest editor's draft of Clipboard API and events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gary Kacmarcik
                            <li>Grisha Lyukshin
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="html" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2021/REC-html-20210128/" title="Latest draft of HTML formally approved by the group">HTML</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="HTML publication history" href="/standards/history/html">History</a>
                        - <a href="https://html.spec.whatwg.org/" title="Latest editor's draft of HTML">Editor's Draft</a>
                        </p>
                                  </li>
                                                                                                                          <li data-title="html 5.1 2nd edition" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/SPSD-html51-20210128/" title="Latest draft of HTML 5.1 2nd Edition formally approved by the group">HTML 5.1 2nd Edition</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="HTML 5.1 2nd Edition publication history" href="/standards/history/html51">History</a>
                        - <a href="https://rawgit.com/w3c/html/html5.1-2/single-page.html" title="Latest editor's draft of HTML 5.1 2nd Edition">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Arron Eicholz
                            <li>Travis Leithead
                            <li>Alex Danilo
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html microdata" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/NOTE-microdata-20210128/" title="Latest draft of HTML Microdata formally approved by the group">HTML Microdata</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="HTML Microdata publication history" href="/standards/history/microdata">History</a>
                        - <a href="https://w3c.github.io/microdata/" title="Latest editor's draft of HTML Microdata">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Charles &#039;chaals&#039; (McCathie) Nevile
                            <li>Dan Brickley
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="japanese gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-jpan-gap-20210128/" title="Latest draft of Japanese Gap Analysis formally approved by the group">Japanese Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="Japanese Gap Analysis publication history" href="/standards/history/jpan-gap">History</a>
                        - <a href="https://w3c.github.io/jlreq/gap-analysis/" title="Latest editor's draft of Japanese Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="the websocket api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/NOTE-websockets-20210128/" title="Latest draft of The WebSocket API formally approved by the group">The WebSocket API</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="The WebSocket API publication history" href="/standards/history/websockets">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="html5 web messaging" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/SPSD-webmessaging-20210128/" title="Latest draft of HTML5 Web Messaging formally approved by the group">HTML5 Web Messaging</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="HTML5 Web Messaging publication history" href="/standards/history/webmessaging">History</a>
                        - <a href="https://html.spec.whatwg.org/multipage/web-messaging.html" title="Latest editor's draft of HTML5 Web Messaging">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="html 5.2" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/SPSD-html52-20210128/" title="Latest draft of HTML 5.2 formally approved by the group">HTML&nbsp;5.2</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="HTML 5.2 publication history" href="/standards/history/html52">History</a>
                        - <a href="https://w3c.github.io/html/" title="Latest editor's draft of HTML 5.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Arron Eicholz
                            <li>Travis Leithead
                            <li>Alex Danilo
                            <li>Sangwhan Moon
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="web storage (second edition)" data-tag="html webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/SPSD-webstorage-20210128/" title="Latest draft of Web Storage (Second Edition) formally approved by the group">Web Storage (Second Edition)</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="Web Storage (Second Edition) publication history" href="/standards/history/webstorage">History</a>
                        - <a href="https://w3c.github.io/webstorage/" title="Latest editor's draft of Web Storage (Second Edition)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="html canvas 2d context" data-tag="graphics html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/SPSD-2dcontext-20210128/" title="Latest draft of HTML Canvas 2D Context formally approved by the group">HTML Canvas 2D Context</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="HTML Canvas 2D Context publication history" href="/standards/history/2dcontext">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rik Cabanier
                            <li>Jatinder Mann
                            <li>Jay Munro
                            <li>Tom Wiltzius
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="html 5.3" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/NOTE-html53-20210128/" title="Latest draft of HTML 5.3 formally approved by the group">HTML&nbsp;5.3</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="HTML 5.3 publication history" href="/standards/history/html53">History</a>
                        - <a href="https://w3c.github.io/html/" title="Latest editor's draft of HTML 5.3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patricia Aas
                            <li>Shwetank Dixit
                            <li>Terence Eden
                            <li>Bruce Lawson
                            <li>Sangwhan Moon
                            <li>Xiaoqian Wu
                            <li>Scott O&#039;Hara
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="server-sent events" data-tag="dom http webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/SPSD-eventsource-20210128/" title="Latest draft of Server-Sent Events formally approved by the group">Server-Sent Events</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="Server-Sent Events publication history" href="/standards/history/eventsource">History</a>
                        - <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html" title="Latest editor's draft of Server-Sent Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="http">HTTP
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="web workers" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2021/NOTE-workers-20210128/" title="Latest draft of Web Workers formally approved by the group">Web Workers</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2021-01-28 - <a title="Web Workers publication history" href="/standards/history/workers">History</a>
                        - <a href="https://html.spec.whatwg.org/multipage/workers.html" title="Latest editor's draft of Web Workers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="lao gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-laoo-gap-20210127/" title="Latest draft of Lao Gap Analysis formally approved by the group">Lao Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-01-27 - <a title="Lao Gap Analysis publication history" href="/standards/history/laoo-gap">History</a>
                        - <a href="https://w3c.github.io/sealreq/gap-analysis/laoo-gap" title="Latest editor's draft of Lao Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mongolian gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-mong-gap-20210127/" title="Latest draft of Mongolian Gap Analysis formally approved by the group">Mongolian Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-01-27 - <a title="Mongolian Gap Analysis publication history" href="/standards/history/mong-gap">History</a>
                        - <a href="https://w3c.github.io/mlreq/gap-analysis/" title="Latest editor's draft of Mongolian Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="georgian gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-geor-gap-20210126/" title="Latest draft of Georgian Gap Analysis formally approved by the group">Georgian Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-01-26 - <a title="Georgian Gap Analysis publication history" href="/standards/history/geor-gap">History</a>
                        - <a href="https://w3c.github.io/eurlreq/gap-analysis/geor-gap.html" title="Latest editor's draft of Georgian Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="modern greek gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-grek-gap-20210126/" title="Latest draft of Modern Greek Gap Analysis formally approved by the group">Modern Greek Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-01-26 - <a title="Modern Greek Gap Analysis publication history" href="/standards/history/grek-gap">History</a>
                        - <a href="https://w3c.github.io/eurlreq/gap-analysis/grek-gap" title="Latest editor's draft of Modern Greek Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="hungarian gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-latn-hu-gap-20210126/" title="Latest draft of Hungarian Gap Analysis formally approved by the group">Hungarian Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-01-26 - <a title="Hungarian Gap Analysis publication history" href="/standards/history/latn-hu-gap">History</a>
                        - <a href="https://w3c.github.io/eurlreq/gap-analysis/latn-hu-gap" title="Latest editor's draft of Hungarian Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ivan Herman
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webrtc 1.0: real-time communication between browsers" data-tag="media webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2021/REC-webrtc-20210126/" title="Latest draft of WebRTC 1.0: Real-Time Communication Between Browsers formally approved by the group">WebRTC 1.0: Real-Time Communication Between Browsers</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-01-26 - <a title="WebRTC 1.0: Real-Time Communication Between Browsers publication history" href="/standards/history/webrtc">History</a>
                        - <a href="https://w3c.github.io/webrtc-pc/" title="Latest editor's draft of WebRTC 1.0: Real-Time Communication Between Browsers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cullen Jennings
                            <li>Henrik Boström
                            <li>Jan-Ivar Bruaroey
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="dutch gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-latn-nl-gap-20210126/" title="Latest draft of Dutch Gap Analysis formally approved by the group">Dutch Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-01-26 - <a title="Dutch Gap Analysis publication history" href="/standards/history/latn-nl-gap">History</a>
                        - <a href="https://w3c.github.io/eurlreq/gap-analysis/latn-nl-gap" title="Latest editor's draft of Dutch Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ethiopic layout gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-elreq-gap-20210126/" title="Latest draft of Ethiopic Layout Gap Analysis formally approved by the group">Ethiopic Layout Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2021-01-26 - <a title="Ethiopic Layout Gap Analysis publication history" href="/standards/history/elreq-gap">History</a>
                        - <a href="https://w3c.github.io/elreq/gap-analysis/" title="Latest editor's draft of Ethiopic Layout Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="w3c accessibility guidelines (wcag) 3.0" data-tag="accessibility" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-wcag-3.0-20210121/" title="Latest draft of W3C Accessibility Guidelines (WCAG) 3.0 formally approved by the group">W3C  Accessibility  Guidelines  (WCAG)&nbsp;3.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2021-01-21 - <a title="W3C Accessibility Guidelines (WCAG) 3.0 publication history" href="/standards/history/wcag-3.0">History</a>
                        - <a href="https://w3c.github.io/silver/guidelines/" title="Latest editor's draft of W3C Accessibility Guidelines (WCAG) 3.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeanne F Spellman
                            <li>Rachael Bradley Montgomery
                            <li>Shawn Lauriat
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="selection api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-selection-api-20210121/" title="Latest draft of Selection API formally approved by the group">Selection API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-01-21 - <a title="Selection API publication history" href="/standards/history/selection-api">History</a>
                        - <a href="https://w3c.github.io/selection-api/" title="Latest editor's draft of Selection API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ryosuke Niwa
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="requirements for wcag 3.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-wcag-3.0-requirements-20210121/" title="Latest draft of Requirements for WCAG 3.0 formally approved by the group">Requirements  for  WCAG&nbsp;3.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2021-01-21 - <a title="Requirements for WCAG 3.0 publication history" href="/standards/history/wcag-3.0-requirements">History</a>
                        - <a href="https://w3c.github.io/silver/requirements/" title="Latest editor's draft of Requirements for WCAG 3.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeanne F Spellman
                            <li>Shawn Lauriat
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web share api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-web-share-20210120/" title="Latest draft of Web Share API formally approved by the group">Web Share API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2021-01-20 - <a title="Web Share API publication history" href="/standards/history/web-share">History</a>
                        - <a href="https://w3c.github.io/web-share/" title="Latest editor's draft of Web Share API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Giuca
                            <li>Eric Willigers
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mediastreamtrack content hints" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-mst-content-hint-20210119/" title="Latest draft of MediaStreamTrack Content Hints formally approved by the group">MediaStreamTrack Content Hints</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-01-19 - <a title="MediaStreamTrack Content Hints publication history" href="/standards/history/mst-content-hint">History</a>
                        - <a href="https://w3c.github.io/mst-content-hint/" title="Latest editor's draft of MediaStreamTrack Content Hints">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harald Alvestrand
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="the responsible use of spatial data" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2021/NOTE-responsible-use-spatial-20210119/" title="Latest draft of The Responsible Use of Spatial Data formally approved by the group">The Responsible Use of Spatial Data</a></h2>
                        <p class=deliverer>Spatial Data on the Web Interest Group</p>
                        <p class=pubdetails>2021-01-19 - <a title="The Responsible Use of Spatial Data publication history" href="/standards/history/responsible-use-spatial">History</a>
                        - <a href="https://w3c.github.io/sdw/responsible-use/" title="Latest editor's draft of The Responsible Use of Spatial Data">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>JOSEPH ABHAYARATNA
                            <li>Ed Parsons
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media capture from dom elements" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2021/WD-mediacapture-fromelement-20210119/" title="Latest draft of Media Capture from DOM Elements formally approved by the group">Media Capture from DOM Elements</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2021-01-19 - <a title="Media Capture from DOM Elements publication history" href="/standards/history/mediacapture-fromelement">History</a>
                        - <a href="https://w3c.github.io/mediacapture-fromelement/" title="Latest editor's draft of Media Capture from DOM Elements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Thomson
                            <li>Miguel Casas-sanchez
                            <li>Emircan Uysaler
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="epub 3 overview" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2021/NOTE-epub-overview-33-20210112/" title="Latest draft of EPUB 3 Overview formally approved by the group">EPUB 3 Overview</a></h2>
                        <p class=deliverer>EPUB 3 Working Group</p>
                        <p class=pubdetails>2021-01-12 - <a title="EPUB 3 Overview publication history" href="/standards/history/epub-overview-33">History</a>
                        - <a href="https://w3c.github.io/epub-specs/epub33/overview/" title="Latest editor's draft of EPUB 3 Overview">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Garth Conboy
                            <li>Matt Garrish
                            <li>Daniel Weck
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="epub multiple-rendition publications 1.1" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2021/NOTE-epub-multi-rend-11-20210112/" title="Latest draft of EPUB Multiple-Rendition Publications 1.1 formally approved by the group">EPUB  Multiple-Rendition  Publications&nbsp;1.1</a></h2>
                        <p class=deliverer>EPUB 3 Working Group</p>
                        <p class=pubdetails>2021-01-12 - <a title="EPUB Multiple-Rendition Publications 1.1 publication history" href="/standards/history/epub-multi-rend-11">History</a>
                        - <a href="https://w3c.github.io/epub-specs/epub33/multi-rend/" title="Latest editor's draft of EPUB Multiple-Rendition Publications 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css pseudo-elements module level 4" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-pseudo-4-20201231/" title="Latest draft of CSS Pseudo-Elements Module Level 4 formally approved by the group">CSS  Pseudo-Elements  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-31 - <a title="CSS Pseudo-Elements Module Level 4 publication history" href="/standards/history/css-pseudo-4">History</a>
                        - <a href="https://drafts.csswg.org/css-pseudo-4/" title="Latest editor's draft of CSS Pseudo-Elements Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Glazman
                            <li>Elika Etemad
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css box model module level 3" data-tag="css" data-status="cr" data-version="upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationSnapshot"><a href="https://www.w3.org/TR/2020/CR-css-box-3-20201222/" title="Latest draft of CSS Box Model Module Level 3 formally approved by the group">CSS  Box  Model  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-22 - <a title="CSS Box Model Module Level 3 publication history" href="/standards/history/css-box-3">History</a>
                        - <a href="https://drafts.csswg.org/css-box-3/" title="Latest editor's draft of CSS Box Model Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="css snapshot 2020" data-tag="css" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-css-2020-20201222/" title="Latest draft of CSS Snapshot 2020 formally approved by the group">CSS Snapshot 2020</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-22 - <a title="CSS Snapshot 2020 publication history" href="/standards/history/css-2020">History</a>
                        - <a href="https://drafts.csswg.org/css-2020/" title="Latest editor's draft of CSS Snapshot 2020">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css containment module level 1" data-tag="css" data-status="rec" data-version="upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-css-contain-1-20201222/" title="Latest draft of CSS Containment Module Level 1 formally approved by the group">CSS  Containment  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-22 - <a title="CSS Containment Module Level 1 publication history" href="/standards/history/css-contain-1">History</a>
                        - <a href="https://drafts.csswg.org/css-contain-1/" title="Latest editor's draft of CSS Containment Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css backgrounds and borders module level 3" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationSnapshot"><a href="https://www.w3.org/TR/2020/CR-css-backgrounds-3-20201222/" title="Latest draft of CSS Backgrounds and Borders Module Level 3 formally approved by the group">CSS  Backgrounds  and  Borders  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-22 - <a title="CSS Backgrounds and Borders Module Level 3 publication history" href="/standards/history/css-backgrounds-3">History</a>
                        - <a href="https://drafts.csswg.org/css-backgrounds/" title="Latest editor's draft of CSS Backgrounds and Borders Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                            <li>Elika Etemad
                            <li>Brad Kemper
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css display module level 3" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2020/CRD-css-display-3-20201218/" title="Latest draft of CSS Display Module Level 3 formally approved by the group">CSS  Display  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-18 - <a title="CSS Display Module Level 3 publication history" href="/standards/history/css-display-3">History</a>
                        - <a href="https://drafts.csswg.org/css-display/" title="Latest editor's draft of CSS Display Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="css grid layout module level 1" data-tag="css" data-status="cr" data-version="ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2020/CRD-css-grid-1-20201218/" title="Latest draft of CSS Grid Layout Module Level 1 formally approved by the group">CSS  Grid  Layout  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-18 - <a title="CSS Grid Layout Module Level 1 publication history" href="/standards/history/css-grid-1">History</a>
                        - <a href="https://drafts.csswg.org/css-grid/" title="Latest editor's draft of CSS Grid Layout Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Rossen Atanassov
                            <li>Oriol Brufau
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css grid layout module level 2" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2020/CRD-css-grid-2-20201218/" title="Latest draft of CSS Grid Layout Module Level 2 formally approved by the group">CSS  Grid  Layout  Module  Level&nbsp;2</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-18 - <a title="CSS Grid Layout Module Level 2 publication history" href="/standards/history/css-grid-2">History</a>
                        - <a href="https://drafts.csswg.org/css-grid-2/" title="Latest editor's draft of CSS Grid Layout Module Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Rossen Atanassov
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css images module level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2020/CRD-css-images-3-20201217/" title="Latest draft of CSS Images Module Level 3 formally approved by the group">CSS  Images  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-17 - <a title="CSS Images Module Level 3 publication history" href="/standards/history/css-images-3">History</a>
                        - <a href="https://drafts.csswg.org/css-images-3/" title="Latest editor's draft of CSS Images Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Lea Verou
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css containment module level 2" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-contain-2-20201216/" title="Latest draft of CSS Containment Module Level 2 formally approved by the group">CSS  Containment  Module  Level&nbsp;2</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-16 - <a title="CSS Containment Module Level 2 publication history" href="/standards/history/css-contain-2">History</a>
                        - <a href="https://drafts.csswg.org/css-contain-2/" title="Latest editor's draft of CSS Containment Module Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Florian Rivoal
                            <li>Vladimir Levin
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css custom highlight api module level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-highlight-api-1-20201208/" title="Latest draft of CSS Custom Highlight API Module Level 1 formally approved by the group">CSS  Custom  Highlight  API  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-08 - <a title="CSS Custom Highlight API Module Level 1 publication history" href="/standards/history/css-highlight-api-1">History</a>
                        - <a href="https://drafts.csswg.org/css-highlight-api-1/" title="Latest editor's draft of CSS Custom Highlight API Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="the merchantvalidationevent interface" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-merchant-validation-20201208/" title="Latest draft of The MerchantValidationEvent interface formally approved by the group">The MerchantValidationEvent interface</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2020-12-08 - <a title="The MerchantValidationEvent interface publication history" href="/standards/history/merchant-validation">History</a>
                        - <a href="https://w3c.github.io/merchant-validation/" title="Latest editor's draft of The MerchantValidationEvent interface">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css conditional rules module level 3" data-tag="css" data-status="cr" data-version="upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationSnapshot"><a href="https://www.w3.org/TR/2020/CR-css-conditional-3-20201208/" title="Latest draft of CSS Conditional Rules Module Level 3 formally approved by the group">CSS  Conditional  Rules  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-12-08 - <a title="CSS Conditional Rules Module Level 3 publication history" href="/standards/history/css-conditional-3">History</a>
                        - <a href="https://drafts.csswg.org/css-conditional-3/" title="Latest editor's draft of CSS Conditional Rules Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                            <li>Elika Etemad
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="rtc accessibility user requirements" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-raur-20201207/" title="Latest draft of RTC Accessibility User Requirements formally approved by the group">RTC Accessibility User Requirements</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-12-07 - <a title="RTC Accessibility User Requirements publication history" href="/standards/history/raur">History</a>
                        - <a href="https://w3c.github.io/apa/raur/" title="Latest editor's draft of RTC Accessibility User Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joshue O Connor
                            <li>Janina Sajka
                            <li>Jason White
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="webxr layers api level 1" data-tag="graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-webxrlayers-1-20201203/" title="Latest draft of WebXR Layers API Level 1 formally approved by the group">WebXR  Layers  API  Level&nbsp;1</a></h2>
                        <p class=deliverer>Immersive Web Working Group</p>
                        <p class=pubdetails>2020-12-03 - <a title="WebXR Layers API Level 1 publication history" href="/standards/history/webxrlayers-1">History</a>
                        - <a href="https://immersive-web.github.io/layers/" title="Latest editor's draft of WebXR Layers API Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rik Cabanier
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="payment request api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationSnapshot"><a href="https://www.w3.org/TR/2020/CR-payment-request-20201203/" title="Latest draft of Payment Request API formally approved by the group">Payment Request API</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2020-12-03 - <a title="Payment Request API publication history" href="/standards/history/payment-request">History</a>
                        - <a href="https://w3c.github.io/payment-request/" title="Latest editor's draft of Payment Request API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Danyao Wang
                            <li>Rouslan Solomakhin
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web of things (wot) discovery" data-tag="wot" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-wot-discovery-20201124/" title="Latest draft of Web of Things (WoT) Discovery formally approved by the group">Web of Things (WoT) Discovery</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-11-24 - <a title="Web of Things (WoT) Discovery publication history" href="/standards/history/wot-discovery">History</a>
                        - <a href="https://w3c.github.io/wot-discovery/" title="Latest editor's draft of Web of Things (WoT) Discovery">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrea Cimmino
                            <li>Michael McCool
                            <li>Farshid Tavakolizadeh
                            <li>Kunihiko Toumura
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="web of things (wot) thing description 1.1" data-tag="wot" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-wot-thing-description11-20201124/" title="Latest draft of Web of Things (WoT) Thing Description 1.1 formally approved by the group">Web  of  Things  (WoT)  Thing  Description&nbsp;1.1</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-11-24 - <a title="Web of Things (WoT) Thing Description 1.1 publication history" href="/standards/history/wot-thing-description11">History</a>
                        - <a href="https://w3c.github.io/wot-thing-description/" title="Latest editor's draft of Web of Things (WoT) Thing Description 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sebastian Käbisch
                            <li>Takuki Kamiya
                            <li>Michael McCool
                            <li>Victor Charpenay
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web of things (wot) profile" data-tag="wot" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-wot-profile-20201124/" title="Latest draft of Web of Things (WoT) Profile formally approved by the group">Web of Things (WoT) Profile</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-11-24 - <a title="Web of Things (WoT) Profile publication history" href="/standards/history/wot-profile">History</a>
                        - <a href="https://w3c.github.io/wot-profile/" title="Latest editor's draft of Web of Things (WoT) Profile">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Lagally
                            <li>Michael McCool
                            <li>Ryuichi Matsukura
                            <li>Sebastian Käbisch
                            <li>Tomoaki Mizushima
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="web of things (wot) architecture 1.1" data-tag="wot" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-wot-architecture11-20201124/" title="Latest draft of Web of Things (WoT) Architecture 1.1 formally approved by the group">Web  of  Things  (WoT)  Architecture&nbsp;1.1</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-11-24 - <a title="Web of Things (WoT) Architecture 1.1 publication history" href="/standards/history/wot-architecture11">History</a>
                        - <a href="https://w3c.github.io/wot-architecture/" title="Latest editor's draft of Web of Things (WoT) Architecture 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Lagally
                            <li>Ryuichi Matsukura
                            <li>Toru Kawaguchi
                            <li>Kunihiko Toumura
                            <li>Kazuo Kajimoto
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web of things (wot) scripting api" data-tag="wot" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-wot-scripting-api-20201124/" title="Latest draft of Web of Things (WoT) Scripting API formally approved by the group">Web of Things (WoT) Scripting API</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-11-24 - <a title="Web of Things (WoT) Scripting API publication history" href="/standards/history/wot-scripting-api">History</a>
                        - <a href="https://w3c.github.io/wot-scripting-api/" title="Latest editor's draft of Web of Things (WoT) Scripting API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Zoltan Kis
                            <li>Daniel Peintner
                            <li>Cristiano Aguzzi
                            <li>Johannes Hund
                            <li>Kazuaki Nimura
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ttml media type definition and profile registry" data-tag="accessibility css html" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-ttml-profile-registry-20201119/" title="Latest draft of TTML Media Type Definition and Profile Registry formally approved by the group">TTML Media Type Definition and Profile Registry</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2020-11-19 - <a title="TTML Media Type Definition and Profile Registry publication history" href="/standards/history/ttml-profile-registry">History</a>
                        - <a href="https://w3c.github.io/tt-profile-registry/" title="Latest editor's draft of TTML Media Type Definition and Profile Registry">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike Dolan
                            <li>Nigel Megitt
                            <li>Glenn Adams
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="css">CSS
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css fonts module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-fonts-4-20201117/" title="Latest draft of CSS Fonts Module Level 4 formally approved by the group">CSS  Fonts  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-11-17 - <a title="CSS Fonts Module Level 4 publication history" href="/standards/history/css-fonts-4">History</a>
                        - <a href="https://drafts.csswg.org/css-fonts-4/" title="Latest editor's draft of CSS Fonts Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Daggett
                            <li>Myles Maxfield
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css lists and counters module level 3" data-tag="css i18n" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-lists-3-20201117/" title="Latest draft of CSS Lists and Counters Module Level 3 formally approved by the group">CSS  Lists  and  Counters  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-11-17 - <a title="CSS Lists and Counters Module Level 3 publication history" href="/standards/history/css-lists-3">History</a>
                        - <a href="https://drafts.csswg.org/css-lists-3/" title="Latest editor's draft of CSS Lists and Counters Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="css color module level 4" data-tag="css" data-status="wd" data-version="ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-color-4-20201112/" title="Latest draft of CSS Color Module Level 4 formally approved by the group">CSS  Color  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-11-12 - <a title="CSS Color Module Level 4 publication history" href="/standards/history/css-color-4">History</a>
                        - <a href="https://drafts.csswg.org/css-color/" title="Latest editor's draft of CSS Color Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css values and units module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-values-4-20201111/" title="Latest draft of CSS Values and Units Module Level 4 formally approved by the group">CSS  Values  and  Units  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-11-11 - <a title="CSS Values and Units Module Level 4 publication history" href="/standards/history/css-values-4">History</a>
                        - <a href="https://drafts.csswg.org/css-values-4/" title="Latest editor's draft of CSS Values and Units Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css scroll anchoring module level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-scroll-anchoring-1-20201111/" title="Latest draft of CSS Scroll Anchoring Module Level 1 formally approved by the group">CSS  Scroll  Anchoring  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-11-11 - <a title="CSS Scroll Anchoring Module Level 1 publication history" href="/standards/history/css-scroll-anchoring-1">History</a>
                        - <a href="https://drafts.csswg.org/css-scroll-anchoring/" title="Latest editor's draft of CSS Scroll Anchoring Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web platform design principles" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-design-principles-20201110/" title="Latest draft of Web Platform Design Principles formally approved by the group">Web Platform Design Principles</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2020-11-10 - <a title="Web Platform Design Principles publication history" href="/standards/history/design-principles">History</a>
                        - <a href="https://w3ctag.github.io/design-principles/" title="Latest editor's draft of Web Platform Design Principles">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sangwhan Moon
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="audiobooks" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-audiobooks-20201110/" title="Latest draft of Audiobooks formally approved by the group">Audiobooks</a></h2>
                        <p class=deliverer>Audiobooks Working Group</p>
                        <p class=pubdetails>2020-11-10 - <a title="Audiobooks publication history" href="/standards/history/audiobooks">History</a>
                        - <a href="https://w3c.github.io/audiobooks/" title="Latest editor's draft of Audiobooks">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Reid
                            <li>Matt Garrish
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="publication manifest" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-pub-manifest-20201110/" title="Latest draft of Publication Manifest formally approved by the group">Publication Manifest</a></h2>
                        <p class=deliverer>Audiobooks Working Group</p>
                        <p class=pubdetails>2020-11-10 - <a title="Publication Manifest publication history" href="/standards/history/pub-manifest">History</a>
                        - <a href="https://w3c.github.io/pub-manifest/" title="Latest editor's draft of Publication Manifest">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                            <li>Ivan Herman
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css color adjustment module level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-color-adjust-1-20201109/" title="Latest draft of CSS Color Adjustment Module Level 1 formally approved by the group">CSS  Color  Adjustment  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-11-09 - <a title="CSS Color Adjustment Module Level 1 publication history" href="/standards/history/css-color-adjust-1">History</a>
                        - <a href="https://drafts.csswg.org/css-color-adjust-1/" title="Latest editor's draft of CSS Color Adjustment Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Rossen Atanassov
                            <li>Rune Lillesveen
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="presentation api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendationDraft"><a href="https://www.w3.org/TR/2020/CRD-presentation-api-20201105/" title="Latest draft of Presentation API formally approved by the group">Presentation API</a></h2>
                        <p class=deliverer>Second Screen Working Group</p>
                        <p class=pubdetails>2020-11-05 - <a title="Presentation API publication history" href="/standards/history/presentation-api">History</a>
                        - <a href="https://w3c.github.io/presentation-api/" title="Latest editor's draft of Presentation API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Foltz
                            <li>Dominik Röttsches
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="how emvco, fido, and w3c technologies relate" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-htr-20201105/" title="Latest draft of How EMVCo, FIDO, and W3C Technologies Relate formally approved by the group">How EMVCo, FIDO, and W3C Technologies Relate</a></h2>
                        <p class=deliverer>Web Payment Security Interest Group</p>
                        <p class=pubdetails>2020-11-05 - <a title="How EMVCo, FIDO, and W3C Technologies Relate publication history" href="/standards/history/htr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Jacobs
                          </ul>
                                  </li>
                                                                                                                          <li data-title="document object model (dom) requirements" data-tag="dom" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-DOM-Requirements-20201103/" title="Latest draft of Document Object Model (DOM) Requirements formally approved by the group">Document Object Model (DOM) Requirements</a></h2>
                        <p class=pubdetails>2020-11-03 - <a title="Document Object Model (DOM) Requirements publication history" href="/standards/history/DOM-Requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Chang
                            <li>Philippe Le Hégaret
                            <li>Arnaud Le Hors
                            <li>Ray Whitmer
                            <li>Mike Champion
                            <li>Joseph Kesselman
                            <li>Andy Heninger
                            <li>Angel Diaz
                            <li>James Davidson
                            <li>Lauren Wood
                            <li>Jared Sorensen
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="dom" data-tag="dom" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-dom-20201103/" title="Latest draft of DOM formally approved by the group">DOM</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2020-11-03 - <a title="DOM publication history" href="/standards/history/dom">History</a>
                        - <a href="https://dom.spec.whatwg.org/" title="Latest editor's draft of DOM">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="json-ld 1.0" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/SPSD-json-ld-20201103/" title="Latest draft of JSON-LD 1.0 formally approved by the group">JSON-LD&nbsp;1.0</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2020-11-03 - <a title="JSON-LD 1.0 publication history" href="/standards/history/json-ld">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Gregg Kellogg
                            <li>Markus Lanthaler
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="document object model (dom) level 3 xpath specification" data-tag="dom xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-DOM-Level-3-XPath-20201103/" title="Latest draft of Document Object Model (DOM) Level 3 XPath Specification formally approved by the group">Document Object Model (DOM) Level 3 XPath Specification</a></h2>
                        <p class=pubdetails>2020-11-03 - <a title="Document Object Model (DOM) Level 3 XPath Specification publication history" href="/standards/history/DOM-Level-3-XPath">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ray Whitmer
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="document object model (dom) level 3 views and formatting specification" data-tag="dom" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-DOM-Level-3-Views-20201103/" title="Latest draft of Document Object Model (DOM) Level 3 Views and Formatting Specification formally approved by the group">Document Object Model (DOM) Level 3 Views and Formatting Specification</a></h2>
                        <p class=pubdetails>2020-11-03 - <a title="Document Object Model (DOM) Level 3 Views and Formatting Specification publication history" href="/standards/history/DOM-Level-3-Views">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ray Whitmer
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                          <li data-title="document object model (dom) level 3 abstract schemas specification" data-tag="dom" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-DOM-Level-3-AS-20201103/" title="Latest draft of Document Object Model (DOM) Level 3 Abstract Schemas Specification formally approved by the group">Document Object Model (DOM) Level 3 Abstract Schemas Specification</a></h2>
                        <p class=pubdetails>2020-11-03 - <a title="Document Object Model (DOM) Level 3 Abstract Schemas Specification publication history" href="/standards/history/DOM-Level-3-AS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Chang
                            <li>Elena Litani
                            <li>Joseph Kesselman
                            <li>rezaur rahman
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                          <li data-title="json-ld 1.0 processing algorithms and api" data-tag="data webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/SPSD-json-ld-api-20201103/" title="Latest draft of JSON-LD 1.0 Processing Algorithms and API formally approved by the group">JSON-LD 1.0 Processing Algorithms and API</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2020-11-03 - <a title="JSON-LD 1.0 Processing Algorithms and API publication history" href="/standards/history/json-ld-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markus Lanthaler
                            <li>Gregg Kellogg
                            <li>Manu Sporny
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for chinese text layout中文排版需求" data-tag="css graphics i18n xml" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-clreq-20201101/" title="Latest draft of Requirements for Chinese Text Layout中文排版需求 formally approved by the group">Requirements for Chinese Text Layout中文排版需求</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-11-01 - <a title="Requirements for Chinese Text Layout中文排版需求 publication history" href="/standards/history/clreq">History</a>
                        - <a href="https://w3c.github.io/clreq/" title="Latest editor's draft of Requirements for Chinese Text Layout中文排版需求">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bobby Tung
                            <li>Yijun Chen
                            <li>Eric Q LIU
                            <li>Hui Jing Chen
                            <li>Fuqiao Xue
                            <li>Richard Ishida
                            <li>An Qi Li
                            <li>Hai Liang
                            <li>Xiaoqian Wu
                            <li>Aijie Zhang
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for personalization semantics" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-personalization-semantics-requirements-1.0-20201028/" title="Latest draft of Requirements for Personalization Semantics formally approved by the group">Requirements for Personalization Semantics</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-10-28 - <a title="Requirements for Personalization Semantics publication history" href="/standards/history/personalization-semantics-requirements-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/requirements/" title="Latest editor's draft of Requirements for Personalization Semantics">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Horwitz
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="webxr hand input module - level 1" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-webxr-hand-input-1-20201022/" title="Latest draft of WebXR Hand Input Module - Level 1 formally approved by the group">WebXR  Hand  Input  Module  -  Level&nbsp;1</a></h2>
                        <p class=deliverer>Immersive Web Working Group</p>
                        <p class=pubdetails>2020-10-22 - <a title="WebXR Hand Input Module - Level 1 publication history" href="/standards/history/webxr-hand-input-1">History</a>
                        - <a href="https://immersive-web.github.io/webxr-hand-input/" title="Latest editor's draft of WebXR Hand Input Module - Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manish Goregaokar
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="propagation format for distributed trace context: baggage" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-baggage-20201020/" title="Latest draft of Propagation format for distributed trace context: Baggage formally approved by the group">Propagation format for distributed trace context: Baggage</a></h2>
                        <p class=deliverer>Distributed Tracing Working Group</p>
                        <p class=pubdetails>2020-10-20 - <a title="Propagation format for distributed trace context: Baggage publication history" href="/standards/history/baggage">History</a>
                        - <a href="https://w3c.github.io/baggage/" title="Latest editor's draft of Propagation format for distributed trace context: Baggage">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sergey Kanzhelev
                            <li>Morgan McLean
                            <li>Alois Reitbauer
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css box sizing module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-sizing-4-20201020/" title="Latest draft of CSS Box Sizing Module Level 4 formally approved by the group">CSS  Box  Sizing  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-10-20 - <a title="CSS Box Sizing Module Level 4 publication history" href="/standards/history/css-sizing-4">History</a>
                        - <a href="https://drafts.csswg.org/css-sizing-4/" title="Latest editor's draft of CSS Box Sizing Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="the screen orientation api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-screen-orientation-20201019/" title="Latest draft of The Screen Orientation API formally approved by the group">The Screen Orientation API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2020-10-19 - <a title="The Screen Orientation API publication history" href="/standards/history/screen-orientation">History</a>
                        - <a href="https://w3c.github.io/screen-orientation/" title="Latest editor's draft of The Screen Orientation API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Marcos Caceres
                            <li>Johanna Herman
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="progressive font enrichment: evaluation report" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-PFE-evaluation-20201015/" title="Latest draft of Progressive Font Enrichment: Evaluation Report formally approved by the group">Progressive Font Enrichment: Evaluation Report</a></h2>
                        <p class=deliverer>Web Fonts Working Group</p>
                        <p class=pubdetails>2020-10-15 - <a title="Progressive Font Enrichment: Evaluation Report publication history" href="/standards/history/PFE-evaluation">History</a>
                        - <a href="https://w3c.github.io/PFE-analysis/report/evaluation-report.html" title="Latest editor's draft of Progressive Font Enrichment: Evaluation Report">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css properties and values api level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-properties-values-api-1-20201013/" title="Latest draft of CSS Properties and Values API Level 1 formally approved by the group">CSS  Properties  and  Values  API  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2020-10-13 - <a title="CSS Properties and Values API Level 1 publication history" href="/standards/history/css-properties-values-api-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-properties-values-api-1/" title="Latest editor's draft of CSS Properties and Values API Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Daniel Glazman
                            <li>Alan Stearns
                            <li>Greg Whitworth
                            <li>Shane Stephens
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="language tags and locale identifiers for the world wide web" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-ltli-20201007/" title="Latest draft of Language Tags and Locale Identifiers for the World Wide Web formally approved by the group">Language Tags and Locale Identifiers for the World Wide Web</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-10-07 - <a title="Language Tags and Locale Identifiers for the World Wide Web publication history" href="/standards/history/ltli">History</a>
                        - <a href="https://w3c.github.io/ltli/" title="Latest editor's draft of Language Tags and Locale Identifiers for the World Wide Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="resource hints" data-tag="performance" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-resource-hints-20201005/" title="Latest draft of Resource Hints formally approved by the group">Resource Hints</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2020-10-05 - <a title="Resource Hints publication history" href="/standards/history/resource-hints">History</a>
                        - <a href="https://w3c.github.io/resource-hints/" title="Latest editor's draft of Resource Hints">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                          <li data-title="packaged web publications" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-pwpub-20201001/" title="Latest draft of Packaged Web Publications formally approved by the group">Packaged Web Publications</a></h2>
                        <p class=deliverer>Audiobooks Working Group</p>
                        <p class=pubdetails>2020-10-01 - <a title="Packaged Web Publications publication history" href="/standards/history/pwpub">History</a>
                        - <a href="https://w3c.github.io/pwpub/" title="Latest editor's draft of Packaged Web Publications">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Wood
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web annotation extensions for web publications" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-wpub-ann-20201001/" title="Latest draft of Web Annotation Extensions for Web Publications formally approved by the group">Web Annotation Extensions for Web Publications</a></h2>
                        <p class=deliverer>Audiobooks Working Group</p>
                        <p class=pubdetails>2020-10-01 - <a title="Web Annotation Extensions for Web Publications publication history" href="/standards/history/wpub-ann">History</a>
                        - <a href="https://w3c.github.io/wpub-ann/" title="Latest editor's draft of Web Annotation Extensions for Web Publications">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timothy Cole
                            <li>Ivan Herman
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="screen wake lock api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-screen-wake-lock-20200929/" title="Latest draft of Screen Wake Lock API formally approved by the group">Screen Wake Lock API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2020-09-29 - <a title="Screen Wake Lock API publication history" href="/standards/history/screen-wake-lock">History</a>
                        - <a href="https://w3c.github.io/screen-wake-lock/" title="Latest editor's draft of Screen Wake Lock API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kenneth Christiansen
                            <li>Marcos Caceres
                            <li>Raphael Kubo da Costa
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="xr accessibility user requirements" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-xaur-20200916/" title="Latest draft of XR Accessibility User Requirements formally approved by the group">XR Accessibility User Requirements</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-09-16 - <a title="XR Accessibility User Requirements publication history" href="/standards/history/xaur">History</a>
                        - <a href="https://w3c.github.io/apa/xaur/" title="Latest editor's draft of XR Accessibility User Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joshue O Connor
                            <li>Janina Sajka
                            <li>Jason White
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="worklets level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-worklets-1-20200908/" title="Latest draft of Worklets Level 1 formally approved by the group">Worklets  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2020-09-08 - <a title="Worklets Level 1 publication history" href="/standards/history/worklets-1">History</a>
                        - <a href="https://drafts.css-houdini.org/worklets/" title="Latest editor's draft of Worklets Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Kilpatrick
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css inline layout module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-inline-3-20200827/" title="Latest draft of CSS Inline Layout Module Level 3 formally approved by the group">CSS  Inline  Layout  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-08-27 - <a title="CSS Inline Layout Module Level 3 publication history" href="/standards/history/css-inline-3">History</a>
                        - <a href="https://drafts.csswg.org/css-inline-3/" title="Latest editor's draft of CSS Inline Layout Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Cramer
                            <li>Elika Etemad
                            <li>Steve Zilles
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="webdriver" data-tag="webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-webdriver2-20200824/" title="Latest draft of WebDriver formally approved by the group">WebDriver</a></h2>
                        <p class=deliverer>Browser Testing and Tools Working Group</p>
                        <p class=pubdetails>2020-08-24 - <a title="WebDriver publication history" href="/standards/history/webdriver2">History</a>
                        - <a href="https://w3c.github.io/webdriver/" title="Latest editor's draft of WebDriver">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Stewart
                            <li>David Burns
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="html accessibility api mappings 1.0" data-tag="accessibility html" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-html-aam-1.0-20200817/" title="Latest draft of HTML Accessibility API Mappings 1.0 formally approved by the group">HTML  Accessibility  API  Mappings&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2020-08-17 - <a title="HTML Accessibility API Mappings 1.0 publication history" href="/standards/history/html-aam-1.0">History</a>
                        - <a href="https://w3c.github.io/html-aam/" title="Latest editor's draft of HTML Accessibility API Mappings 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Alexander Surkov
                            <li>Scott O&#039;Hara
                            <li>Bogdan Brinza
                            <li>Jason Kiss
                            <li>Cynthia Shelly
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for japanese text layout 日本語組版処理の要件(日本語版)" data-tag="css graphics i18n xml" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-jlreq-20200811/" title="Latest draft of Requirements for Japanese Text Layout 日本語組版処理の要件(日本語版) formally approved by the group">Requirements for Japanese Text Layout 日本語組版処理の要件(日本語版)</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-08-11 - <a title="Requirements for Japanese Text Layout 日本語組版処理の要件(日本語版) publication history" href="/standards/history/jlreq">History</a>
                        - <a href="https://w3c.github.io/jlreq/" title="Latest editor's draft of Requirements for Japanese Text Layout 日本語組版処理の要件(日本語版)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hiroyuki Chiba
                            <li>Junzaburo Edamoto
                            <li>Richard Ishida
                            <li>Seiichi Kato
                            <li>Tatsuo KOBAYASHI
                            <li>Toshi Kobayashi
                            <li>Nathaniel McCully
                            <li>Felix Sasaki
                            <li>Atsushi Shimono
                            <li>Hajime Shiozawa
                            <li>Fuqiao Xue
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="ttml profiles for internet media subtitles and captions 1.2" data-tag="media" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-ttml-imsc1.2-20200804/" title="Latest draft of TTML Profiles for Internet Media Subtitles and Captions 1.2 formally approved by the group">TTML  Profiles  for  Internet  Media  Subtitles  and  Captions&nbsp;1.2</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2020-08-04 - <a title="TTML Profiles for Internet Media Subtitles and Captions 1.2 publication history" href="/standards/history/ttml-imsc1.2">History</a>
                        - <a href="https://w3c.github.io/imsc/imsc1/spec/ttml-ww-profiles.html" title="Latest editor's draft of TTML Profiles for Internet Media Subtitles and Captions 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="media queries level 5" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-mediaqueries-5-20200731/" title="Latest draft of Media Queries Level 5 formally approved by the group">Media  Queries  Level&nbsp;5</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-07-31 - <a title="Media Queries Level 5 publication history" href="/standards/history/mediaqueries-5">History</a>
                        - <a href="https://drafts.csswg.org/mediaqueries-5/" title="Latest editor's draft of Media Queries Level 5">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dean Jackson
                            <li>Florian Rivoal
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="server timing" data-tag="performance webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-server-timing-20200728/" title="Latest draft of Server Timing formally approved by the group">Server Timing</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2020-07-28 - <a title="Server Timing publication history" href="/standards/history/server-timing">History</a>
                        - <a href="https://w3c.github.io/server-timing/" title="Latest editor's draft of Server Timing">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Charles Vazac
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webxr device api" data-tag="graphics webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-webxr-20200724/" title="Latest draft of WebXR Device API formally approved by the group">WebXR Device API</a></h2>
                        <p class=deliverer>Immersive Web Working Group</p>
                        <p class=pubdetails>2020-07-24 - <a title="WebXR Device API publication history" href="/standards/history/webxr">History</a>
                        - <a href="https://immersive-web.github.io/webxr/" title="Latest editor's draft of WebXR Device API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Jones
                            <li>Manish Goregaokar
                            <li>Nell Waliczek
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="web payments http messages 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-webpayments-http-messages-20200721/" title="Latest draft of Web Payments HTTP Messages 1.0 formally approved by the group">Web  Payments  HTTP  Messages&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2020-07-21 - <a title="Web Payments HTTP Messages 1.0 publication history" href="/standards/history/webpayments-http-messages">History</a>
                        - <a href="https://w3c.github.io/webpayments-http-messages/" title="Latest editor's draft of Web Payments HTTP Messages 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Shane McCarron
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="media queries level 4" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-mediaqueries-4-20200721/" title="Latest draft of Media Queries Level 4 formally approved by the group">Media  Queries  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-07-21 - <a title="Media Queries Level 4 publication history" href="/standards/history/mediaqueries-4">History</a>
                        - <a href="https://drafts.csswg.org/mediaqueries-4/" title="Latest editor's draft of Media Queries Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Rivoal
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="permissions" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-permissions-20200720/" title="Latest draft of Permissions formally approved by the group">Permissions</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2020-07-20 - <a title="Permissions publication history" href="/standards/history/permissions">History</a>
                        - <a href="https://w3c.github.io/permissions/" title="Latest editor's draft of Permissions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Marcos Caceres
                            <li>Jeffrey Yasskin
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="json-ld 1.1 processing algorithms and api" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-json-ld11-api-20200716/" title="Latest draft of JSON-LD 1.1 Processing Algorithms and API formally approved by the group">JSON-LD 1.1 Processing Algorithms and API</a></h2>
                        <p class=deliverer>JSON-LD Working Group</p>
                        <p class=pubdetails>2020-07-16 - <a title="JSON-LD 1.1 Processing Algorithms and API publication history" href="/standards/history/json-ld11-api">History</a>
                        - <a href="https://w3c.github.io/json-ld-api/" title="Latest editor's draft of JSON-LD 1.1 Processing Algorithms and API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                            <li>Dave Longley
                            <li>Pierre-Antoine Champin
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="json-ld 1.1 framing" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-json-ld11-framing-20200716/" title="Latest draft of JSON-LD 1.1 Framing formally approved by the group">JSON-LD 1.1 Framing</a></h2>
                        <p class=deliverer>JSON-LD Working Group</p>
                        <p class=pubdetails>2020-07-16 - <a title="JSON-LD 1.1 Framing publication history" href="/standards/history/json-ld11-framing">History</a>
                        - <a href="https://w3c.github.io/json-ld-framing/" title="Latest editor's draft of JSON-LD 1.1 Framing">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Longley
                            <li>Gregg Kellogg
                            <li>Pierre-Antoine Champin
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="permissions policy" data-tag="security webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-permissions-policy-1-20200716/" title="Latest draft of Permissions Policy formally approved by the group">Permissions Policy</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2020-07-16 - <a title="Permissions Policy publication history" href="/standards/history/permissions-policy-1">History</a>
                        - <a href="https://w3c.github.io/webappsec-permissions-policy/" title="Latest editor's draft of Permissions Policy">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Clelland
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                        <li data-title="json-ld 1.1" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-json-ld11-20200716/" title="Latest draft of JSON-LD 1.1 formally approved by the group">JSON-LD&nbsp;1.1</a></h2>
                        <p class=deliverer>JSON-LD Working Group</p>
                        <p class=pubdetails>2020-07-16 - <a title="JSON-LD 1.1 publication history" href="/standards/history/json-ld11">History</a>
                        - <a href="https://w3c.github.io/json-ld-syntax/" title="Latest editor's draft of JSON-LD 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                            <li>Pierre-Antoine Champin
                            <li>Dave Longley
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="inuktitut &amp; cree gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-cans-iu-cr-gap-20200715/" title="Latest draft of Inuktitut &amp; Cree Gap Analysis formally approved by the group">Inuktitut & Cree Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-07-15 - <a title="Inuktitut &amp; Cree Gap Analysis publication history" href="/standards/history/cans-iu-cr-gap">History</a>
                        - <a href="https://w3c.github.io/amlreq/gap-analysis/iu-cr-gap" title="Latest editor's draft of Inuktitut &amp; Cree Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="cherokee gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-cher-gap-20200715/" title="Latest draft of Cherokee Gap Analysis formally approved by the group">Cherokee Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-07-15 - <a title="Cherokee Gap Analysis publication history" href="/standards/history/cher-gap">History</a>
                        - <a href="https://w3c.github.io/amlreq/gap-analysis/chr-gap.html" title="Latest editor's draft of Cherokee Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="extensions to the owl-time ontology - entity relations" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-vocab-owl-time-rel-20200707/" title="Latest draft of Extensions to the OWL-Time Ontology - entity relations formally approved by the group">Extensions to the OWL-Time Ontology - entity relations</a></h2>
                        <p class=deliverer>Spatial Data on the Web Interest Group</p>
                        <p class=pubdetails>2020-07-07 - <a title="Extensions to the OWL-Time Ontology - entity relations publication history" href="/standards/history/vocab-owl-time-rel">History</a>
                        - <a href="https://w3c.github.io/sdw/time-entity-relations/" title="Latest editor's draft of Extensions to the OWL-Time Ontology - entity relations">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Cox
                            <li>Chris Little
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="extensions to the owl-time ontology - temporal aggregates" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-vocab-owl-time-agg-20200707/" title="Latest draft of Extensions to the OWL-Time Ontology - temporal aggregates formally approved by the group">Extensions to the OWL-Time Ontology - temporal aggregates</a></h2>
                        <p class=deliverer>Spatial Data on the Web Interest Group</p>
                        <p class=pubdetails>2020-07-07 - <a title="Extensions to the OWL-Time Ontology - temporal aggregates publication history" href="/standards/history/vocab-owl-time-agg">History</a>
                        - <a href="https://w3c.github.io/sdw/time-aggregates/" title="Latest editor's draft of Extensions to the OWL-Time Ontology - temporal aggregates">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Cox
                            <li>Adam Shepherd
                            <li>Charles Vardeman
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for media timed events" data-tag="media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-media-timed-events-20200625/" title="Latest draft of Requirements for Media Timed Events formally approved by the group">Requirements for Media Timed Events</a></h2>
                        <p class=deliverer>Media and Entertainment Interest Group</p>
                        <p class=pubdetails>2020-06-25 - <a title="Requirements for Media Timed Events publication history" href="/standards/history/media-timed-events">History</a>
                        - <a href="https://w3c.github.io/me-media-timed-events/" title="Latest editor's draft of Requirements for Media Timed Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Needham
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="challenges with accessibility guidelines conformance and testing, and approaches for mitigating them" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-accessibility-conformance-challenges-20200619/" title="Latest draft of Challenges with Accessibility Guidelines Conformance and Testing, and Approaches for Mitigating Them formally approved by the group">Challenges with Accessibility Guidelines Conformance and Testing, and Approaches for Mitigating Them</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2020-06-19 - <a title="Challenges with Accessibility Guidelines Conformance and Testing, and Approaches for Mitigating Them publication history" href="/standards/history/accessibility-conformance-challenges">History</a>
                        - <a href="https://w3c.github.io/wcag/conformance-challenges/" title="Latest editor's draft of Challenges with Accessibility Guidelines Conformance and Testing, and Approaches for Mitigating Them">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                            <li>Peter Korn
                            <li>Charles Hall
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="tamil layout requirements" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-ilreq-taml-20200616/" title="Latest draft of Tamil Layout Requirements formally approved by the group">Tamil Layout Requirements</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-16 - <a title="Tamil Layout Requirements publication history" href="/standards/history/ilreq-taml">History</a>
                        - <a href="https://w3c.github.io/iip/tamil/" title="Latest editor's draft of Tamil Layout Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="gurmukhi gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-guru-gap-20200616/" title="Latest draft of Gurmukhi Gap Analysis formally approved by the group">Gurmukhi Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-16 - <a title="Gurmukhi Gap Analysis publication history" href="/standards/history/guru-gap">History</a>
                        - <a href="https://w3c.github.io/iip/gap-analysis/guru-gap" title="Latest editor's draft of Gurmukhi Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Akshat Joshi
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mongolian layout requirements" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-mlreq-20200616/" title="Latest draft of Mongolian Layout Requirements formally approved by the group">Mongolian Layout Requirements</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-16 - <a title="Mongolian Layout Requirements publication history" href="/standards/history/mlreq">History</a>
                        - <a href="https://w3c.github.io/mlreq/" title="Latest editor's draft of Mongolian Layout Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="khmer gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-khmr-gap-20200616/" title="Latest draft of Khmer Gap Analysis formally approved by the group">Khmer Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-16 - <a title="Khmer Gap Analysis publication history" href="/standards/history/khmr-gap">History</a>
                        - <a href="https://w3c.github.io/sealreq/gap-analysis/khmr-gap" title="Latest editor's draft of Khmer Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for tibetan text layout and typography" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-tlreq-20200616/" title="Latest draft of Requirements for Tibetan Text Layout and Typography formally approved by the group">Requirements for Tibetan Text Layout and Typography</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-16 - <a title="Requirements for Tibetan Text Layout and Typography publication history" href="/standards/history/tlreq">History</a>
                        - <a href="https://w3c.github.io/tlreq/" title="Latest editor's draft of Requirements for Tibetan Text Layout and Typography">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                            <li>Chunming Hu
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="javanese script gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-java-gap-20200616/" title="Latest draft of Javanese Script Gap Analysis formally approved by the group">Javanese Script Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-16 - <a title="Javanese Script Gap Analysis publication history" href="/standards/history/java-gap">History</a>
                        - <a href="https://w3c.github.io/sealreq/gap-analysis/java-gap" title="Latest editor's draft of Javanese Script Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="chinese layout gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-clreq-gap-20200616/" title="Latest draft of Chinese Layout Gap Analysis formally approved by the group">Chinese Layout Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-16 - <a title="Chinese Layout Gap Analysis publication history" href="/standards/history/clreq-gap">History</a>
                        - <a href="https://w3c.github.io/clreq/gap-analysis/" title="Latest editor's draft of Chinese Layout Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Fuqiao Xue
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="tibetan gap analysis" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-tibt-gap-20200616/" title="Latest draft of Tibetan Gap Analysis formally approved by the group">Tibetan Gap Analysis</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-16 - <a title="Tibetan Gap Analysis publication history" href="/standards/history/tibt-gap">History</a>
                        - <a href="https://w3c.github.io/tlreq/gap-analysis/" title="Latest editor's draft of Tibetan Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="rules for simple placement of japanese ruby" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-simple-ruby-20200609/" title="Latest draft of Rules for Simple Placement of Japanese Ruby formally approved by the group">Rules for Simple Placement of Japanese Ruby</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-09 - <a title="Rules for Simple Placement of Japanese Ruby publication history" href="/standards/history/simple-ruby">History</a>
                        - <a href="https://w3c.github.io/simple-ruby/" title="Latest editor's draft of Rules for Simple Placement of Japanese Ruby">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Rivoal
                            <li>Atsushi Shimono
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css overflow module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-overflow-3-20200603/" title="Latest draft of CSS Overflow Module Level 3 formally approved by the group">CSS  Overflow  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-06-03 - <a title="CSS Overflow Module Level 3 publication history" href="/standards/history/css-overflow-3">History</a>
                        - <a href="https://drafts.csswg.org/css-overflow-3/" title="Latest editor's draft of CSS Overflow Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                            <li>Elika Etemad
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="progress events" data-tag="dom webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/SPSD-progress-events-20200602/" title="Latest draft of Progress Events formally approved by the group">Progress Events</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2020-06-02 - <a title="Progress Events publication history" href="/standards/history/progress-events">History</a>
                        - <a href="https://xhr.spec.whatwg.org/" title="Latest editor's draft of Progress Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Charles &#039;chaals&#039; (McCathie) Nevile
                            <li>Jungkee Song
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="web notifications" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/SPSD-notifications-20200602/" title="Latest draft of Web Notifications formally approved by the group">Web Notifications</a></h2>
                        <p class=deliverer>Web Notification Working Group</p>
                        <p class=pubdetails>2020-06-02 - <a title="Web Notifications publication history" href="/standards/history/notifications">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Gregg
                            <li>Anne van Kesteren
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="encoding" data-tag="css html i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-encoding-20200602/" title="Latest draft of Encoding formally approved by the group">Encoding</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-06-02 - <a title="Encoding publication history" href="/standards/history/encoding">History</a>
                        - <a href="https://encoding.spec.whatwg.org/" title="Latest editor's draft of Encoding">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Joshua Bell
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="cross-origin resource sharing" data-tag="security" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/SPSD-cors-20200602/" title="Latest draft of Cross-Origin Resource Sharing formally approved by the group">Cross-Origin Resource Sharing</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2020-06-02 - <a title="Cross-Origin Resource Sharing publication history" href="/standards/history/cors">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="indic layout requirements" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-ilreq-20200529/" title="Latest draft of Indic Layout Requirements formally approved by the group">Indic Layout Requirements</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-05-29 - <a title="Indic Layout Requirements publication history" href="/standards/history/ilreq">History</a>
                        - <a href="https://w3c.github.io/ilreq/" title="Latest editor's draft of Indic Layout Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Swaran Lata
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for hangul text layout and typography : 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항" data-tag="css graphics i18n xml" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-klreq-20200527/" title="Latest draft of Requirements for Hangul Text Layout and Typography : 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항 formally approved by the group">Requirements for Hangul Text Layout and Typography : 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-05-27 - <a title="Requirements for Hangul Text Layout and Typography : 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항 publication history" href="/standards/history/klreq">History</a>
                        - <a href="https://w3c.github.io/klreq/" title="Latest editor's draft of Requirements for Hangul Text Layout and Typography : 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ethiopic layout requirements" data-tag="css graphics i18n xml" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-elreq-20200526/" title="Latest draft of Ethiopic Layout Requirements formally approved by the group">Ethiopic Layout Requirements</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-05-26 - <a title="Ethiopic Layout Requirements publication history" href="/standards/history/elreq">History</a>
                        - <a href="https://w3c.github.io/elreq/" title="Latest editor's draft of Ethiopic Layout Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Mekonnen
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="text layout requirements for the arabic script" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-alreq-20200520/" title="Latest draft of Text Layout Requirements for the Arabic Script formally approved by the group">Text Layout Requirements for the Arabic Script</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-05-20 - <a title="Text Layout Requirements for the Arabic Script publication history" href="/standards/history/alreq">History</a>
                        - <a href="https://w3c.github.io/alreq/" title="Latest editor's draft of Text Layout Requirements for the Arabic Script">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="language enablement index" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-typography-20200520/" title="Latest draft of Language enablement index formally approved by the group">Language enablement index</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2020-05-20 - <a title="Language enablement index publication history" href="/standards/history/typography">History</a>
                        - <a href="https://w3c.github.io/typography/" title="Latest editor's draft of Language enablement index">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css positioned layout module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-position-3-20200519/" title="Latest draft of CSS Positioned Layout Module Level 3 formally approved by the group">CSS  Positioned  Layout  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-05-19 - <a title="CSS Positioned Layout Module Level 3 publication history" href="/standards/history/css-position-3">History</a>
                        - <a href="https://drafts.csswg.org/css-position/" title="Latest editor's draft of CSS Positioned Layout Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                            <li>Rossen Atanassov
                            <li>Arron Eicholz
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="streaming json-ld" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-json-ld11-streaming-20200507/" title="Latest draft of Streaming JSON-LD formally approved by the group">Streaming JSON-LD</a></h2>
                        <p class=deliverer>JSON-LD Working Group</p>
                        <p class=pubdetails>2020-05-07 - <a title="Streaming JSON-LD publication history" href="/standards/history/json-ld11-streaming">History</a>
                        - <a href="https://w3c.github.io/json-ld-streaming/" title="Latest editor's draft of Streaming JSON-LD">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ruben Taelman
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css text decoration module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-text-decor-4-20200506/" title="Latest draft of CSS Text Decoration Module Level 4 formally approved by the group">CSS  Text  Decoration  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-05-06 - <a title="CSS Text Decoration Module Level 4 publication history" href="/standards/history/css-text-decor-4">History</a>
                        - <a href="https://drafts.csswg.org/css-text-decor-4/" title="Latest editor's draft of CSS Text Decoration Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css box alignment module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-align-3-20200421/" title="Latest draft of CSS Box Alignment Module Level 3 formally approved by the group">CSS  Box  Alignment  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-04-21 - <a title="CSS Box Alignment Module Level 3 publication history" href="/standards/history/css-align-3">History</a>
                        - <a href="https://drafts.csswg.org/css-align/" title="Latest editor's draft of CSS Box Alignment Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css box model module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-box-4-20200421/" title="Latest draft of CSS Box Model Module Level 4 formally approved by the group">CSS  Box  Model  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-04-21 - <a title="CSS Box Model Module Level 4 publication history" href="/standards/history/css-box-4">History</a>
                        - <a href="https://drafts.csswg.org/css-box-4/" title="Latest editor's draft of CSS Box Model Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web of things (wot) thing description" data-tag="wot" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-wot-thing-description-20200409/" title="Latest draft of Web of Things (WoT) Thing Description formally approved by the group">Web of Things (WoT) Thing Description</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-04-09 - <a title="Web of Things (WoT) Thing Description publication history" href="/standards/history/wot-thing-description10">History</a>
                        - <a href="https://w3c.github.io/wot-thing-description/" title="Latest editor's draft of Web of Things (WoT) Thing Description">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sebastian Käbisch
                            <li>Takuki Kamiya
                            <li>Michael McCool
                            <li>Victor Charpenay
                            <li>Matthias Kovatsch
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web of things (wot) architecture" data-tag="wot" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-wot-architecture-20200409/" title="Latest draft of Web of Things (WoT) Architecture formally approved by the group">Web of Things (WoT) Architecture</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-04-09 - <a title="Web of Things (WoT) Architecture publication history" href="/standards/history/wot-architecture10">History</a>
                        - <a href="https://w3c.github.io/wot-architecture/" title="Latest editor's draft of Web of Things (WoT) Architecture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthias Kovatsch
                            <li>Ryuichi Matsukura
                            <li>Michael Lagally
                            <li>Toru Kawaguchi
                            <li>Kunihiko Toumura
                            <li>Kazuo Kajimoto
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="time ontology in owl" data-tag="data" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-owl-time-20200326/" title="Latest draft of Time Ontology in OWL formally approved by the group">Time Ontology in OWL</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2020-03-26 - <a title="Time Ontology in OWL publication history" href="/standards/history/owl-time">History</a>
                        - <a href="https://w3c.github.io/sdw/time/" title="Latest editor's draft of Time Ontology in OWL">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Cox
                            <li>Chris Little
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="lightweight packaging format (lpf)" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-lpf-20200319/" title="Latest draft of Lightweight Packaging Format (LPF) formally approved by the group">Lightweight Packaging Format (LPF)</a></h2>
                        <p class=deliverer>Audiobooks Working Group</p>
                        <p class=pubdetails>2020-03-19 - <a title="Lightweight Packaging Format (LPF) publication history" href="/standards/history/lpf">History</a>
                        - <a href="https://w3c.github.io/lpf/" title="Latest editor's draft of Lightweight Packaging Format (LPF)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Laurent Le Meur
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="w3c dom 4.1" data-tag="dom" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-dom41-20200317/" title="Latest draft of W3C DOM 4.1 formally approved by the group">W3C  DOM&nbsp;4.1</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2020-03-17 - <a title="W3C DOM 4.1 publication history" href="/standards/history/dom41">History</a>
                        - <a href="https://w3c.github.io/dom/" title="Latest editor's draft of W3C DOM 4.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yongsheng Zhu
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                          <li data-title="pronunciation gap analysis" data-tag="accessibility" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-pronunciation-gap-analysis-20200317/" title="Latest draft of Pronunciation Gap Analysis formally approved by the group">Pronunciation Gap Analysis</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-03-17 - <a title="Pronunciation Gap Analysis publication history" href="/standards/history/pronunciation-gap-analysis">History</a>
                        - <a href="https://w3c.github.io/pronunciation/gap-analysis" title="Latest editor's draft of Pronunciation Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markku Hakkinen
                            <li>Steve Noble
                            <li>Irfan Ali
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="pronunciation use cases" data-tag="accessibility" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-pronunciation-use-cases-20200317/" title="Latest draft of Pronunciation Use Cases formally approved by the group">Pronunciation Use Cases</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-03-17 - <a title="Pronunciation Use Cases publication history" href="/standards/history/pronunciation-use-cases">History</a>
                        - <a href="https://w3c.github.io/pronunciation/use-cases" title="Latest editor's draft of Pronunciation Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Irfan Ali
                            <li>Paul Grenier
                            <li>Markku Hakkinen
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="explainer: improving spoken presentation on the web" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-pronunciation-explainer-20200310/" title="Latest draft of Explainer: Improving Spoken Presentation on the Web formally approved by the group">Explainer: Improving Spoken Presentation on the Web</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-03-10 - <a title="Explainer: Improving Spoken Presentation on the Web publication history" href="/standards/history/pronunciation-explainer">History</a>
                        - <a href="https://w3c.github.io/pronunciation/explainer" title="Latest editor's draft of Explainer: Improving Spoken Presentation on the Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markku Hakkinen
                            <li>Irfan Ali
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="pronunciation gap analysis and use cases" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-pronunciation-gap-analysis-and-use-cases-20200310/" title="Latest draft of Pronunciation Gap Analysis and Use Cases formally approved by the group">Pronunciation Gap Analysis and Use Cases</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-03-10 - <a title="Pronunciation Gap Analysis and Use Cases publication history" href="/standards/history/pronunciation-gap-analysis-and-use-cases">History</a>
                        - <a href="https://w3c.github.io/pronunciation/gap-analysis_and_use-case" title="Latest editor's draft of Pronunciation Gap Analysis and Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markku Hakkinen
                            <li>Steve Noble
                            <li>Dee Dyer
                            <li>Irfan Ali
                            <li>Paul Grenier
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="css speech module" data-tag="css media" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-css-speech-1-20200310/" title="Latest draft of CSS Speech Module formally approved by the group">CSS Speech Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-03-10 - <a title="CSS Speech Module publication history" href="/standards/history/css-speech-1">History</a>
                        - <a href="https://drafts.csswg.org/css-speech-1/" title="Latest editor's draft of CSS Speech Module">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Weck
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css conditional rules module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-conditional-4-20200303/" title="Latest draft of CSS Conditional Rules Module Level 4 formally approved by the group">CSS  Conditional  Rules  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-03-03 - <a title="CSS Conditional Rules Module Level 4 publication history" href="/standards/history/css-conditional-4">History</a>
                        - <a href="https://drafts.csswg.org/css-conditional-4/" title="Latest editor's draft of CSS Conditional Rules Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css transforms module level 2" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-transforms-2-20200303/" title="Latest draft of CSS Transforms Module Level 2 formally approved by the group">CSS  Transforms  Module  Level&nbsp;2</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-03-03 - <a title="CSS Transforms Module Level 2 publication history" href="/standards/history/css-transforms-2">History</a>
                        - <a href="https://drafts.csswg.org/css-transforms-2/" title="Latest editor's draft of CSS Transforms Module Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Simon Fraser
                            <li>Dean Jackson
                            <li>Theresa O&#039;Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css color module level 5" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-color-5-20200303/" title="Latest draft of CSS Color Module Level 5 formally approved by the group">CSS  Color  Module  Level&nbsp;5</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-03-03 - <a title="CSS Color Module Level 5 publication history" href="/standards/history/css-color-5">History</a>
                        - <a href="https://drafts.csswg.org/css-color-5/" title="Latest editor's draft of CSS Color Module Level 5">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                            <li>Una Kravets
                            <li>Lea Verou
                            <li>Adam Argyle
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="payment method: basic card" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-payment-method-basic-card-20200213/" title="Latest draft of Payment Method: Basic Card formally approved by the group">Payment Method: Basic Card</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2020-02-13 - <a title="Payment Method: Basic Card publication history" href="/standards/history/payment-method-basic-card">History</a>
                        - <a href="https://w3c.github.io/payment-method-basic-card/" title="Latest editor's draft of Payment Method: Basic Card">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Domenic Denicola
                            <li>Zach Koch
                            <li>Roy McElmurry
                            <li>Adrian Bateman
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="resize observer" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-resize-observer-1-20200211/" title="Latest draft of Resize Observer formally approved by the group">Resize Observer</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-02-11 - <a title="Resize Observer publication history" href="/standards/history/resize-observer-1">History</a>
                        - <a href="https://drafts.csswg.org/resize-observer/" title="Latest editor's draft of Resize Observer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aleks Totic
                            <li>Greg Whitworth
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="trace context - level 1" data-tag="performance" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-trace-context-1-20200206/" title="Latest draft of Trace Context - Level 1 formally approved by the group">Trace  Context  -  Level&nbsp;1</a></h2>
                        <p class=deliverer>Distributed Tracing Working Group</p>
                        <p class=pubdetails>2020-02-06 - <a title="Trace Context - Level 1 publication history" href="/standards/history/trace-context-1">History</a>
                        - <a href="https://w3c.github.io/trace-context/" title="Latest editor's draft of Trace Context - Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sergey Kanzhelev
                            <li>Morgan McLean
                            <li>Alois Reitbauer
                            <li>Bogdan Drutu
                            <li>Nik Molnar
                            <li>Yuri Shkuro
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                          <li data-title="data catalog vocabulary (dcat)" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/SPSD-vocab-dcat-20200204/" title="Latest draft of Data Catalog Vocabulary (DCAT) formally approved by the group">Data Catalog Vocabulary (DCAT)</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2020-02-04 - <a title="Data Catalog Vocabulary (DCAT) publication history" href="/standards/history/vocab-dcat-1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Fadi Maali
                            <li>John Erickson
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="data catalog vocabulary (dcat) - version 2" data-tag="data" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-vocab-dcat-2-20200204/" title="Latest draft of Data Catalog Vocabulary (DCAT) - Version 2 formally approved by the group">Data  Catalog  Vocabulary  (DCAT)  -  Version&nbsp;2</a></h2>
                        <p class=deliverer>Dataset Exchange Working Group</p>
                        <p class=pubdetails>2020-02-04 - <a title="Data Catalog Vocabulary (DCAT) - Version 2 publication history" href="/standards/history/vocab-dcat-2">History</a>
                        - <a href="https://w3c.github.io/dxwg/dcat/" title="Latest editor's draft of Data Catalog Vocabulary (DCAT) - Version 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Riccardo Albertoni
                            <li>David Browning
                            <li>Simon Cox
                            <li>Alejandra Gonzalez Beltran
                            <li>Andrea Perego
                            <li>Peter Winstanley
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="push api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-push-api-20200204/" title="Latest draft of Push API formally approved by the group">Push API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2020-02-04 - <a title="Push API publication history" href="/standards/history/push-api">History</a>
                        - <a href="https://w3c.github.io/push-api/" title="Latest editor's draft of Push API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Peter Beverloo
                            <li>Martin Thomson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web of things (wot) binding templates" data-tag="wot" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-wot-binding-templates-20200130/" title="Latest draft of Web of Things (WoT) Binding Templates formally approved by the group">Web of Things (WoT) Binding Templates</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-01-30 - <a title="Web of Things (WoT) Binding Templates publication history" href="/standards/history/wot-binding-templates">History</a>
                        - <a href="https://w3c.github.io/wot-binding-templates/" title="Latest editor's draft of Web of Things (WoT) Binding Templates">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Koster
                            <li>Ege Korkan
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="personalization semantics explainer 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-personalization-semantics-1.0-20200127/" title="Latest draft of Personalization Semantics Explainer 1.0 formally approved by the group">Personalization  Semantics  Explainer&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-01-27 - <a title="Personalization Semantics Explainer 1.0 publication history" href="/standards/history/personalization-semantics-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/" title="Latest editor's draft of Personalization Semantics Explainer 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Horwitz
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="personalization semantics content module 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-personalization-semantics-content-1.0-20200127/" title="Latest draft of Personalization Semantics Content Module 1.0 formally approved by the group">Personalization  Semantics  Content  Module&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-01-27 - <a title="Personalization Semantics Content Module 1.0 publication history" href="/standards/history/personalization-semantics-content-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/content/" title="Latest editor's draft of Personalization Semantics Content Module 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Horwitz
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="extensions to the semantic sensor network ontology" data-tag="data" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-vocab-ssn-ext-20200116/" title="Latest draft of Extensions to the Semantic Sensor Network Ontology formally approved by the group">Extensions to the Semantic Sensor Network Ontology</a></h2>
                        <p class=deliverer>Spatial Data on the Web Interest Group</p>
                        <p class=pubdetails>2020-01-16 - <a title="Extensions to the Semantic Sensor Network Ontology publication history" href="/standards/history/vocab-ssn-ext">History</a>
                        - <a href="https://w3c.github.io/sdw/ssn-extensions/" title="Latest editor's draft of Extensions to the Semantic Sensor Network Ontology">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Cox
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="wai-aria authoring practices 1.2" data-tag="accessibility" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/" title="Latest draft of WAI-ARIA Authoring Practices 1.2 formally approved by the group">WAI-ARIA  Authoring  Practices&nbsp;1.2</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2019-12-18 - <a title="WAI-ARIA Authoring Practices 1.2 publication history" href="/standards/history/wai-aria-practices-1.2">History</a>
                        - <a href="https://w3c.github.io/aria-practices/" title="Latest editor's draft of WAI-ARIA Authoring Practices 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew King
                            <li>JaEun Jemma Ku
                            <li>James Nurthen
                            <li>Zoë Bijl
                            <li>Michael Cooper
                            <li>Joseph Scheuhammer
                            <li>Lisa Pappas
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="core accessibility api mappings 1.2" data-tag="accessibility" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-core-aam-1.2-20191218/" title="Latest draft of Core Accessibility API Mappings 1.2 formally approved by the group">Core  Accessibility  API  Mappings&nbsp;1.2</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2019-12-18 - <a title="Core Accessibility API Mappings 1.2 publication history" href="/standards/history/core-aam-1.2">History</a>
                        - <a href="https://w3c.github.io/core-aam/" title="Latest editor's draft of Core Accessibility API Mappings 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>Michael Cooper
                            <li>Richard Schwerdtfeger
                            <li>Joseph Scheuhammer
                            <li>Andi Snow-Weaver
                            <li>Aaron Leventhal
                            <li>Melanie Richards
                            <li>James Craig
                            <li>Alexander Surkov
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="the profiles vocabulary" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-dx-prof-20191218/" title="Latest draft of The Profiles Vocabulary formally approved by the group">The Profiles Vocabulary</a></h2>
                        <p class=deliverer>Dataset Exchange Working Group</p>
                        <p class=pubdetails>2019-12-18 - <a title="The Profiles Vocabulary publication history" href="/standards/history/dx-prof">History</a>
                        - <a href="https://w3c.github.io/dxwg/prof/" title="Latest editor's draft of The Profiles Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nicholas Car
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="generic sensor api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-generic-sensor-20191212/" title="Latest draft of Generic Sensor API formally approved by the group">Generic Sensor API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Generic Sensor API publication history" href="/standards/history/generic-sensor">History</a>
                        - <a href="https://w3c.github.io/sensors/" title="Latest editor's draft of Generic Sensor API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rick Waldron
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="orientation sensor" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-orientation-sensor-20191212/" title="Latest draft of Orientation Sensor formally approved by the group">Orientation Sensor</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Orientation Sensor publication history" href="/standards/history/orientation-sensor">History</a>
                        - <a href="https://w3c.github.io/orientation-sensor/" title="Latest editor's draft of Orientation Sensor">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kenneth Christiansen
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="gyroscope" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-gyroscope-20191212/" title="Latest draft of Gyroscope formally approved by the group">Gyroscope</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Gyroscope publication history" href="/standards/history/gyroscope">History</a>
                        - <a href="https://w3c.github.io/gyroscope/" title="Latest editor's draft of Gyroscope">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="accelerometer" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-accelerometer-20191212/" title="Latest draft of Accelerometer formally approved by the group">Accelerometer</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Accelerometer publication history" href="/standards/history/accelerometer">History</a>
                        - <a href="https://w3c.github.io/accelerometer/" title="Latest editor's draft of Accelerometer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="css writing modes level 3" data-tag="css" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-css-writing-modes-3-20191210/" title="Latest draft of CSS Writing Modes Level 3 formally approved by the group">CSS  Writing  Modes  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-12-10 - <a title="CSS Writing Modes Level 3 publication history" href="/standards/history/css-writing-modes-3">History</a>
                        - <a href="https://drafts.csswg.org/css-writing-modes-3/" title="Latest editor's draft of CSS Writing Modes Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="inaccessibility of captcha" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-turingtest-20191209/" title="Latest draft of Inaccessibility of CAPTCHA formally approved by the group">Inaccessibility of CAPTCHA</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2019-12-09 - <a title="Inaccessibility of CAPTCHA publication history" href="/standards/history/turingtest">History</a>
                        - <a href="https://w3c.github.io/apa/captcha/" title="Latest editor's draft of Inaccessibility of CAPTCHA">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Hollier
                            <li>Janina Sajka
                            <li>Jason White
                            <li>Michael Cooper
                            <li>Matthew May
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webassembly javascript interface" data-tag="performance webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-wasm-js-api-1-20191205/" title="Latest draft of WebAssembly JavaScript Interface formally approved by the group">WebAssembly JavaScript Interface</a></h2>
                        <p class=deliverer>WebAssembly Working Group</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebAssembly JavaScript Interface publication history" href="/standards/history/wasm-js-api-1">History</a>
                        - <a href="https://webassembly.github.io/spec/js-api/" title="Latest editor's draft of WebAssembly JavaScript Interface">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Ehrenberg
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webassembly web api" data-tag="performance" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-wasm-web-api-1-20191205/" title="Latest draft of WebAssembly Web API formally approved by the group">WebAssembly Web API</a></h2>
                        <p class=deliverer>WebAssembly Working Group</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebAssembly Web API publication history" href="/standards/history/wasm-web-api-1">History</a>
                        - <a href="https://webassembly.github.io/spec/web-api/" title="Latest editor's draft of WebAssembly Web API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Ehrenberg
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                          <li data-title="webcgm 1.0 second release" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-WebCGM-20191205" title="Latest draft of WebCGM 1.0 Second Release formally approved by the group">WebCGM 1.0 Second Release</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebCGM 1.0 Second Release publication history" href="/standards/history/REC-WebCGM">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Cruikshank
                            <li>Lofton Henderson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="webcgm 2.0" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-webcgm20-20191205/" title="Latest draft of WebCGM 2.0 formally approved by the group">WebCGM&nbsp;2.0</a></h2>
                        <p class=deliverer>WebCGM Working Group</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebCGM 2.0 publication history" href="/standards/history/webcgm20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Benoit Bezaire
                            <li>David Cruikshank
                            <li>Lofton Henderson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webassembly core specification" data-tag="performance" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-wasm-core-1-20191205/" title="Latest draft of WebAssembly Core Specification formally approved by the group">WebAssembly Core Specification</a></h2>
                        <p class=deliverer>WebAssembly Working Group</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebAssembly Core Specification publication history" href="/standards/history/wasm-core-1">History</a>
                        - <a href="https://webassembly.github.io/spec/core/bikeshed/" title="Latest editor's draft of WebAssembly Core Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andreas Rossberg
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="content negotiation by profile" data-tag="data" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-dx-prof-conneg-20191126/" title="Latest draft of Content Negotiation by Profile formally approved by the group">Content Negotiation by Profile</a></h2>
                        <p class=deliverer>Dataset Exchange Working Group</p>
                        <p class=pubdetails>2019-11-26 - <a title="Content Negotiation by Profile publication history" href="/standards/history/dx-prof-conneg">History</a>
                        - <a href="https://w3c.github.io/dxwg/connegp/" title="Latest editor's draft of Content Negotiation by Profile">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lars G. Svensson
                            <li>Nicholas Car
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css spatial navigation level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-nav-1-20191126/" title="Latest draft of CSS Spatial Navigation Level 1 formally approved by the group">CSS  Spatial  Navigation  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-11-26 - <a title="CSS Spatial Navigation Level 1 publication history" href="/standards/history/css-nav-1">History</a>
                        - <a href="https://drafts.csswg.org/css-nav-1/" title="Latest editor's draft of CSS Spatial Navigation Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jihye Hong
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="high resolution time" data-tag="performance webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-hr-time-1-20191121/" title="Latest draft of High Resolution Time formally approved by the group">High Resolution Time</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-11-21 - <a title="High Resolution Time publication history" href="/standards/history/hr-time-1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael McKeough
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="high resolution time level 2" data-tag="performance webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-hr-time-2-20191121/" title="Latest draft of High Resolution Time Level 2 formally approved by the group">High  Resolution  Time  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-11-21 - <a title="High Resolution Time Level 2 publication history" href="/standards/history/hr-time-2">History</a>
                        - <a href="https://w3c.github.io/hr-time/" title="Latest editor's draft of High Resolution Time Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="service workers 1" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-service-workers-1-20191119/" title="Latest draft of Service Workers 1 formally approved by the group">Service  Workers&nbsp;1</a></h2>
                        <p class=deliverer>Service Workers Working Group</p>
                        <p class=pubdetails>2019-11-19 - <a title="Service Workers 1 publication history" href="/standards/history/service-workers-1">History</a>
                        - <a href="https://w3c.github.io/ServiceWorker/v1/" title="Latest editor's draft of Service Workers 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Russell
                            <li>Jungkee Song
                            <li>Jake Archibald
                            <li>Marijn Kruisselbrink
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="trace context protocols registry" data-tag="performance" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-trace-context-protocols-registry-20191119/" title="Latest draft of Trace Context Protocols Registry formally approved by the group">Trace Context Protocols Registry</a></h2>
                        <p class=deliverer>Distributed Tracing Working Group</p>
                        <p class=pubdetails>2019-11-19 - <a title="Trace Context Protocols Registry publication history" href="/standards/history/trace-context-protocols-registry">History</a>
                        - <a href="https://w3c.github.io/trace-context-protocols-registry/" title="Latest editor's draft of Trace Context Protocols Registry">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sergey Kanzhelev
                            <li>Philippe Le Hégaret
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="verifiable credentials data model 1.0" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-vc-data-model-20191119/" title="Latest draft of Verifiable Credentials Data Model 1.0 formally approved by the group">Verifiable  Credentials  Data  Model&nbsp;1.0</a></h2>
                        <p class=deliverer>Verifiable Credentials Working Group</p>
                        <p class=pubdetails>2019-11-19 - <a title="Verifiable Credentials Data Model 1.0 publication history" href="/standards/history/vc-data-model">History</a>
                        - <a href="https://w3c.github.io/vc-data-model/" title="Latest editor's draft of Verifiable Credentials Data Model 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Grant Noble
                            <li>Dave Longley
                            <li>Daniel Burnett
                            <li>Brent Zundel
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css text module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-text-4-20191113/" title="Latest draft of CSS Text Module Level 4 formally approved by the group">CSS  Text  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-11-13 - <a title="CSS Text Module Level 4 publication history" href="/standards/history/css-text-4">History</a>
                        - <a href="https://drafts.csswg.org/css-text-4/" title="Latest editor's draft of CSS Text Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                            <li>Alan Stearns
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web of things (wot) security and privacy guidelines" data-tag="wot" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-wot-security-20191106/" title="Latest draft of Web of Things (WoT) Security and Privacy Guidelines formally approved by the group">Web of Things (WoT) Security and Privacy Guidelines</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2019-11-06 - <a title="Web of Things (WoT) Security and Privacy Guidelines publication history" href="/standards/history/wot-security">History</a>
                        - <a href="https://w3c.github.io/wot-security/" title="Latest editor's draft of Web of Things (WoT) Security and Privacy Guidelines">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elena Reshetova
                            <li>Michael McCool
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="accessibility conformance testing (act) rules format 1.0" data-tag="accessibility" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-act-rules-format-1.0-20191031/" title="Latest draft of Accessibility Conformance Testing (ACT) Rules Format 1.0 formally approved by the group">Accessibility  Conformance  Testing  (ACT)  Rules  Format&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2019-10-31 - <a title="Accessibility Conformance Testing (ACT) Rules Format 1.0 publication history" href="/standards/history/act-rules-format-1.0">History</a>
                        - <a href="https://w3c.github.io/wcag-act/act-rules-format.html" title="Latest editor's draft of Accessibility Conformance Testing (ACT) Rules Format 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wilco Fiers
                            <li>Maureen Kraft
                            <li>Mary Jo Mueller
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="performance timeline level 2" data-tag="performance webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-performance-timeline-2-20191024/" title="Latest draft of Performance Timeline Level 2 formally approved by the group">Performance  Timeline  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-10-24 - <a title="Performance Timeline Level 2 publication history" href="/standards/history/performance-timeline-2">History</a>
                        - <a href="https://w3c.github.io/performance-timeline/" title="Latest editor's draft of Performance Timeline Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="webxr augmented reality module - level 1" data-tag="graphics webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-webxr-ar-module-1-20191010/" title="Latest draft of WebXR Augmented Reality Module - Level 1 formally approved by the group">WebXR  Augmented  Reality  Module  -  Level&nbsp;1</a></h2>
                        <p class=deliverer>Immersive Web Working Group</p>
                        <p class=pubdetails>2019-10-10 - <a title="WebXR Augmented Reality Module - Level 1 publication history" href="/standards/history/webxr-ar-module-1">History</a>
                        - <a href="https://immersive-web.github.io/webxr-ar-module/" title="Latest editor's draft of WebXR Augmented Reality Module - Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Jones
                            <li>Nell Waliczek
                            <li>Manish Goregaokar
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="webxr gamepads module - level 1" data-tag="graphics webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-webxr-gamepads-module-1-20191010/" title="Latest draft of WebXR Gamepads Module - Level 1 formally approved by the group">WebXR  Gamepads  Module  -  Level&nbsp;1</a></h2>
                        <p class=deliverer>Immersive Web Working Group</p>
                        <p class=pubdetails>2019-10-10 - <a title="WebXR Gamepads Module - Level 1 publication history" href="/standards/history/webxr-gamepads-module-1">History</a>
                        - <a href="https://immersive-web.github.io/webxr-gamepads-module/" title="Latest editor's draft of WebXR Gamepads Module - Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Jones
                            <li>Nell Waliczek
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="verifiable credentials implementation guidelines 1.0" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-vc-imp-guide-20190924/" title="Latest draft of Verifiable Credentials Implementation Guidelines 1.0 formally approved by the group">Verifiable  Credentials  Implementation  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Verifiable Credentials Working Group</p>
                        <p class=pubdetails>2019-09-24 - <a title="Verifiable Credentials Implementation Guidelines 1.0 publication history" href="/standards/history/vc-imp-guide">History</a>
                        - <a href="https://w3c.github.io/vc-imp-guide/" title="Latest editor's draft of Verifiable Credentials Implementation Guidelines 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrei Sambra
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="verifiable credentials use cases" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-vc-use-cases-20190924/" title="Latest draft of Verifiable Credentials Use Cases formally approved by the group">Verifiable Credentials Use Cases</a></h2>
                        <p class=deliverer>Verifiable Credentials Working Group</p>
                        <p class=pubdetails>2019-09-24 - <a title="Verifiable Credentials Use Cases publication history" href="/standards/history/vc-use-cases">History</a>
                        - <a href="https://w3c.github.io/vc-use-cases/" title="Latest editor's draft of Verifiable Credentials Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Joe Andrieu
                            <li>Matt Stone
                            <li>Tzviya Siegman
                            <li>Gregg Kellogg
                            <li>Ted Thibodeau
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="miniapp standardization white paper" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-mini-app-white-paper-20190912/" title="Latest draft of MiniApp Standardization White Paper formally approved by the group">MiniApp Standardization White Paper</a></h2>
                        <p class=deliverer>Chinese Web Interest Group</p>
                        <p class=pubdetails>2019-09-12 - <a title="MiniApp Standardization White Paper publication history" href="/standards/history/mini-app-white-paper">History</a>
                        - <a href="https://w3c.github.io/mini-app-white-paper/" title="Latest editor's draft of MiniApp Standardization White Paper">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Angel Li
                            <li>Qing An
                            <li>Dapeng Liu
                            <li>Hongru (Judy) Zhu
                            <li>Qingqian Tao
                            <li>Zhixing Lei
                            <li>Zhou Shen
                            <li>Zhiqiang Yu
                            <li>Wanming Lin
                            <li>xiaowei jiang
                            <li>Fuqiao Xue
                            <li>Lei Zhao
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="payment method identifiers" data-tag="" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-payment-method-id-20190905/" title="Latest draft of Payment Method Identifiers formally approved by the group">Payment Method Identifiers</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2019-09-05 - <a title="Payment Method Identifiers publication history" href="/standards/history/payment-method-id">History</a>
                        - <a href="https://w3c.github.io/payment-method-id/" title="Latest editor's draft of Payment Method Identifiers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Domenic Denicola
                            <li>Zach Koch
                            <li>Roy McElmurry
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="pronunciation user scenarios" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-pronunciation-user-scenarios-20190905/" title="Latest draft of Pronunciation User Scenarios formally approved by the group">Pronunciation User Scenarios</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2019-09-05 - <a title="Pronunciation User Scenarios publication history" href="/standards/history/pronunciation-user-scenarios">History</a>
                        - <a href="https://w3c.github.io/pronunciation/user-scenarios" title="Latest editor's draft of Pronunciation User Scenarios">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Irfan Ali
                            <li>Sam Kanta
                            <li>Christine Loew
                            <li>Paul Grenier
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="pointer lock 2.0" data-tag="webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-pointerlock-2-20190828/" title="Latest draft of Pointer Lock 2.0 formally approved by the group">Pointer  Lock&nbsp;2.0</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-08-28 - <a title="Pointer Lock 2.0 publication history" href="/standards/history/pointerlock-2">History</a>
                        - <a href="https://w3c.github.io/pointerlock/" title="Latest editor's draft of Pointer Lock 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Navid Zolghadr
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="wai-aria authoring practices 1.1" data-tag="accessibility" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-wai-aria-practices-1.1-20190814/" title="Latest draft of WAI-ARIA Authoring Practices 1.1 formally approved by the group">WAI-ARIA  Authoring  Practices&nbsp;1.1</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2019-08-14 - <a title="WAI-ARIA Authoring Practices 1.1 publication history" href="/standards/history/wai-aria-practices-1.1">History</a>
                        - <a href="https://w3c.github.io/aria-practices/" title="Latest editor's draft of WAI-ARIA Authoring Practices 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew King
                            <li>JaEun Jemma Ku
                            <li>James Nurthen
                            <li>Zoë Bijl
                            <li>Michael Cooper
                            <li>Joseph Scheuhammer
                            <li>Lisa Pappas
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css text decoration module level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-text-decor-3-20190813/" title="Latest draft of CSS Text Decoration Module Level 3 formally approved by the group">CSS  Text  Decoration  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-08-13 - <a title="CSS Text Decoration Module Level 3 publication history" href="/standards/history/css-text-decor-3">History</a>
                        - <a href="https://drafts.csswg.org/css-text-decor-3/" title="Latest editor's draft of CSS Text Decoration Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="web publications" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-wpub-20190813/" title="Latest draft of Web Publications formally approved by the group">Web Publications</a></h2>
                        <p class=deliverer>Audiobooks Working Group</p>
                        <p class=pubdetails>2019-08-13 - <a title="Web Publications publication history" href="/standards/history/wpub">History</a>
                        - <a href="https://w3c.github.io/wpub/" title="Latest editor's draft of Web Publications">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                            <li>Ivan Herman
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web publications use cases and requirements" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-pwp-ucr-20190813/" title="Latest draft of Web Publications Use Cases and Requirements formally approved by the group">Web Publications Use Cases and Requirements</a></h2>
                        <p class=deliverer>Audiobooks Working Group</p>
                        <p class=pubdetails>2019-08-13 - <a title="Web Publications Use Cases and Requirements publication history" href="/standards/history/pwp-ucr">History</a>
                        - <a href="https://w3c.github.io/dpub-pwp-ucr/" title="Latest editor's draft of Web Publications Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Franco Alvarado
                            <li>Joshua Pyle
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css generated content module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-content-3-20190802/" title="Latest draft of CSS Generated Content Module Level 3 formally approved by the group">CSS  Generated  Content  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-08-02 - <a title="CSS Generated Content Module Level 3 publication history" href="/standards/history/css-content-3">History</a>
                        - <a href="https://drafts.csswg.org/css-content-3/" title="Latest editor's draft of CSS Generated Content Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Dave Cramer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css writing modes level 4" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-writing-modes-4-20190730/" title="Latest draft of CSS Writing Modes Level 4 formally approved by the group">CSS  Writing  Modes  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-07-30 - <a title="CSS Writing Modes Level 4 publication history" href="/standards/history/css-writing-modes-4">History</a>
                        - <a href="https://drafts.csswg.org/css-writing-modes-4/" title="Latest editor's draft of CSS Writing Modes Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css table module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-tables-3-20190727/" title="Latest draft of CSS Table Module Level 3 formally approved by the group">CSS  Table  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-07-27 - <a title="CSS Table Module Level 3 publication history" href="/standards/history/css-tables-3">History</a>
                        - <a href="https://drafts.csswg.org/css-tables-3/" title="Latest editor's draft of CSS Table Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>François Remy
                            <li>Greg Whitworth
                            <li>David Baron
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="timing entry names registry" data-tag="performance" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-timing-entrytypes-registry-20190723/" title="Latest draft of Timing Entry Names Registry formally approved by the group">Timing Entry Names Registry</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-07-23 - <a title="Timing Entry Names Registry publication history" href="/standards/history/timing-entrytypes-registry">History</a>
                        - <a href="https://w3c.github.io/timing-entrytypes-registry/" title="Latest editor's draft of Timing Entry Names Registry">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Philippe Le Hégaret
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css syntax module level 3" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-syntax-3-20190716/" title="Latest draft of CSS Syntax Module Level 3 formally approved by the group">CSS  Syntax  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-07-16 - <a title="CSS Syntax Module Level 3 publication history" href="/standards/history/css-syntax-3">History</a>
                        - <a href="https://drafts.csswg.org/css-syntax/" title="Latest editor's draft of CSS Syntax Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Simon Sapin
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="personalization tools 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-personalization-semantics-tools-1.0-20190711/" title="Latest draft of Personalization Tools 1.0 formally approved by the group">Personalization  Tools&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2019-07-11 - <a title="Personalization Tools 1.0 publication history" href="/standards/history/personalization-semantics-tools-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/tools/" title="Latest editor's draft of Personalization Tools 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Horwitz
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="personalization help and support 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-personalization-semantics-help-1.0-20190711/" title="Latest draft of Personalization Help and Support 1.0 formally approved by the group">Personalization  Help  and  Support&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2019-07-11 - <a title="Personalization Help and Support 1.0 publication history" href="/standards/history/personalization-semantics-help-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/help/" title="Latest editor's draft of Personalization Help and Support 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Horwitz
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="accessible name and description computation 1.2" data-tag="accessibility" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-accname-1.2-20190711/" title="Latest draft of Accessible Name and Description Computation 1.2 formally approved by the group">Accessible  Name  and  Description  Computation&nbsp;1.2</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2019-07-11 - <a title="Accessible Name and Description Computation 1.2 publication history" href="/standards/history/accname-1.2">History</a>
                        - <a href="https://w3c.github.io/accname/" title="Latest editor's draft of Accessible Name and Description Computation 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bryan Garaventa
                            <li>Joanmarie Diggs
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="preload" data-tag="performance" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-preload-20190626/" title="Latest draft of Preload formally approved by the group">Preload</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-06-26 - <a title="Preload publication history" href="/standards/history/preload">History</a>
                        - <a href="https://w3c.github.io/preload/" title="Latest editor's draft of Preload">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                            <li>Yoav Weiss
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="css animation worklet api" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-animation-worklet-1-20190625/" title="Latest draft of CSS Animation Worklet API formally approved by the group">CSS Animation Worklet API</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-06-25 - <a title="CSS Animation Worklet API publication history" href="/standards/history/css-animation-worklet-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-animationworklet-1/" title="Latest editor's draft of CSS Animation Worklet API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Majid Valipour
                            <li>Robert Flack
                            <li>Stephen McGruer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="strings on the web: language and direction metadata" data-tag="data i18n media webapi wot" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-string-meta-20190611/" title="Latest draft of Strings on the Web: Language and Direction Metadata formally approved by the group">Strings on the Web: Language and Direction Metadata</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2019-06-11 - <a title="Strings on the Web: Language and Direction Metadata publication history" href="/standards/history/string-meta">History</a>
                        - <a href="https://w3c.github.io/string-meta/" title="Latest editor's draft of Strings on the Web: Language and Direction Metadata">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="i18n">i18n
                            <li class="media">Media
                            <li class="webapi">Web API
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css overscroll behavior module level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-overscroll-1-20190606/" title="Latest draft of CSS Overscroll Behavior Module Level 1 formally approved by the group">CSS  Overscroll  Behavior  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-06-06 - <a title="CSS Overscroll Behavior Module Level 1 publication history" href="/standards/history/css-overscroll-1">History</a>
                        - <a href="https://drafts.csswg.org/css-overscroll-1/" title="Latest editor's draft of CSS Overscroll Behavior Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Majid Valipour
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css values and units module level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-values-3-20190606/" title="Latest draft of CSS Values and Units Module Level 3 formally approved by the group">CSS  Values  and  Units  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-06-06 - <a title="CSS Values and Units Module Level 3 publication history" href="/standards/history/css-values-3">History</a>
                        - <a href="https://drafts.csswg.org/css-values-3/" title="Latest editor's draft of CSS Values and Units Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="input events level 1" data-tag="webapi" data-status="wd" data-version="ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-input-events-1-20190530/" title="Latest draft of Input Events Level 1 formally approved by the group">Input  Events  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-05-30 - <a title="Input Events Level 1 publication history" href="/standards/history/input-events-1">History</a>
                        - <a href="https://cdn.staticaly.com/gh/w3c/input-events/v1/index.html" title="Latest editor's draft of Input Events Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Wilm
                            <li>Ben Peters
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="input events level 2" data-tag="" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-input-events-2-20190530/" title="Latest draft of Input Events Level 2 formally approved by the group">Input  Events  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-05-30 - <a title="Input Events Level 2 publication history" href="/standards/history/input-events-2">History</a>
                        - <a href="https://w3c.github.io/input-events/" title="Latest editor's draft of Input Events Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Wilm
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="ui events" data-tag="dom" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-uievents-20190530/" title="Latest draft of UI Events formally approved by the group">UI Events</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-05-30 - <a title="UI Events publication history" href="/standards/history/uievents">History</a>
                        - <a href="https://w3c.github.io/uievents/" title="Latest editor's draft of UI Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gary Kacmarcik
                            <li>Travis Leithead
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                          <li data-title="character model for the world wide web 1.0: resource identifiers" data-tag="i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-charmod-resid-20190502/" title="Latest draft of Character Model for the World Wide Web 1.0: Resource Identifiers formally approved by the group">Character Model for the World Wide Web 1.0: Resource Identifiers</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2019-05-02 - <a title="Character Model for the World Wide Web 1.0: Resource Identifiers publication history" href="/standards/history/charmod-resid">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="deviceorientation event specification" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-orientation-event-20190416/" title="Latest draft of DeviceOrientation Event Specification formally approved by the group">DeviceOrientation Event Specification</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-04-16 - <a title="DeviceOrientation Event Specification publication history" href="/standards/history/orientation-event">History</a>
                        - <a href="https://w3c.github.io/deviceorientation/" title="Latest editor's draft of DeviceOrientation Event Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rich Tibbett
                            <li>Tim Volodine
                            <li>Stephen Block
                            <li>Andrei Popescu
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="accessibility conformance testing (act) rules: common input aspects" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-act-rules-aspects-20190416/" title="Latest draft of Accessibility Conformance Testing (ACT) Rules: Common Input Aspects formally approved by the group">Accessibility Conformance Testing (ACT) Rules: Common Input Aspects</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2019-04-16 - <a title="Accessibility Conformance Testing (ACT) Rules: Common Input Aspects publication history" href="/standards/history/act-rules-aspects">History</a>
                        - <a href="https://w3c.github.io/wcag-act/NOTE-act-rules-common-aspects.html" title="Latest editor's draft of Accessibility Conformance Testing (ACT) Rules: Common Input Aspects">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wilco Fiers
                            <li>Maureen Kraft
                            <li>Mary Jo Mueller
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="pointer events" data-tag="dom webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-pointerevents1-20190404/" title="Latest draft of Pointer Events formally approved by the group">Pointer Events</a></h2>
                        <p class=deliverer>Pointer Events Working Group</p>
                        <p class=pubdetails>2019-04-04 - <a title="Pointer Events publication history" href="/standards/history/pointerevents">History</a>
                        - <a href="https://dvcs.w3.org/hg/pointerevents/raw-file/tip/pointerEvents.html" title="Latest editor's draft of Pointer Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jacob Rossi
                            <li>Matt Brubeck
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="pointer events" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-pointerevents2-20190404/" title="Latest draft of Pointer Events formally approved by the group">Pointer Events</a></h2>
                        <p class=deliverer>Pointer Events Working Group</p>
                        <p class=pubdetails>2019-04-04 - <a title="Pointer Events publication history" href="/standards/history/pointerevents2">History</a>
                        - <a href="https://w3c.github.io/pointerevents/" title="Latest editor's draft of Pointer Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Brubeck
                            <li>Rick Byers
                            <li>Patrick Lauke
                            <li>Navid Zolghadr
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webvtt: the web video text tracks format" data-tag="css graphics html" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-webvtt1-20190404/" title="Latest draft of WebVTT: The Web Video Text Tracks Format formally approved by the group">WebVTT: The Web Video Text Tracks Format</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2019-04-04 - <a title="WebVTT: The Web Video Text Tracks Format publication history" href="/standards/history/webvtt1">History</a>
                        - <a href="https://w3c.github.io/webvtt/" title="Latest editor's draft of WebVTT: The Web Video Text Tracks Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Silvia Pfeiffer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="non-element selectors module level 1" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-selectors-nonelement-1-20190402/" title="Latest draft of Non-element Selectors Module Level 1 formally approved by the group">Non-element  Selectors  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-04-02 - <a title="Non-element Selectors Module Level 1 publication history" href="/standards/history/selectors-nonelement-1">History</a>
                        - <a href="https://drafts.csswg.org/selectors-nonelement/" title="Latest editor's draft of Non-element Selectors Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jirka Kosek
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="media access events" data-tag="dom graphics media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-MediaAccessEvents-20190328/" title="Latest draft of Media Access Events formally approved by the group">Media Access Events</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2019-03-28 - <a title="Media Access Events publication history" href="/standards/history/MediaAccessEvents">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ola Andersson
                            <li>Jean-Claude Dufourd
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="graphics">Graphics
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mitigating browser fingerprinting in web specifications" data-tag="privacy" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-fingerprinting-guidance-20190328/" title="Latest draft of Mitigating Browser Fingerprinting in Web Specifications formally approved by the group">Mitigating Browser Fingerprinting in Web Specifications</a></h2>
                        <p class=deliverer>Privacy Interest Group</p>
                        <p class=pubdetails>2019-03-28 - <a title="Mitigating Browser Fingerprinting in Web Specifications publication history" href="/standards/history/fingerprinting-guidance">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nick Doty
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg filter requirements" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-SVGFilterReqs12-20190328/" title="Latest draft of SVG Filter Requirements formally approved by the group">SVG Filter Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2019-03-28 - <a title="SVG Filter Requirements publication history" href="/standards/history/SVGFilterReqs12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Erik Dahlström
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ambient light sensor" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-ambient-light-20190307/" title="Latest draft of Ambient Light Sensor formally approved by the group">Ambient Light Sensor</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-03-07 - <a title="Ambient Light Sensor publication history" href="/standards/history/ambient-light">History</a>
                        - <a href="https://w3c.github.io/ambient-light/" title="Latest editor's draft of Ambient Light Sensor">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="magnetometer" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-magnetometer-20190307/" title="Latest draft of Magnetometer formally approved by the group">Magnetometer</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-03-07 - <a title="Magnetometer publication history" href="/standards/history/magnetometer">History</a>
                        - <a href="https://w3c.github.io/magnetometer/" title="Latest editor's draft of Magnetometer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Rijubrata Bhaumik
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="proximity sensor" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-proximity-20190305/" title="Latest draft of Proximity Sensor formally approved by the group">Proximity Sensor</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-03-05 - <a title="Proximity Sensor publication history" href="/standards/history/proximity">History</a>
                        - <a href="https://w3c.github.io/proximity/" title="Latest editor's draft of Proximity Sensor">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Rijubrata Bhaumik
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="web authentication:an api for accessing public key credentials level 1" data-tag="security" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-webauthn-1-20190304/" title="Latest draft of Web Authentication:An API for accessing Public Key Credentials Level 1 formally approved by the group">Web  Authentication:An  API  for  accessing  Public  Key  Credentials  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Authentication Working Group</p>
                        <p class=pubdetails>2019-03-04 - <a title="Web Authentication:An API for accessing Public Key Credentials Level 1 publication history" href="/standards/history/webauthn-1">History</a>
                        - <a href="https://w3c.github.io/webauthn/" title="Latest editor's draft of Web Authentication:An API for accessing Public Key Credentials Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Balfanz
                            <li>Alexei Czeskis
                            <li>Jeff Hodges
                            <li>J.C. Jones
                            <li>Michael Jones
                            <li>Akshay Kumar
                            <li>Huakai Liao
                            <li>Rolf Lindemann
                            <li>Emil Lundberg
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="user timing" data-tag="performance webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-user-timing-1-20190226/" title="Latest draft of User Timing formally approved by the group">User Timing</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-02-26 - <a title="User Timing publication history" href="/standards/history/user-timing-1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                            <li>Anderson Quach
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="user timing level 2" data-tag="performance webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-user-timing-2-20190226/" title="Latest draft of User Timing Level 2 formally approved by the group">User  Timing  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-02-26 - <a title="User Timing Level 2 publication history" href="/standards/history/user-timing-2">History</a>
                        - <a href="https://w3c.github.io/user-timing/" title="Latest editor's draft of User Timing Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css transforms module level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-transforms-1-20190214/" title="Latest draft of CSS Transforms Module Level 1 formally approved by the group">CSS  Transforms  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-02-14 - <a title="CSS Transforms Module Level 1 publication history" href="/standards/history/css-transforms-1">History</a>
                        - <a href="https://drafts.csswg.org/css-transforms/" title="Latest editor's draft of CSS Transforms Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Fraser
                            <li>Dean Jackson
                            <li>Theresa O&#039;Connor
                            <li>Dirk Schulze
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="character model for the world wide web: string matching" data-tag="i18n" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-charmod-norm-20190204/" title="Latest draft of Character Model for the World Wide Web: String Matching formally approved by the group">Character Model for the World Wide Web: String Matching</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2019-02-04 - <a title="Character Model for the World Wide Web: String Matching publication history" href="/standards/history/charmod-norm">History</a>
                        - <a href="https://w3c.github.io/charmod-norm/" title="Latest editor's draft of Character Model for the World Wide Web: String Matching">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="css snapshot 2018" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-css-2018-20190122/" title="Latest draft of CSS Snapshot 2018 formally approved by the group">CSS Snapshot 2018</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-01-22 - <a title="CSS Snapshot 2018 publication history" href="/standards/history/css-2018">History</a>
                        - <a href="https://drafts.csswg.org/css-2018/" title="Latest editor's draft of CSS Snapshot 2018">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="tracking compliance and scope" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-tracking-compliance-20190122/" title="Latest draft of Tracking Compliance and Scope formally approved by the group">Tracking Compliance and Scope</a></h2>
                        <p class=deliverer>Tracking Protection Working Group</p>
                        <p class=pubdetails>2019-01-22 - <a title="Tracking Compliance and Scope publication history" href="/standards/history/tracking-compliance">History</a>
                        - <a href="https://www.w3.org/2011/tracking-protection/drafts/tracking-compliance.html" title="Latest editor's draft of Tracking Compliance and Scope">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nick Doty
                            <li>Heather West
                            <li>Justin Brookman
                            <li>Sean Harvey
                            <li>Erica Newland
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="dataset exchange use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-dcat-ucr-20190117/" title="Latest draft of Dataset Exchange Use Cases and Requirements formally approved by the group">Dataset Exchange Use Cases and Requirements</a></h2>
                        <p class=deliverer>Dataset Exchange Working Group</p>
                        <p class=pubdetails>2019-01-17 - <a title="Dataset Exchange Use Cases and Requirements publication history" href="/standards/history/dcat-ucr">History</a>
                        - <a href="https://w3c.github.io/dxwg/ucr/" title="Latest editor's draft of Dataset Exchange Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jaroslav Pullmann
                            <li>Rob Atkinson
                            <li>Antoine Isaac
                            <li>Ixchel Faniel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="credential management level 1" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-credential-management-1-20190117/" title="Latest draft of Credential Management Level 1 formally approved by the group">Credential  Management  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2019-01-17 - <a title="Credential Management Level 1 publication history" href="/standards/history/credential-management-1">History</a>
                        - <a href="https://w3c.github.io/webappsec-credential-management/" title="Latest editor's draft of Credential Management Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="tracking preference expression (dnt)" data-tag="http privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-tracking-dnt-20190117/" title="Latest draft of Tracking Preference Expression (DNT) formally approved by the group">Tracking Preference Expression (DNT)</a></h2>
                        <p class=deliverer>Tracking Protection Working Group</p>
                        <p class=pubdetails>2019-01-17 - <a title="Tracking Preference Expression (DNT) publication history" href="/standards/history/tracking-dnt">History</a>
                        - <a href="https://w3c.github.io/dnt/drafts/tracking-dnt.html" title="Latest editor's draft of Tracking Preference Expression (DNT)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roy Fielding
                            <li>David Singer
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="geolocation sensor" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-geolocation-sensor-20181219/" title="Latest draft of Geolocation Sensor formally approved by the group">Geolocation Sensor</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2018-12-19 - <a title="Geolocation Sensor publication history" href="/standards/history/geolocation-sensor">History</a>
                        - <a href="https://w3c.github.io/geolocation-sensor/" title="Latest editor's draft of Geolocation Sensor">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Thomas Steiner
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="motion path module level 1" data-tag="css graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-motion-1-20181218/" title="Latest draft of Motion Path Module Level 1 formally approved by the group">Motion  Path  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-18 - <a title="Motion Path Module Level 1 publication history" href="/standards/history/motion-1">History</a>
                        - <a href="https://drafts.fxtf.org/motion-1/" title="Latest editor's draft of Motion Path Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Schulze
                            <li>Shane Stephens
                            <li>Jihye Hong
                            <li>Eric Willigers
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="filter effects module level 1" data-tag="css graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-filter-effects-1-20181218/" title="Latest draft of Filter Effects Module Level 1 formally approved by the group">Filter  Effects  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-18 - <a title="Filter Effects Module Level 1 publication history" href="/standards/history/filter-effects-1">History</a>
                        - <a href="https://drafts.fxtf.org/filter-effects-1/" title="Latest editor's draft of Filter Effects Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Schulze
                            <li>Dean Jackson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css fragmentation module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-break-4-20181218/" title="Latest draft of CSS Fragmentation Module Level 4 formally approved by the group">CSS  Fragmentation  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-18 - <a title="CSS Fragmentation Module Level 4 publication history" href="/standards/history/css-break-4">History</a>
                        - <a href="https://drafts.csswg.org/css-break-4/" title="Latest editor's draft of CSS Fragmentation Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="accessible name and description computation 1.1" data-tag="accessibility" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-accname-1.1-20181218/" title="Latest draft of Accessible Name and Description Computation 1.1 formally approved by the group">Accessible  Name  and  Description  Computation&nbsp;1.1</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2018-12-18 - <a title="Accessible Name and Description Computation 1.1 publication history" href="/standards/history/accname-1.1">History</a>
                        - <a href="https://w3c.github.io/accname/" title="Latest editor's draft of Accessible Name and Description Computation 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>Bryan Garaventa
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="cognitive accessibility roadmap and gap analysis" data-tag="accessibility" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-coga-gap-analysis-20181211/" title="Latest draft of Cognitive Accessibility Roadmap and Gap Analysis formally approved by the group">Cognitive Accessibility Roadmap and Gap Analysis</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2018-12-11 - <a title="Cognitive Accessibility Roadmap and Gap Analysis publication history" href="/standards/history/coga-gap-analysis">History</a>
                        - <a href="https://w3c.github.io/coga/gap-analysis/" title="Latest editor's draft of Cognitive Accessibility Roadmap and Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Horwitz
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css fragmentation module level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-css-break-3-20181204/" title="Latest draft of CSS Fragmentation Module Level 3 formally approved by the group">CSS  Fragmentation  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-04 - <a title="CSS Fragmentation Module Level 3 publication history" href="/standards/history/css-break-3">History</a>
                        - <a href="https://drafts.csswg.org/css-break/" title="Latest editor's draft of CSS Fragmentation Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="geometry interfaces module level 1" data-tag="css graphics" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-geometry-1-20181204/" title="Latest draft of Geometry Interfaces Module Level 1 formally approved by the group">Geometry  Interfaces  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-04 - <a title="Geometry Interfaces Module Level 1 publication history" href="/standards/history/geometry-1">History</a>
                        - <a href="https://drafts.fxtf.org/geometry/" title="Latest editor's draft of Geometry Interfaces Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Pieters
                            <li>Chris Harrelson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="selectors level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-selectors-4-20181121/" title="Latest draft of Selectors Level 4 formally approved by the group">Selectors  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-11-21 - <a title="Selectors Level 4 publication history" href="/standards/history/selectors-4">History</a>
                        - <a href="https://drafts.csswg.org/selectors/" title="Latest editor's draft of Selectors Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css flexible box layout module level 1" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-css-flexbox-1-20181119/" title="Latest draft of CSS Flexible Box Layout Module Level 1 formally approved by the group">CSS  Flexible  Box  Layout  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-11-19 - <a title="CSS Flexible Box Layout Module Level 1 publication history" href="/standards/history/css-flexbox-1">History</a>
                        - <a href="https://drafts.csswg.org/css-flexbox-1/" title="Latest editor's draft of CSS Flexible Box Layout Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Rossen Atanassov
                            <li>David Baron
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="css shadow parts" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-shadow-parts-1-20181115/" title="Latest draft of CSS Shadow Parts formally approved by the group">CSS Shadow Parts</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-11-15 - <a title="CSS Shadow Parts publication history" href="/standards/history/css-shadow-parts-1">History</a>
                        - <a href="https://drafts.csswg.org/css-shadow-parts/" title="Latest editor's draft of CSS Shadow Parts">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Fergal Daly
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="ttml profiles for internet media subtitles and captions 1.1" data-tag="media" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-ttml-imsc1.1-20181108/" title="Latest draft of TTML Profiles for Internet Media Subtitles and Captions 1.1 formally approved by the group">TTML  Profiles  for  Internet  Media  Subtitles  and  Captions&nbsp;1.1</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-11-08 - <a title="TTML Profiles for Internet Media Subtitles and Captions 1.1 publication history" href="/standards/history/ttml-imsc1.1">History</a>
                        - <a href="https://w3c.github.io/imsc/imsc1/spec/ttml-ww-profiles.html" title="Latest editor's draft of TTML Profiles for Internet Media Subtitles and Captions 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="timed text markup language 1 (ttml1) (third edition)" data-tag="media" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-ttml1-20181108/" title="Latest draft of Timed Text Markup Language 1 (TTML1) (Third Edition) formally approved by the group">Timed Text Markup Language 1 (TTML1) (Third Edition)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-11-08 - <a title="Timed Text Markup Language 1 (TTML1) (Third Edition) publication history" href="/standards/history/ttml1">History</a>
                        - <a href="https://w3c.github.io/ttml1/index.html" title="Latest editor's draft of Timed Text Markup Language 1 (TTML1) (Third Edition)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="timed text markup language 2 (ttml2)" data-tag="accessibility css html" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-ttml2-20181108/" title="Latest draft of Timed Text Markup Language 2 (TTML2) formally approved by the group">Timed Text Markup Language 2 (TTML2)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-11-08 - <a title="Timed Text Markup Language 2 (TTML2) publication history" href="/standards/history/ttml2">History</a>
                        - <a href="https://w3c.github.io/ttml2/index.html" title="Latest editor's draft of Timed Text Markup Language 2 (TTML2)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                            <li>Cyril Concolato
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="css">CSS
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="selectors level 3" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-selectors-3-20181106/" title="Latest draft of Selectors Level 3 formally approved by the group">Selectors  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-11-06 - <a title="Selectors Level 3 publication history" href="/standards/history/selectors-3">History</a>
                        - <a href="https://drafts.csswg.org/selectors-3/" title="Latest editor's draft of Selectors Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Elika Etemad
                            <li>Daniel Glazman
                            <li>Ian Hickson
                            <li>Peter Linss
                            <li>John Williams
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css paged media module level 3" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-page-3-20181018/" title="Latest draft of CSS Paged Media Module Level 3 formally approved by the group">CSS  Paged  Media  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-10-18 - <a title="CSS Paged Media Module Level 3 publication history" href="/standards/history/css-page-3">History</a>
                        - <a href="https://drafts.csswg.org/css-page-3/" title="Latest editor's draft of CSS Paged Media Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Simon Sapin
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="packaged web apps (widgets) - packaging and xml configuration (second edition)" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-widgets-20181011/" title="Latest draft of Packaged Web Apps (Widgets) - Packaging and XML Configuration (Second Edition) formally approved by the group">Packaged Web Apps (Widgets) - Packaging and XML Configuration (Second Edition)</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="Packaged Web Apps (Widgets) - Packaging and XML Configuration (Second Edition) publication history" href="/standards/history/widgets">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                          <li data-title="the &#039;view-mode&#039; media feature" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-view-mode-20181011/" title="Latest draft of The &#039;view-mode&#039; Media Feature formally approved by the group">The 'view-mode' Media Feature</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="The &#039;view-mode&#039; Media Feature publication history" href="/standards/history/view-mode">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                          <li data-title="widget access request policy" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-widgets-access-20181011/" title="Latest draft of Widget Access Request Policy formally approved by the group">Widget Access Request Policy</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="Widget Access Request Policy publication history" href="/standards/history/widgets-access">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Robin Berjon
                          </ul>
                                  </li>
                                                                                                                          <li data-title="widget interface" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-widgets-apis-20181011/" title="Latest draft of Widget Interface formally approved by the group">Widget Interface</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="Widget Interface publication history" href="/standards/history/widgets-apis">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml digital signatures for widgets" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-widgets-digsig-20181011/" title="Latest draft of XML Digital Signatures for Widgets formally approved by the group">XML Digital Signatures for Widgets</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="XML Digital Signatures for Widgets publication history" href="/standards/history/widgets-digsig">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Paddy Byers
                            <li>Stuart Knightley
                            <li>Frederick Hirsch
                            <li>Mark Priestley
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="css transitions" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-transitions-1-20181011/" title="Latest draft of CSS Transitions formally approved by the group">CSS Transitions</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="CSS Transitions publication history" href="/standards/history/css-transitions-1">History</a>
                        - <a href="https://drafts.csswg.org/css-transitions/" title="Latest editor's draft of CSS Transitions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                            <li>Dean Jackson
                            <li>Brian Birtles
                            <li>David Hyatt
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css animations level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-animations-1-20181011/" title="Latest draft of CSS Animations Level 1 formally approved by the group">CSS  Animations  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="CSS Animations Level 1 publication history" href="/standards/history/css-animations-1">History</a>
                        - <a href="https://drafts.csswg.org/css-animations/" title="Latest editor's draft of CSS Animations Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dean Jackson
                            <li>David Baron
                            <li>Tab Atkins Jr.
                            <li>Brian Birtles
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web animations" data-tag="css graphics" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-web-animations-1-20181011/" title="Latest draft of Web Animations formally approved by the group">Web Animations</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="Web Animations publication history" href="/standards/history/web-animations-1">History</a>
                        - <a href="https://drafts.csswg.org/web-animations-1/" title="Latest editor's draft of Web Animations">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brian Birtles
                            <li>Robert Flack
                            <li>Stephen McGruer
                            <li>Antoine Quint
                            <li>Shane Stephens
                            <li>Alex Danilo
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="scalable vector graphics (svg) 2" data-tag="graphics" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-SVG2-20181004/" title="Latest draft of Scalable Vector Graphics (SVG) 2 formally approved by the group">Scalable  Vector  Graphics  (SVG)&nbsp;2</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2018-10-04 - <a title="Scalable Vector Graphics (SVG) 2 publication history" href="/standards/history/SVG2">History</a>
                        - <a href="https://svgwg.org/svg2-draft/" title="Latest editor's draft of Scalable Vector Graphics (SVG) 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Bellamy-Royds
                            <li>Bogdan Brinza
                            <li>Chris Lilley
                            <li>Dirk Schulze
                            <li>David Storey
                            <li>Eric Willigers
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="graphics accessibility api mappings" data-tag="accessibility graphics" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-graphics-aam-1.0-20181002/" title="Latest draft of Graphics Accessibility API Mappings formally approved by the group">Graphics Accessibility API Mappings</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2018-10-02 - <a title="Graphics Accessibility API Mappings publication history" href="/standards/history/graphics-aam-1.0">History</a>
                        - <a href="https://w3c.github.io/graphics-aam/" title="Latest editor's draft of Graphics Accessibility API Mappings">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Bellamy-Royds
                            <li>Joanmarie Diggs
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="wai-aria graphics module" data-tag="accessibility graphics" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-graphics-aria-1.0-20181002/" title="Latest draft of WAI-ARIA Graphics Module formally approved by the group">WAI-ARIA Graphics Module</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2018-10-02 - <a title="WAI-ARIA Graphics Module publication history" href="/standards/history/graphics-aria-1.0">History</a>
                        - <a href="https://w3c.github.io/graphics-aria/" title="Latest editor's draft of WAI-ARIA Graphics Module">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Bellamy-Royds
                            <li>Joanmarie Diggs
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="using aria" data-tag="accessibility html" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-using-aria-20180927/" title="Latest draft of Using ARIA formally approved by the group">Using ARIA</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-09-27 - <a title="Using ARIA publication history" href="/standards/history/using-aria">History</a>
                        - <a href="https://w3c.github.io/using-aria/" title="Latest editor's draft of Using ARIA">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>David MacDonald
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="identity for webrtc 1.0" data-tag="" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-webrtc-identity-20180927/" title="Latest draft of Identity for WebRTC 1.0 formally approved by the group">Identity  for  WebRTC&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2018-09-27 - <a title="Identity for WebRTC 1.0 publication history" href="/standards/history/webrtc-identity">History</a>
                        - <a href="https://w3c.github.io/webrtc-identity/" title="Latest editor's draft of Identity for WebRTC 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cullen Jennings
                            <li>Martin Thomson
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css scrollbars module level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-scrollbars-1-20180925/" title="Latest draft of CSS Scrollbars Module Level 1 formally approved by the group">CSS  Scrollbars  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="CSS Scrollbars Module Level 1 publication history" href="/standards/history/css-scrollbars-1">History</a>
                        - <a href="https://drafts.csswg.org/css-scrollbars/" title="Latest editor's draft of CSS Scrollbars Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Rossen Atanassov
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="device memory" data-tag="performance" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-device-memory-1-20180925/" title="Latest draft of Device Memory formally approved by the group">Device Memory</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="Device Memory publication history" href="/standards/history/device-memory-1">History</a>
                        - <a href="https://w3c.github.io/device-memory/" title="Latest editor's draft of Device Memory">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shubhie Panicker
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="reporting api" data-tag="performance webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-reporting-1-20180925/" title="Latest draft of Reporting API formally approved by the group">Reporting API</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="Reporting API publication history" href="/standards/history/reporting-1">History</a>
                        - <a href="https://w3c.github.io/reporting/" title="Latest editor's draft of Reporting API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Douglas Creager
                            <li>Ilya Grigorik
                            <li>Paul Meyer
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="imsc1.1 requirements" data-tag="media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-imsc-1.1-reqs-20180925/" title="Latest draft of IMSC1.1 Requirements formally approved by the group">IMSC1.1 Requirements</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="IMSC1.1 Requirements publication history" href="/standards/history/imsc-1.1-reqs">History</a>
                        - <a href="https://w3c.github.io/imsc-vnext-reqs/" title="Latest editor's draft of IMSC1.1 Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="network error logging" data-tag="performance webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-network-error-logging-1-20180925/" title="Latest draft of Network Error Logging formally approved by the group">Network Error Logging</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="Network Error Logging publication history" href="/standards/history/network-error-logging-1">History</a>
                        - <a href="https://w3c.github.io/network-error-logging/" title="Latest editor's draft of Network Error Logging">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Douglas Creager
                            <li>Ilya Grigorik
                            <li>Julia Tuttle
                            <li>Alois Reitbauer
                            <li>Arvind Jain
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css fonts module level 3" data-tag="css i18n" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/" title="Latest draft of CSS Fonts Module Level 3 formally approved by the group">CSS  Fonts  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-09-20 - <a title="CSS Fonts Module Level 3 publication history" href="/standards/history/css-fonts-3">History</a>
                        - <a href="https://drafts.csswg.org/css-fonts-3/" title="Latest editor's draft of CSS Fonts Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Daggett
                            <li>Myles Maxfield
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="cascading style sheets, level 1" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-CSS1-20180913/" title="Latest draft of Cascading Style Sheets, level 1 formally approved by the group">Cascading  Style  Sheets,  level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-09-13 - <a title="Cascading Style Sheets, level 1 publication history" href="/standards/history/CSS1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Håkon Wium Lie
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="an rdf schema for p3p" data-tag="privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-p3p-rdfschema-20180830/" title="Latest draft of An RDF Schema for P3P formally approved by the group">An RDF Schema for P3P</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2018-08-30 - <a title="An RDF Schema for P3P publication history" href="/standards/history/p3p-rdfschema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brian McBride
                            <li>Rigo Wenning
                            <li>Lorrie Cranor
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="p3p guiding principles" data-tag="privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-P3P10-principles-20180830/" title="Latest draft of P3P Guiding Principles formally approved by the group">P3P Guiding Principles</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2018-08-30 - <a title="P3P Guiding Principles publication history" href="/standards/history/P3P10-principles">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="the platform for privacy preferences 1.0 (p3p1.0) specification" data-tag="privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-P3P-20180830/" title="Latest draft of The Platform for Privacy Preferences 1.0 (P3P1.0) Specification formally approved by the group">The Platform for Privacy Preferences 1.0 (P3P1.0) Specification</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2018-08-30 - <a title="The Platform for Privacy Preferences 1.0 (P3P1.0) Specification publication history" href="/standards/history/P3P">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Massimo Marchiori
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="the platform for privacy preferences 1.1 (p3p1.1) specification" data-tag="privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-P3P11-20180830/" title="Latest draft of The Platform for Privacy Preferences 1.1 (P3P1.1) Specification formally approved by the group">The Platform for Privacy Preferences 1.1 (P3P1.1) Specification</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2018-08-30 - <a title="The Platform for Privacy Preferences 1.1 (P3P1.1) Specification publication history" href="/standards/history/P3P11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rigo Wenning
                            <li>Matthias Schunter
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css logical properties and values level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-logical-1-20180827/" title="Latest draft of CSS Logical Properties and Values Level 1 formally approved by the group">CSS  Logical  Properties  and  Values  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-08-27 - <a title="CSS Logical Properties and Values Level 1 publication history" href="/standards/history/css-logical-1">History</a>
                        - <a href="https://drafts.csswg.org/css-logical-1/" title="Latest editor's draft of CSS Logical Properties and Values Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css painting api level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-css-paint-api-1-20180809/" title="Latest draft of CSS Painting API Level 1 formally approved by the group">CSS  Painting  API  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-08-09 - <a title="CSS Painting API Level 1 publication history" href="/standards/history/css-paint-api-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-paint-api-1/" title="Latest editor's draft of CSS Painting API Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Kilpatrick
                            <li>Dean Jackson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="exi for json (exi4json)" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-exi-for-json-20180726/" title="Latest draft of EXI for JSON (EXI4JSON) formally approved by the group">EXI for JSON (EXI4JSON)</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2018-07-26 - <a title="EXI for JSON (EXI4JSON) publication history" href="/standards/history/exi-for-json">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Peintner
                            <li>Don Brutzman
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="web payments use cases 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-web-payments-use-cases-20180719/" title="Latest draft of Web Payments Use Cases 1.0 formally approved by the group">Web  Payments  Use  Cases&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Commerce Interest Group</p>
                        <p class=pubdetails>2018-07-19 - <a title="Web Payments Use Cases 1.0 publication history" href="/standards/history/web-payments-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Ian Jacobs
                          </ul>
                                  </li>
                                                                                                                          <li data-title="packaging on the web" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-web-packaging-20180626/" title="Latest draft of Packaging on the Web formally approved by the group">Packaging on the Web</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2018-06-26 - <a title="Packaging on the Web publication history" href="/standards/history/web-packaging">History</a>
                        - <a href="https://w3ctag.github.io/packaging-on-the-web/" title="Latest editor's draft of Packaging on the Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                  </li>
                                                                                                                          <li data-title="vehicle information api specification" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-vehicle-information-api-20180626/" title="Latest draft of Vehicle Information API Specification formally approved by the group">Vehicle Information API Specification</a></h2>
                        <p class=deliverer>Automotive Working Group</p>
                        <p class=pubdetails>2018-06-26 - <a title="Vehicle Information API Specification publication history" href="/standards/history/vehicle-information-api">History</a>
                        - <a href="https://w3c.github.io/automotive/vehicle_information_api/vehicle_information_api_specification.html" title="Latest editor's draft of Vehicle Information API Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Powell Kinney
                            <li>Shinjiro Urata
                            <li>Mike Aro
                          </ul>
                                  </li>
                                                                                                                          <li data-title="ttml profiles for internet media subtitles and captions 1.0 (imsc1)" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-ttml-imsc1-20180626/" title="Latest draft of TTML Profiles for Internet Media Subtitles and Captions 1.0 (IMSC1) formally approved by the group">TTML Profiles for Internet Media Subtitles and Captions 1.0 (IMSC1)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-06-26 - <a title="TTML Profiles for Internet Media Subtitles and Captions 1.0 (IMSC1) publication history" href="/standards/history/ttml-imsc1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css basic user interface module level 3 (css3 ui)" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-css-ui-3-20180621/" title="Latest draft of CSS Basic User Interface Module Level 3 (CSS3 UI) formally approved by the group">CSS Basic User Interface Module Level 3 (CSS3 UI)</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-06-21 - <a title="CSS Basic User Interface Module Level 3 (CSS3 UI) publication history" href="/standards/history/css-ui-3">History</a>
                        - <a href="https://drafts.csswg.org/css-ui-3/" title="Latest editor's draft of CSS Basic User Interface Module Level 3 (CSS3 UI)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css color module level 3" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-css-color-3-20180619/" title="Latest draft of CSS Color Module Level 3 formally approved by the group">CSS  Color  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-06-19 - <a title="CSS Color Module Level 3 publication history" href="/standards/history/css-color-3">History</a>
                        - <a href="https://drafts.csswg.org/css-color-3/" title="Latest editor's draft of CSS Color Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Chris Lilley
                            <li>David Baron
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="canonical exi" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-exi-c14n-20180607/" title="Latest draft of Canonical EXI formally approved by the group">Canonical EXI</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2018-06-07 - <a title="Canonical EXI publication history" href="/standards/history/exi-c14n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sebastian Käbisch
                            <li>Daniel Peintner
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="webdriver" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-webdriver1-20180605/" title="Latest draft of WebDriver formally approved by the group">WebDriver</a></h2>
                        <p class=deliverer>Browser Testing and Tools Working Group</p>
                        <p class=pubdetails>2018-06-05 - <a title="WebDriver publication history" href="/standards/history/webdriver1">History</a>
                        - <a href="https://w3c.github.io/webdriver/" title="Latest editor's draft of WebDriver">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Stewart
                            <li>David Burns
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="web content accessibility guidelines (wcag) 2.1" data-tag="accessibility" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-WCAG21-20180605/" title="Latest draft of Web Content Accessibility Guidelines (WCAG) 2.1 formally approved by the group">Web  Content  Accessibility  Guidelines  (WCAG)&nbsp;2.1</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2018-06-05 - <a title="Web Content Accessibility Guidelines (WCAG) 2.1 publication history" href="/standards/history/WCAG21">History</a>
                        - <a href="https://w3c.github.io/wcag/21/guidelines/" title="Latest editor's draft of Web Content Accessibility Guidelines (WCAG) 2.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Kirkpatrick
                            <li>Joshue O Connor
                            <li>Alastair Campbell
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg accessibility api mappings" data-tag="accessibility graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-svg-aam-1.0-20180510/" title="Latest draft of SVG Accessibility API Mappings formally approved by the group">SVG Accessibility API Mappings</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2018-05-10 - <a title="SVG Accessibility API Mappings publication history" href="/standards/history/svg-aam-1.0">History</a>
                        - <a href="https://w3c.github.io/svg-aam/" title="Latest editor's draft of SVG Accessibility API Mappings">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Bellamy-Royds
                            <li>Ian Pouncey
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="custom elements" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-custom-elements-20180503/" title="Latest draft of Custom Elements formally approved by the group">Custom Elements</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-05-03 - <a title="Custom Elements publication history" href="/standards/history/custom-elements">History</a>
                        - <a href="https://w3c.github.io/webcomponents/spec/custom/" title="Latest editor's draft of Custom Elements">Editor's Draft</a>
                        </p>
                                  </li>
                                                                                                                          <li data-title="ttml profiles for internet media subtitles and captions 1.0.1 (imsc1)" data-tag="media" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-ttml-imsc1.0.1-20180424/" title="Latest draft of TTML Profiles for Internet Media Subtitles and Captions 1.0.1 (IMSC1) formally approved by the group">TTML Profiles for Internet Media Subtitles and Captions 1.0.1 (IMSC1)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-04-24 - <a title="TTML Profiles for Internet Media Subtitles and Captions 1.0.1 (IMSC1) publication history" href="/standards/history/ttml-imsc1.0.1">History</a>
                        - <a href="https://w3c.github.io/imsc/imsc1/spec/ttml-ww-profiles.html" title="Latest editor's draft of TTML Profiles for Internet Media Subtitles and Captions 1.0.1 (IMSC1)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css layout api level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/" title="Latest draft of CSS Layout API Level 1 formally approved by the group">CSS  Layout  API  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-04-12 - <a title="CSS Layout API Level 1 publication history" href="/standards/history/css-layout-api-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-layout-api-1/" title="Latest editor's draft of CSS Layout API Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Greg Whitworth
                            <li>Ian Kilpatrick
                            <li>Tab Atkins Jr.
                            <li>Shane Stephens
                            <li>Robert O&#039;Callahan
                            <li>Rossen Atanassov
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="dommatrix interface" data-tag="css graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-matrix-20180412/" title="Latest draft of DOMMatrix interface formally approved by the group">DOMMatrix interface</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-04-12 - <a title="DOMMatrix interface publication history" href="/standards/history/matrix">History</a>
                        - <a href="https://drafts.fxtf.org/matrix/" title="Latest editor's draft of DOMMatrix interface">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Schulze
                            <li>Rik Cabanier
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css typed om level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-typed-om-1-20180410/" title="Latest draft of CSS Typed OM Level 1 formally approved by the group">CSS  Typed  OM  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2018-04-10 - <a title="CSS Typed OM Level 1 publication history" href="/standards/history/css-typed-om-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-typed-om-1/" title="Latest editor's draft of CSS Typed OM Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane Stephens
                            <li>Tab Atkins Jr.
                            <li>Naina Raisinghani
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml™ modularization 1.1 - second edition" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-xhtml-modularization-20180327/" title="Latest draft of XHTML™ Modularization 1.1 - Second Edition formally approved by the group">XHTML™ Modularization 1.1 - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML™ Modularization 1.1 - Second Edition publication history" href="/standards/history/xhtml-modularization">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                  </li>
                                                                                                                          <li data-title="html5" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-html5-20180327/" title="Latest draft of HTML5 formally approved by the group">HTML5</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="HTML5 publication history" href="/standards/history/html5">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                            <li>Robin Berjon
                            <li>Steve Faulkner
                            <li>Travis Leithead
                            <li>Erika Doyle Navara
                            <li>Theresa O&#039;Connor
                            <li>Silvia Pfeiffer
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml-print - second edition" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-xhtml-print-20180327/" title="Latest draft of XHTML-Print - Second Edition formally approved by the group">XHTML-Print - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML-Print - Second Edition publication history" href="/standards/history/xhtml-print">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html 4.0 recommendation" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-html40-20180327/" title="Latest draft of HTML 4.0 Recommendation formally approved by the group">HTML 4.0 Recommendation</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="HTML 4.0 Recommendation publication history" href="/standards/history/html40">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                            <li>Arnaud Le Hors
                            <li>Ian Jacobs
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xhtml™ 1.0 the extensible hypertext markup language (second edition)" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-xhtml1-20180327/" title="Latest draft of XHTML™ 1.0 The Extensible HyperText Markup Language (Second Edition) formally approved by the group">XHTML™ 1.0 The Extensible HyperText Markup Language (Second Edition)</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML™ 1.0 The Extensible HyperText Markup Language (Second Edition) publication history" href="/standards/history/xhtml1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Pemberton
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml™ basic 1.1 - second edition" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-xhtml-basic-20180327/" title="Latest draft of XHTML™ Basic 1.1 - Second Edition formally approved by the group">XHTML™ Basic 1.1 - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML™ Basic 1.1 - Second Edition publication history" href="/standards/history/xhtml-basic">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html 4.01 specification" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-html401-20180327/" title="Latest draft of HTML 4.01 Specification formally approved by the group">HTML 4.01 Specification</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="HTML 4.01 Specification publication history" href="/standards/history/html401">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                            <li>Arnaud Le Hors
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml™ 1.1 - module-based xhtml - second edition" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-xhtml11-20180327/" title="Latest draft of XHTML™ 1.1 - Module-based XHTML - Second Edition formally approved by the group">XHTML™ 1.1 - Module-based XHTML - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML™ 1.1 - Module-based XHTML - Second Edition publication history" href="/standards/history/xhtml11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Masayasu Ishikawa
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html 3.2 reference specification" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-html32-20180315/" title="Latest draft of HTML 3.2 Reference Specification formally approved by the group">HTML 3.2 Reference Specification</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-15 - <a title="HTML 3.2 Reference Specification publication history" href="/standards/history/REC-html32">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="shadow dom" data-tag="dom" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-shadow-dom-20180301/" title="Latest draft of Shadow DOM formally approved by the group">Shadow DOM</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-03-01 - <a title="Shadow DOM publication history" href="/standards/history/shadow-dom">History</a>
                        - <a href="https://w3c.github.io/webcomponents/spec/shadow/" title="Latest editor's draft of Shadow DOM">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hayato Ito
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="woff file format 2.0" data-tag="" data-status="rec" data-version="upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-WOFF2-20180301/" title="Latest draft of WOFF File Format 2.0 formally approved by the group">WOFF  File  Format&nbsp;2.0</a></h2>
                        <p class=deliverer>Web Fonts Working Group</p>
                        <p class=pubdetails>2018-03-01 - <a title="WOFF File Format 2.0 publication history" href="/standards/history/WOFF2">History</a>
                        - <a href="https://w3c.github.io/woff/woff2/" title="Latest editor's draft of WOFF File Format 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Vladimir Levantovsky
                            <li>Raph Levien
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="odrl information model 2.2" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-odrl-model-20180215/" title="Latest draft of ODRL Information Model 2.2 formally approved by the group">ODRL  Information  Model&nbsp;2.2</a></h2>
                        <p class=deliverer>Permissions and Obligations Expression Working Group</p>
                        <p class=pubdetails>2018-02-15 - <a title="ODRL Information Model 2.2 publication history" href="/standards/history/odrl-model">History</a>
                        - <a href="https://w3c.github.io/poe/model/" title="Latest editor's draft of ODRL Information Model 2.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Renato Iannella
                            <li>Serena Villata
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="odrl vocabulary &amp; expression 2.2" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-odrl-vocab-20180215/" title="Latest draft of ODRL Vocabulary &amp; Expression 2.2 formally approved by the group">ODRL  Vocabulary  &  Expression&nbsp;2.2</a></h2>
                        <p class=deliverer>Permissions and Obligations Expression Working Group</p>
                        <p class=pubdetails>2018-02-15 - <a title="ODRL Vocabulary &amp; Expression 2.2 publication history" href="/standards/history/odrl-vocab">History</a>
                        - <a href="https://w3c.github.io/poe/vocab/" title="Latest editor's draft of ODRL Vocabulary &amp; Expression 2.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Renato Iannella
                            <li>Michael Steidl
                            <li>Stuart Myles
                            <li>Víctor Rodríguez-Doncel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="vehicle information service specification" data-tag="" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-vehicle-information-service-20180213/" title="Latest draft of Vehicle Information Service Specification formally approved by the group">Vehicle Information Service Specification</a></h2>
                        <p class=deliverer>Automotive Working Group</p>
                        <p class=pubdetails>2018-02-13 - <a title="Vehicle Information Service Specification publication history" href="/standards/history/vehicle-information-service">History</a>
                        - <a href="https://w3c.github.io/automotive/vehicle_data/vehicle_information_service.html" title="Latest editor's draft of Vehicle Information Service Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kevin Gavigan
                            <li>Adam Crofts
                            <li>Wonsuk Lee
                            <li>Powell Kinney
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="html media capture" data-tag="html media webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-html-media-capture-20180201/" title="Latest draft of HTML Media Capture formally approved by the group">HTML Media Capture</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2018-02-01 - <a title="HTML Media Capture publication history" href="/standards/history/html-media-capture">History</a>
                        - <a href="https://w3c.github.io/html-media-capture/" title="Latest editor's draft of HTML Media Capture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Ilkka Oksanen
                            <li>Dominique Hazaël-Massieux
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="indexed database api 2.0" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-IndexedDB-2-20180130/" title="Latest draft of Indexed Database API 2.0 formally approved by the group">Indexed  Database  API&nbsp;2.0</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-01-30 - <a title="Indexed Database API 2.0 publication history" href="/standards/history/IndexedDB-2">History</a>
                        - <a href="https://w3c.github.io/IndexedDB/" title="Latest editor's draft of Indexed Database API 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ali Alabbas
                            <li>Joshua Bell
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="websub" data-tag="" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-websub-20180123/" title="Latest draft of WebSub formally approved by the group">WebSub</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-23 - <a title="WebSub publication history" href="/standards/history/websub">History</a>
                        - <a href="https://websub.net/draft" title="Latest editor's draft of WebSub">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Julien Genestoux
                            <li>Aaron Parecki
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="activitypub" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-activitypub-20180123/" title="Latest draft of ActivityPub formally approved by the group">ActivityPub</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-23 - <a title="ActivityPub publication history" href="/standards/history/activitypub">History</a>
                        - <a href="https://w3c.github.io/activitypub/" title="Latest editor's draft of ActivityPub">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christopher Webber
                            <li>Jessica Tallon
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="indieauth" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-indieauth-20180123/" title="Latest draft of IndieAuth formally approved by the group">IndieAuth</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-23 - <a title="IndieAuth publication history" href="/standards/history/indieauth">History</a>
                        - <a href="https://indieauth.spec.indieweb.org/" title="Latest editor's draft of IndieAuth">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Parecki
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="post type discovery" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-post-type-discovery-20180118/" title="Latest draft of Post Type Discovery formally approved by the group">Post Type Discovery</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-18 - <a title="Post Type Discovery publication history" href="/standards/history/post-type-discovery">History</a>
                        - <a href="https://ptd.spec.indieweb.org/" title="Latest editor's draft of Post Type Discovery">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="jf2 post serialization format" data-tag="" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-jf2-20180110/" title="Latest draft of JF2 Post Serialization Format formally approved by the group">JF2 Post Serialization Format</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-10 - <a title="JF2 Post Serialization Format publication history" href="/standards/history/jf2">History</a>
                        - <a href="https://jf2.spec.indieweb.org/" title="Latest editor's draft of JF2 Post Serialization Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Benjamin Roberts
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="social web protocols" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-social-web-protocols-20171225/" title="Latest draft of Social Web Protocols formally approved by the group">Social Web Protocols</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-12-25 - <a title="Social Web Protocols publication history" href="/standards/history/social-web-protocols">History</a>
                        - <a href="https://w3c-social.github.io/social-web-protocols" title="Latest editor's draft of Social Web Protocols">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amy Guy
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="digital publishing accessibility api mappings" data-tag="accessibility" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-dpub-aam-1.0-20171214/" title="Latest draft of Digital Publishing Accessibility API Mappings formally approved by the group">Digital Publishing Accessibility API Mappings</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="Digital Publishing Accessibility API Mappings publication history" href="/standards/history/dpub-aam-1.0">History</a>
                        - <a href="https://w3c.github.io/dpub-aam/" title="Latest editor's draft of Digital Publishing Accessibility API Mappings">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Schwerdtfeger
                            <li>Joanmarie Diggs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="accessible rich internet applications (wai-aria) 1.1" data-tag="accessibility" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-wai-aria-1.1-20171214/" title="Latest draft of Accessible Rich Internet Applications (WAI-ARIA) 1.1 formally approved by the group">Accessible  Rich  Internet  Applications  (WAI-ARIA)&nbsp;1.1</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="Accessible Rich Internet Applications (WAI-ARIA) 1.1 publication history" href="/standards/history/wai-aria-1.1">History</a>
                        - <a href="https://w3c.github.io/aria/" title="Latest editor's draft of Accessible Rich Internet Applications (WAI-ARIA) 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>Shane McCarron
                            <li>Michael Cooper
                            <li>Richard Schwerdtfeger
                            <li>James Craig
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="core accessibility api mappings 1.1" data-tag="accessibility" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-core-aam-1.1-20171214/" title="Latest draft of Core Accessibility API Mappings 1.1 formally approved by the group">Core  Accessibility  API  Mappings&nbsp;1.1</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="Core Accessibility API Mappings 1.1 publication history" href="/standards/history/core-aam-1.1">History</a>
                        - <a href="https://w3c.github.io/core-aam/" title="Latest editor's draft of Core Accessibility API Mappings 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>Joseph Scheuhammer
                            <li>Richard Schwerdtfeger
                            <li>Michael Cooper
                            <li>Andi Snow-Weaver
                            <li>Aaron Leventhal
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="digital publishing wai-aria module 1.0" data-tag="accessibility" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-dpub-aria-1.0-20171214/" title="Latest draft of Digital Publishing WAI-ARIA Module 1.0 formally approved by the group">Digital  Publishing  WAI-ARIA  Module&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="Digital Publishing WAI-ARIA Module 1.0 publication history" href="/standards/history/dpub-aria-1.0">History</a>
                        - <a href="https://w3c.github.io/dpub-aria/" title="Latest editor's draft of Digital Publishing WAI-ARIA Module 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                            <li>Tzviya Siegman
                            <li>Markus Gylling
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css counter styles level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-css-counter-styles-3-20171214/" title="Latest draft of CSS Counter Styles Level 3 formally approved by the group">CSS  Counter  Styles  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="CSS Counter Styles Level 3 publication history" href="/standards/history/css-counter-styles-3">History</a>
                        - <a href="https://drafts.csswg.org/css-counter-styles/" title="Latest editor's draft of CSS Counter Styles Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="web payments http api 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-webpayments-http-api-20171212/" title="Latest draft of Web Payments HTTP API 1.0 formally approved by the group">Web  Payments  HTTP  API&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2017-12-12 - <a title="Web Payments HTTP API 1.0 publication history" href="/standards/history/webpayments-http-api">History</a>
                        - <a href="https://w3c.github.io/webpayments-http-api/" title="Latest editor's draft of Web Payments HTTP API 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Dave Longley
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="payment method manifest" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-payment-method-manifest-20171212/" title="Latest draft of Payment Method Manifest formally approved by the group">Payment Method Manifest</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2017-12-12 - <a title="Payment Method Manifest publication history" href="/standards/history/payment-method-manifest">History</a>
                        - <a href="https://w3c.github.io/payment-method-manifest/" title="Latest editor's draft of Payment Method Manifest">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dapeng Liu
                            <li>Domenic Denicola
                            <li>Zach Koch
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="clear site data" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-clear-site-data-20171130/" title="Latest draft of Clear Site Data formally approved by the group">Clear Site Data</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2017-11-30 - <a title="Clear Site Data publication history" href="/standards/history/clear-site-data">History</a>
                        - <a href="https://w3c.github.io/webappsec-clear-site-data/" title="Latest editor's draft of Clear Site Data">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="remote playback api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-remote-playback-20171019/" title="Latest draft of Remote Playback API formally approved by the group">Remote Playback API</a></h2>
                        <p class=deliverer>Second Screen Working Group</p>
                        <p class=pubdetails>2017-10-19 - <a title="Remote Playback API publication history" href="/standards/history/remote-playback">History</a>
                        - <a href="https://w3c.github.io/remote-playback/" title="Latest editor's draft of Remote Playback API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Anton Vayvod
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="semantic sensor network ontology" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-vocab-ssn-20171019/" title="Latest draft of Semantic Sensor Network Ontology formally approved by the group">Semantic Sensor Network Ontology</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-10-19 - <a title="Semantic Sensor Network Ontology publication history" href="/standards/history/vocab-ssn">History</a>
                        - <a href="https://w3c.github.io/sdw/ssn/" title="Latest editor's draft of Semantic Sensor Network Ontology">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Armin Haller
                            <li>Krzysztof Janowicz
                            <li>Simon Cox
                            <li>Danh Le Phuoc
                            <li>Kerry Taylor
                            <li>Maxime Lefrançois
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="page visibility level 2" data-tag="performance webapi" data-status="pr" data-version="latest upcoming ed">
            <div class="profile">PR</div>
            <h2 class="ProposedRecommendation"><a href="https://www.w3.org/TR/2017/PR-page-visibility-2-20171017/" title="Latest draft of Page Visibility Level 2 formally approved by the group">Page  Visibility  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-10-17 - <a title="Page Visibility Level 2 publication history" href="/standards/history/page-visibility-2">History</a>
                        - <a href="https://w3c.github.io/page-visibility/" title="Latest editor's draft of Page Visibility Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                            <li>Arvind Jain
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="vehicle data" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-vehicle-data-20171012/" title="Latest draft of Vehicle Data formally approved by the group">Vehicle Data</a></h2>
                        <p class=deliverer>Automotive Working Group</p>
                        <p class=pubdetails>2017-10-12 - <a title="Vehicle Data publication history" href="/standards/history/vehicle-data">History</a>
                        - <a href="https://w3c.github.io/automotive/vehicle_data/data_spec.html" title="Latest editor's draft of Vehicle Data">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wonsuk Lee
                            <li>Qing An
                            <li>Adam Crofts
                            <li>Kevin Gavigan
                            <li>Justin(JongSeon) Park
                            <li>Kevron Rees
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="cooperative scheduling of background tasks" data-tag="performance webapi" data-status="pr" data-version="latest upcoming ed">
            <div class="profile">PR</div>
            <h2 class="ProposedRecommendation"><a href="https://www.w3.org/TR/2017/PR-requestidlecallback-20171010/" title="Latest draft of Cooperative Scheduling of Background Tasks formally approved by the group">Cooperative Scheduling of Background Tasks</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-10-10 - <a title="Cooperative Scheduling of Background Tasks publication history" href="/standards/history/requestidlecallback">History</a>
                        - <a href="https://w3c.github.io/requestidlecallback/" title="Latest editor's draft of Cooperative Scheduling of Background Tasks">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ross McIlroy
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="spatial data on the web best practices" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-sdw-bp-20170928/" title="Latest draft of Spatial Data on the Web Best Practices formally approved by the group">Spatial Data on the Web Best Practices</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-09-28 - <a title="Spatial Data on the Web Best Practices publication history" href="/standards/history/sdw-bp">History</a>
                        - <a href="https://w3c.github.io/sdw/bp/" title="Latest editor's draft of Spatial Data on the Web Best Practices">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Tandy
                            <li>Linda van den Brink
                            <li>Payam Barnaghi
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="publishing and using earth observation data with the rdf data cube and the discrete global grid system" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-eo-qb-20170928/" title="Latest draft of Publishing and Using Earth Observation Data with the RDF Data Cube and the Discrete Global Grid System formally approved by the group">Publishing and Using Earth Observation Data with the RDF Data Cube and the Discrete Global Grid System</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-09-28 - <a title="Publishing and Using Earth Observation Data with the RDF Data Cube and the Discrete Global Grid System publication history" href="/standards/history/eo-qb">History</a>
                        - <a href="https://w3c.github.io/sdw/eo-qb/" title="Latest editor's draft of Publishing and Using Earth Observation Data with the RDF Data Cube and the Discrete Global Grid System">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dmitry Brizhinev
                            <li>Sam Toyer
                            <li>Kerry Taylor
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="qb4st: rdf data cube extensions for spatio-temporal components" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-qb4st-20170928/" title="Latest draft of QB4ST: RDF Data Cube extensions for spatio-temporal components formally approved by the group">QB4ST: RDF Data Cube extensions for spatio-temporal components</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-09-28 - <a title="QB4ST: RDF Data Cube extensions for spatio-temporal components publication history" href="/standards/history/qb4st">History</a>
                        - <a href="https://w3c.github.io/sdw/qb4st/" title="Latest editor's draft of QB4ST: RDF Data Cube extensions for spatio-temporal components">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rob Atkinson
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="encrypted media extensions" data-tag="html webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-encrypted-media-20170918/" title="Latest draft of Encrypted Media Extensions formally approved by the group">Encrypted Media Extensions</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2017-09-18 - <a title="Encrypted Media Extensions publication history" href="/standards/history/encrypted-media">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/" title="Latest editor's draft of Encrypted Media Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Dorwin
                            <li>Jerry Smith
                            <li>Mark Watson
                            <li>Adrian Bateman
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="using the itu bt.2100 pq eotf with the png format" data-tag="media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-png-hdr-pq-20170911/" title="Latest draft of Using the ITU BT.2100 PQ EOTF with the PNG Format formally approved by the group">Using the ITU BT.2100 PQ EOTF with the PNG Format</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2017-09-11 - <a title="Using the ITU BT.2100 PQ EOTF with the PNG Format publication history" href="/standards/history/png-hdr-pq">History</a>
                        - <a href="https://w3c.github.io/png-hdr-pq/" title="Latest editor's draft of Using the ITU BT.2100 PQ EOTF with the PNG Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="paint timing 1" data-tag="performance" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-paint-timing-20170907/" title="Latest draft of Paint Timing 1 formally approved by the group">Paint  Timing&nbsp;1</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-09-07 - <a title="Paint Timing 1 publication history" href="/standards/history/paint-timing">History</a>
                        - <a href="https://w3c.github.io/paint-timing/" title="Latest editor's draft of Paint Timing 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shubhie Panicker
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="long tasks api 1" data-tag="performance" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-longtasks-1-20170907/" title="Latest draft of Long Tasks API 1 formally approved by the group">Long  Tasks  API&nbsp;1</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-09-07 - <a title="Long Tasks API 1 publication history" href="/standards/history/longtasks-1">History</a>
                        - <a href="https://w3c.github.io/longtasks/" title="Latest editor's draft of Long Tasks API 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shubhie Panicker
                            <li>Ilya Grigorik
                            <li>Domenic Denicola
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="motion sensors explainer" data-tag="webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-motion-sensors-20170830/" title="Latest draft of Motion Sensors Explainer formally approved by the group">Motion Sensors Explainer</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2017-08-30 - <a title="Motion Sensors Explainer publication history" href="/standards/history/motion-sensors">History</a>
                        - <a href="https://w3c.github.io/motion-sensors/" title="Latest editor's draft of Motion Sensors Explainer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kenneth Christiansen
                            <li>Alexander Shalamov
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="shapes constraint language (shacl)" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-shacl-20170720/" title="Latest draft of Shapes Constraint Language (SHACL) formally approved by the group">Shapes Constraint Language (SHACL)</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-07-20 - <a title="Shapes Constraint Language (SHACL) publication history" href="/standards/history/shacl">History</a>
                        - <a href="https://w3c.github.io/data-shapes/shacl/" title="Latest editor's draft of Shapes Constraint Language (SHACL)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Holger Knublauch
                            <li>Dimitris Kontokostas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="shacl abstract syntax -- note on status of obsolete proposal" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-shacl-abstract-syntax-20170720/" title="Latest draft of SHACL Abstract Syntax -- Note on Status of Obsolete Proposal formally approved by the group">SHACL Abstract Syntax -- Note on Status of Obsolete Proposal</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-07-20 - <a title="SHACL Abstract Syntax -- Note on Status of Obsolete Proposal publication history" href="/standards/history/shacl-abstract-syntax">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Karen Coyle
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="shacl use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-shacl-ucr-20170720/" title="Latest draft of SHACL Use Cases and Requirements formally approved by the group">SHACL Use Cases and Requirements</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-07-20 - <a title="SHACL Use Cases and Requirements publication history" href="/standards/history/shacl-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Steyskal
                            <li>Karen Coyle
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="unicode in xml and other markup languages" data-tag="i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-unicode-xml-20170713/" title="Latest draft of Unicode in XML and other Markup Languages formally approved by the group">Unicode in XML and other Markup Languages</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2017-07-13 - <a title="Unicode in XML and other Markup Languages publication history" href="/standards/history/unicode-xml">History</a>
                        - <a href="https://w3c.github.io/unicode-xml/" title="Latest editor's draft of Unicode in XML and other Markup Languages">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="overview of the coveragejson format" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-covjson-overview-20170711/" title="Latest draft of Overview of the CoverageJSON format formally approved by the group">Overview of the CoverageJSON format</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-07-11 - <a title="Overview of the CoverageJSON format publication history" href="/standards/history/covjson-overview">History</a>
                        - <a href="https://w3c.github.io/sdw/coverage-json/" title="Latest editor's draft of Overview of the CoverageJSON format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jon Blower
                            <li>Maik Riechert
                            <li>Bill Roberts
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="geolocation api specification level 2" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-geolocation-API-v2-20170706/" title="Latest draft of Geolocation API Specification Level 2 formally approved by the group">Geolocation  API  Specification  Level&nbsp;2</a></h2>
                        <p class=deliverer>Geolocation Working Group</p>
                        <p class=pubdetails>2017-07-06 - <a title="Geolocation API Specification Level 2 publication history" href="/standards/history/geolocation-API-v2">History</a>
                        - <a href="https://dev.w3.org/geo/api/spec-source-v2.html" title="Latest editor's draft of Geolocation API Specification Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrei Popescu
                            <li>Stephen Block
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="findtext api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-findtext-20170620/" title="Latest draft of FindText API formally approved by the group">FindText API</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2017-06-20 - <a title="FindText API publication history" href="/standards/history/findtext">History</a>
                        - <a href="https://w3c.github.io/findtext/" title="Latest editor's draft of FindText API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery scripting extension 1.0 requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-xquery-sx-10-requirements-20170620/" title="Latest draft of XQuery Scripting Extension 1.0 Requirements formally approved by the group">XQuery Scripting Extension 1.0 Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-06-20 - <a title="XQuery Scripting Extension 1.0 Requirements publication history" href="/standards/history/xquery-sx-10-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Engovatov
                            <li>Daniela Florescu
                            <li>Giorgio Ghelli
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery scripting extension 1.0 use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-xquery-sx-10-use-cases-20170620/" title="Latest draft of XQuery Scripting Extension 1.0 Use Cases formally approved by the group">XQuery Scripting Extension 1.0 Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-06-20 - <a title="XQuery Scripting Extension 1.0 Use Cases publication history" href="/standards/history/xquery-sx-10-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Snelson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css overflow module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-css-overflow-4-20170613/" title="Latest draft of CSS Overflow Module Level 4 formally approved by the group">CSS  Overflow  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-06-13 - <a title="CSS Overflow Module Level 4 publication history" href="/standards/history/css-overflow-4">History</a>
                        - <a href="https://drafts.csswg.org/css-overflow-4/" title="Latest editor's draft of CSS Overflow Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="cloud browser architecture" data-tag="media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-cloud-browser-arch-20170608/" title="Latest draft of Cloud Browser Architecture formally approved by the group">Cloud Browser Architecture</a></h2>
                        <p class=deliverer>Media and Entertainment Interest Group</p>
                        <p class=pubdetails>2017-06-08 - <a title="Cloud Browser Architecture publication history" href="/standards/history/cloud-browser-arch">History</a>
                        - <a href="https://w3c.github.io/Web-and-TV-IG/cloud-browser-tf/" title="Latest editor's draft of Cloud Browser Architecture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Colin Meerveld
                            <li>Alexandra Mikityuk
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xsl transformations (xslt) version 3.0" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xslt-30-20170608/" title="Latest draft of XSL Transformations (XSLT) Version 3.0 formally approved by the group">XSL  Transformations  (XSLT)  Version&nbsp;3.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-06-08 - <a title="XSL Transformations (XSLT) Version 3.0 publication history" href="/standards/history/xslt-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="shacl advanced features" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-shacl-af-20170608/" title="Latest draft of SHACL Advanced Features formally approved by the group">SHACL Advanced Features</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-06-08 - <a title="SHACL Advanced Features publication history" href="/standards/history/shacl-af">History</a>
                        - <a href="https://w3c.github.io/data-shapes/shacl-af/" title="Latest editor's draft of SHACL Advanced Features">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Holger Knublauch
                            <li>Dean Allemang
                            <li>Simon Steyskal
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="shacl javascript extensions" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-shacl-js-20170608/" title="Latest draft of SHACL JavaScript Extensions formally approved by the group">SHACL JavaScript Extensions</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-06-08 - <a title="SHACL JavaScript Extensions publication history" href="/standards/history/shacl-js">History</a>
                        - <a href="https://w3c.github.io/data-shapes/shacl-js/" title="Latest editor's draft of SHACL JavaScript Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Holger Knublauch
                            <li>Pano Maria
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ui events keyboardevent code values" data-tag="dom webapi" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-uievents-code-20170601/" title="Latest draft of UI Events KeyboardEvent code Values formally approved by the group">UI Events KeyboardEvent code Values</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2017-06-01 - <a title="UI Events KeyboardEvent code Values publication history" href="/standards/history/uievents-code">History</a>
                        - <a href="https://w3c.github.io/uievents-code/" title="Latest editor's draft of UI Events KeyboardEvent code Values">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gary Kacmarcik
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ui events keyboardevent key values" data-tag="dom webapi" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-uievents-key-20170601/" title="Latest draft of UI Events KeyboardEvent key Values formally approved by the group">UI Events KeyboardEvent key Values</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2017-06-01 - <a title="UI Events KeyboardEvent key Values publication history" href="/standards/history/uievents-key">History</a>
                        - <a href="https://w3c.github.io/uievents-key/" title="Latest editor's draft of UI Events KeyboardEvent key Values">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gary Kacmarcik
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="geofencing api" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-geofencing-20170530/" title="Latest draft of Geofencing API formally approved by the group">Geofencing API</a></h2>
                        <p class=deliverer>Geolocation Working Group</p>
                        <p class=pubdetails>2017-05-30 - <a title="Geofencing API publication history" href="/standards/history/geofencing">History</a>
                        - <a href="https://w3c.github.io/geofencing-api/" title="Latest editor's draft of Geofencing API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marijn Kruisselbrink
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="activity streams 2.0" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-activitystreams-core-20170523/" title="Latest draft of Activity Streams 2.0 formally approved by the group">Activity  Streams&nbsp;2.0</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-05-23 - <a title="Activity Streams 2.0 publication history" href="/standards/history/activitystreams-core">History</a>
                        - <a href="https://w3c.github.io/activitystreams/core/" title="Latest editor's draft of Activity Streams 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Snell
                            <li>Evan Prodromou
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="activity vocabulary" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-activitystreams-vocabulary-20170523/" title="Latest draft of Activity Vocabulary formally approved by the group">Activity Vocabulary</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-05-23 - <a title="Activity Vocabulary publication history" href="/standards/history/activitystreams-vocabulary">History</a>
                        - <a href="https://w3c.github.io/activitystreams/vocabulary/" title="Latest editor's draft of Activity Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Snell
                            <li>Evan Prodromou
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="micropub" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-micropub-20170523/" title="Latest draft of Micropub formally approved by the group">Micropub</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-05-23 - <a title="Micropub publication history" href="/standards/history/micropub">History</a>
                        - <a href="https://micropub.net/draft/" title="Latest editor's draft of Micropub">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Parecki
                          </ul>
                                  </li>
                                                                                                                          <li data-title="tv control api specification" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-tvcontrol-api-20170518/" title="Latest draft of TV Control API Specification formally approved by the group">TV Control API Specification</a></h2>
                        <p class=deliverer>TV Control Working Group</p>
                        <p class=pubdetails>2017-05-18 - <a title="TV Control API Specification publication history" href="/standards/history/tvcontrol-api">History</a>
                        - <a href="https://w3c.github.io/tvcontrol-api/" title="Latest editor's draft of TV Control API Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Morris
                            <li>Sung Hei Kim
                            <li>Alexander Futász
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="linked data notifications" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-ldn-20170502/" title="Latest draft of Linked Data Notifications formally approved by the group">Linked Data Notifications</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-05-02 - <a title="Linked Data Notifications publication history" href="/standards/history/ldn">History</a>
                        - <a href="https://linkedresearch.org/ldn/" title="Latest editor's draft of Linked Data Notifications">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sarven Capadisli
                            <li>Amy Guy
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web publications for the open web platform: vision and technical challenges" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-pwp-20170502/" title="Latest draft of Web Publications for the Open Web Platform: Vision And Technical Challenges formally approved by the group">Web Publications for the Open Web Platform: Vision And Technical Challenges</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2017-05-02 - <a title="Web Publications for the Open Web Platform: Vision And Technical Challenges publication history" href="/standards/history/pwp">History</a>
                        - <a href="https://w3c.github.io/dpub-pwp/" title="Latest editor's draft of Web Publications for the Open Web Platform: Vision And Technical Challenges">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markus Gylling
                            <li>Ben De Meester
                            <li>Ivan Herman
                            <li>Tzviya Siegman
                            <li>Dave Cramer
                            <li>Leonard Rosenthol
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="media capture depth stream extensions" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-mediacapture-depth-20170418/" title="Latest draft of Media Capture Depth Stream Extensions formally approved by the group">Media Capture Depth Stream Extensions</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2017-04-18 - <a title="Media Capture Depth Stream Extensions publication history" href="/standards/history/mediacapture-depth">History</a>
                        - <a href="https://w3c.github.io/mediacapture-depth/" title="Latest editor's draft of Media Capture Depth Stream Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Ningxin Hu
                            <li>Aleksandar Stojiljkovic
                            <li>Rob Manson
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css image values and replaced content module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-css-images-4-20170413/" title="Latest draft of CSS Image Values and Replaced Content Module Level 4 formally approved by the group">CSS  Image  Values  and  Replaced  Content  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-04-13 - <a title="CSS Image Values and Replaced Content Module Level 4 publication history" href="/standards/history/css-images-4">History</a>
                        - <a href="https://drafts.csswg.org/css-images-4/" title="Latest editor's draft of CSS Image Values and Replaced Content Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Lea Verou
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css fill and stroke module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-fill-stroke-3-20170413/" title="Latest draft of CSS Fill and Stroke Module Level 3 formally approved by the group">CSS  Fill  and  Stroke  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-04-13 - <a title="CSS Fill and Stroke Module Level 3 publication history" href="/standards/history/fill-stroke-3">History</a>
                        - <a href="https://drafts.fxtf.org/fill-stroke/" title="Latest editor's draft of CSS Fill and Stroke Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="beacon" data-tag="performance" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-beacon-20170413/" title="Latest draft of Beacon formally approved by the group">Beacon</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-04-13 - <a title="Beacon publication history" href="/standards/history/beacon">History</a>
                        - <a href="https://w3c.github.io/beacon/" title="Latest editor's draft of Beacon">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                            <li>Alois Reitbauer
                            <li>Arvind Jain
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="resource timing level 1" data-tag="performance webapi" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-resource-timing-1-20170330/" title="Latest draft of Resource Timing Level 1 formally approved by the group">Resource  Timing  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-03-30 - <a title="Resource Timing Level 1 publication history" href="/standards/history/resource-timing-1">History</a>
                        - <a href="https://w3c.github.io/resource-timing/" title="Latest editor's draft of Resource Timing Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arvind Jain
                            <li>Todd Reifsteck
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                            <li>Anderson Quach
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="xquery and xpath data model 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xpath-datamodel-31-20170321/" title="Latest draft of XQuery and XPath Data Model 3.1 formally approved by the group">XQuery  and  XPath  Data  Model&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XQuery and XPath Data Model 3.1 publication history" href="/standards/history/xpath-datamodel-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>John Snelson
                            <li>Andrew Coleman
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                  <li data-title="xqueryx 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xqueryx-31-20170321/" title="Latest draft of XQueryX 3.1 formally approved by the group">XQueryX&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XQueryX 3.1 publication history" href="/standards/history/xqueryx-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Melton
                            <li>Josh Spiegel
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xpath and xquery functions and operators 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xpath-functions-31-20170321/" title="Latest draft of XPath and XQuery Functions and Operators 3.1 formally approved by the group">XPath  and  XQuery  Functions  and  Operators&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XPath and XQuery Functions and Operators 3.1 publication history" href="/standards/history/xpath-functions-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery 3.1: an xml query language" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xquery-31-20170321/" title="Latest draft of XQuery 3.1: An XML Query Language formally approved by the group">XQuery 3.1: An XML Query Language</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XQuery 3.1: An XML Query Language publication history" href="/standards/history/xquery-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Michael Dyck
                            <li>Josh Spiegel
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xml path language (xpath) 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xpath-31-20170321/" title="Latest draft of XML Path Language (XPath) 3.1 formally approved by the group">XML  Path  Language  (XPath)&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XML Path Language (XPath) 3.1 publication history" href="/standards/history/xpath-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Michael Dyck
                            <li>Josh Spiegel
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xslt and xquery serialization 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xslt-xquery-serialization-31-20170321/" title="Latest draft of XSLT and XQuery Serialization 3.1 formally approved by the group">XSLT  and  XQuery  Serialization&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XSLT and XQuery Serialization 3.1 publication history" href="/standards/history/xslt-xquery-serialization-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Coleman
                            <li>Michael Sperberg-McQueen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css rhythmic sizing" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-css-rhythm-1-20170302/" title="Latest draft of CSS Rhythmic Sizing formally approved by the group">CSS Rhythmic Sizing</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-03-02 - <a title="CSS Rhythmic Sizing publication history" href="/standards/history/css-rhythm-1">History</a>
                        - <a href="https://drafts.csswg.org/css-rhythm/" title="Latest editor's draft of CSS Rhythmic Sizing">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Koji Ishii
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="requirements for internationalization tag set (its) 2.0" data-tag="i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-its2req-20170302/" title="Latest draft of Requirements for Internationalization Tag Set (ITS) 2.0 formally approved by the group">Requirements  for  Internationalization  Tag  Set  (ITS)&nbsp;2.0</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2017-03-02 - <a title="Requirements for Internationalization Tag Set (ITS) 2.0 publication history" href="/standards/history/its2req">History</a>
                        - <a href="https://w3c.github.io/its2req/" title="Latest editor's draft of Requirements for Internationalization Tag Set (ITS) 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Lewis
                            <li>Arle Lommel
                            <li>Felix Sasaki
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="metadata for the multilingual web - usage scenarios and implementations" data-tag="data html i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-mlw-metadata-us-impl-20170302/" title="Latest draft of Metadata for the Multilingual Web - Usage Scenarios and Implementations formally approved by the group">Metadata for the Multilingual Web - Usage Scenarios and Implementations</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2017-03-02 - <a title="Metadata for the Multilingual Web - Usage Scenarios and Implementations publication history" href="/standards/history/mlw-metadata-us-impl">History</a>
                        - <a href="https://w3c.github.io/mlw-metadata-us-impl/" title="Latest editor's draft of Metadata for the Multilingual Web - Usage Scenarios and Implementations">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christian Lieske
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web annotation vocabulary" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-annotation-vocab-20170223/" title="Latest draft of Web Annotation Vocabulary formally approved by the group">Web Annotation Vocabulary</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Web Annotation Vocabulary publication history" href="/standards/history/annotation-vocab">History</a>
                        - <a href="https://w3c.github.io/web-annotation/" title="Latest editor's draft of Web Annotation Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Sanderson
                            <li>Paolo Ciccarese
                            <li>Benjamin Young
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="poe use cases and requirements" data-tag="data" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-poe-ucr-20170223/" title="Latest draft of POE Use Cases and Requirements formally approved by the group">POE Use Cases and Requirements</a></h2>
                        <p class=deliverer>Permissions and Obligations Expression Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="POE Use Cases and Requirements publication history" href="/standards/history/poe-ucr">History</a>
                        - <a href="https://w3c.github.io/poe/ucr/" title="Latest editor's draft of POE Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Steidl
                            <li>Simon Steyskal
                            <li>Benedict Whittam Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="selectors and states" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-selectors-states-20170223/" title="Latest draft of Selectors and States formally approved by the group">Selectors and States</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Selectors and States publication history" href="/standards/history/selectors-states">History</a>
                        - <a href="https://w3c.github.io/web-annotation/selector-note/" title="Latest editor's draft of Selectors and States">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ivan Herman
                            <li>Robert Sanderson
                            <li>Paolo Ciccarese
                            <li>Benjamin Young
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="embedding web annotations in html" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-annotation-html-20170223/" title="Latest draft of Embedding Web Annotations in HTML formally approved by the group">Embedding Web Annotations in HTML</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Embedding Web Annotations in HTML publication history" href="/standards/history/annotation-html">History</a>
                        - <a href="https://w3c.github.io/web-annotation/serialization-html-note/" title="Latest editor's draft of Embedding Web Annotations in HTML">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timothy Cole
                            <li>Sarven Capadisli
                            <li>Benjamin Young
                            <li>Ivan Herman
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web annotation data model" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/" title="Latest draft of Web Annotation Data Model formally approved by the group">Web Annotation Data Model</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Web Annotation Data Model publication history" href="/standards/history/annotation-model">History</a>
                        - <a href="https://w3c.github.io/web-annotation/" title="Latest editor's draft of Web Annotation Data Model">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Sanderson
                            <li>Paolo Ciccarese
                            <li>Benjamin Young
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web annotation protocol" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-annotation-protocol-20170223/" title="Latest draft of Web Annotation Protocol formally approved by the group">Web Annotation Protocol</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Web Annotation Protocol publication history" href="/standards/history/annotation-protocol">History</a>
                        - <a href="https://w3c.github.io/web-annotation/protocol/wd/" title="Latest editor's draft of Web Annotation Protocol">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Sanderson
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ready-made counter styles" data-tag="css i18n xml" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-predefined-counter-styles-20170216/" title="Latest draft of Ready-made Counter Styles formally approved by the group">Ready-made Counter Styles</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2017-02-16 - <a title="Ready-made Counter Styles publication history" href="/standards/history/predefined-counter-styles">History</a>
                        - <a href="https://w3c.github.io/predefined-counter-styles/" title="Latest editor's draft of Ready-made Counter Styles">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="http vocabulary in rdf 1.0" data-tag="accessibility http" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-HTTP-in-RDF10-20170202/" title="Latest draft of HTTP Vocabulary in RDF 1.0 formally approved by the group">HTTP  Vocabulary  in  RDF&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="HTTP Vocabulary in RDF 1.0 publication history" href="/standards/history/HTTP-in-RDF10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Koch
                            <li>Carlos A. Velasco
                            <li>Philip Ackermann
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="developer guide for evaluation and report language (earl) 1.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-EARL10-Guide-20170202/" title="Latest draft of Developer Guide for Evaluation and Report Language (EARL) 1.0 formally approved by the group">Developer  Guide  for  Evaluation  and  Report  Language  (EARL)&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Developer Guide for Evaluation and Report Language (EARL) 1.0 publication history" href="/standards/history/EARL10-Guide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Carlos A. Velasco
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="representing content in rdf 1.0" data-tag="accessibility http" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-Content-in-RDF10-20170202/" title="Latest draft of Representing Content in RDF 1.0 formally approved by the group">Representing  Content  in  RDF&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Representing Content in RDF 1.0 publication history" href="/standards/history/Content-in-RDF10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Koch
                            <li>Carlos A. Velasco
                            <li>Philip Ackermann
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="pointer methods in rdf 1.0" data-tag="accessibility" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-Pointers-in-RDF10-20170202/" title="Latest draft of Pointer Methods in RDF 1.0 formally approved by the group">Pointer  Methods  in  RDF&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Pointer Methods in RDF 1.0 publication history" href="/standards/history/Pointers-in-RDF10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Carlos Iglesias
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="requirements for the evaluation and report language (earl) 1.0" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-EARL10-Requirements-20170202/" title="Latest draft of Requirements for the Evaluation and Report Language (EARL) 1.0 formally approved by the group">Requirements  for  the  Evaluation  and  Report  Language  (EARL)&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Requirements for the Evaluation and Report Language (EARL) 1.0 publication history" href="/standards/history/EARL10-Requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Squillace
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="emma: extensible multimodal annotation markup language version 2.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-emma20-20170202/" title="Latest draft of EMMA: Extensible MultiModal Annotation markup language Version 2.0 formally approved by the group">EMMA:  Extensible  MultiModal  Annotation  markup  language  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="EMMA: Extensible MultiModal Annotation markup language Version 2.0 publication history" href="/standards/history/emma20">History</a>
                        - <a href="https://w3c.github.io/emma/emma2_0/emma_2_0_editor_draft.html" title="Latest editor's draft of EMMA: Extensible MultiModal Annotation markup language Version 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Johnston
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="evaluation and report language (earl) 1.0 schema" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-EARL10-Schema-20170202/" title="Latest draft of Evaluation and Report Language (EARL) 1.0 Schema formally approved by the group">Evaluation and Report Language (EARL) 1.0 Schema</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Evaluation and Report Language (EARL) 1.0 Schema publication history" href="/standards/history/EARL10-Schema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="discovery &amp; registration of multimodal modality components" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-mmi-mc-discovery-20170202/" title="Latest draft of Discovery &amp; Registration of Multimodal Modality Components formally approved by the group">Discovery & Registration of Multimodal Modality Components</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Discovery &amp; Registration of Multimodal Modality Components publication history" href="/standards/history/mmi-mc-discovery">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>B Helena RODRIGUEZ
                            <li>James Barnett
                            <li>Deborah Dahl
                            <li>Raj Tumuluri
                            <li>Nagesh Kharidi
                            <li>Kazuyuki Ashimura
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="developers&#039; guide to features of web accessibility evaluation tools" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-WAET-20170202/" title="Latest draft of Developers&#039; Guide to Features of Web Accessibility Evaluation Tools formally approved by the group">Developers' Guide to Features of Web Accessibility Evaluation Tools</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Developers&#039; Guide to Features of Web Accessibility Evaluation Tools publication history" href="/standards/history/WAET">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Carlos A. Velasco
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="data on the web best practices" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-dwbp-20170131/" title="Latest draft of Data on the Web Best Practices formally approved by the group">Data on the Web Best Practices</a></h2>
                        <p class=deliverer>Data on the Web Best Practices Working Group</p>
                        <p class=pubdetails>2017-01-31 - <a title="Data on the Web Best Practices publication history" href="/standards/history/dwbp">History</a>
                        - <a href="https://w3c.github.io/dwbp/bp.html" title="Latest editor's draft of Data on the Web Best Practices">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernadette Farias Loscio
                            <li>Caroline Burle
                            <li>Newton Calegari
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="css snapshot 2017" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-css-2017-20170131/" title="Latest draft of CSS Snapshot 2017 formally approved by the group">CSS Snapshot 2017</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-01-31 - <a title="CSS Snapshot 2017 publication history" href="/standards/history/css-2017">History</a>
                        - <a href="https://drafts.csswg.org/css-2017/" title="Latest editor's draft of CSS Snapshot 2017">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web cryptography api" data-tag="security webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-WebCryptoAPI-20170126/" title="Latest draft of Web Cryptography API formally approved by the group">Web Cryptography API</a></h2>
                        <p class=deliverer>Web Cryptography Working Group</p>
                        <p class=pubdetails>2017-01-26 - <a title="Web Cryptography API publication history" href="/standards/history/WebCryptoAPI">History</a>
                        - <a href="https://w3c.github.io/webcrypto/" title="Latest editor's draft of Web Cryptography API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Watson
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="referrer policy" data-tag="security" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-referrer-policy-20170126/" title="Latest draft of Referrer Policy formally approved by the group">Referrer Policy</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2017-01-26 - <a title="Referrer Policy publication history" href="/standards/history/referrer-policy">History</a>
                        - <a href="https://w3c.github.io/webappsec-referrer-policy/" title="Latest editor's draft of Referrer Policy">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jochen Eisinger
                            <li>Emily Stark
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="xquery update facility 3.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-xquery-update-30-20170124/" title="Latest draft of XQuery Update Facility 3.0 formally approved by the group">XQuery  Update  Facility&nbsp;3.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-01-24 - <a title="XQuery Update Facility 3.0 publication history" href="/standards/history/xquery-update-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Snelson
                            <li>Jim Melton
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery update facility 3.0 requirements and use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-xquery-update-30-requirements-use-cases-20170124/" title="Latest draft of XQuery Update Facility 3.0 Requirements and Use Cases formally approved by the group">XQuery Update Facility 3.0 Requirements and Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-01-24 - <a title="XQuery Update Facility 3.0 Requirements and Use Cases publication history" href="/standards/history/xquery-update-30-requirements-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Coleman
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webmention" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-webmention-20170112/" title="Latest draft of Webmention formally approved by the group">Webmention</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-01-12 - <a title="Webmention publication history" href="/standards/history/webmention">History</a>
                        - <a href="https://webmention.net/draft/" title="Latest editor's draft of Webmention">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Parecki
                          </ul>
                                  </li>
                                                                                                                          <li data-title="network service discovery" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-discovery-api-20170112/" title="Latest draft of Network Service Discovery formally approved by the group">Network Service Discovery</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2017-01-12 - <a title="Network Service Discovery publication history" href="/standards/history/discovery-api">History</a>
                        - <a href="https://dvcs.w3.org/hg/dap/raw-file/tip/discovery-api/Overview.html" title="Latest editor's draft of Network Service Discovery">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rich Tibbett
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css round display level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-css-round-display-1-20161222/" title="Latest draft of CSS Round Display Level 1 formally approved by the group">CSS  Round  Display  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-12-22 - <a title="CSS Round Display Level 1 publication history" href="/standards/history/css-round-display-1">History</a>
                        - <a href="https://drafts.csswg.org/css-round-display/" title="Latest editor's draft of CSS Round Display Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jihye Hong
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="webidl level 1" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-WebIDL-1-20161215/" title="Latest draft of WebIDL Level 1 formally approved by the group">WebIDL  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-12-15 - <a title="WebIDL Level 1 publication history" href="/standards/history/WebIDL-1">History</a>
                        - <a href="https://heycam.github.io/webidl/" title="Latest editor's draft of WebIDL Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="content security policy level 2" data-tag="security" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-CSP2-20161215/" title="Latest draft of Content Security Policy Level 2 formally approved by the group">Content  Security  Policy  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-12-15 - <a title="Content Security Policy Level 2 publication history" href="/standards/history/CSP2">History</a>
                        - <a href="https://w3c.github.io/webappsec-csp/" title="Latest editor's draft of Content Security Policy Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                            <li>Adam Barth
                            <li>Daniel Veditz
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="data on the web best practices: data quality vocabulary" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-vocab-dqv-20161215/" title="Latest draft of Data on the Web Best Practices: Data Quality Vocabulary formally approved by the group">Data on the Web Best Practices: Data Quality Vocabulary</a></h2>
                        <p class=deliverer>Data on the Web Best Practices Working Group</p>
                        <p class=pubdetails>2016-12-15 - <a title="Data on the Web Best Practices: Data Quality Vocabulary publication history" href="/standards/history/vocab-dqv">History</a>
                        - <a href="https://w3c.github.io/dwbp/vocab-dqg.html" title="Latest editor's draft of Data on the Web Best Practices: Data Quality Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Riccardo Albertoni
                            <li>Antoine Isaac
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="data on the web best practices: dataset usage vocabulary" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-vocab-duv-20161215/" title="Latest draft of Data on the Web Best Practices: Dataset Usage Vocabulary formally approved by the group">Data on the Web Best Practices: Dataset Usage Vocabulary</a></h2>
                        <p class=deliverer>Data on the Web Best Practices Working Group</p>
                        <p class=pubdetails>2016-12-15 - <a title="Data on the Web Best Practices: Dataset Usage Vocabulary publication history" href="/standards/history/vocab-duv">History</a>
                        - <a href="https://w3c.github.io/dwbp/vocab-du.html" title="Latest editor's draft of Data on the Web Best Practices: Dataset Usage Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernadette Farias Loscio
                            <li>Eric Stephan
                            <li>Sumit Purohit
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery 3.1 requirements and use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-xquery-31-requirements-20161213/" title="Latest draft of XQuery 3.1 Requirements and Use Cases formally approved by the group">XQuery 3.1 Requirements and Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2016-12-13 - <a title="XQuery 3.1 Requirements and Use Cases publication history" href="/standards/history/xquery-31-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="url" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-url-1-20161206/" title="Latest draft of URL formally approved by the group">URL</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-12-06 - <a title="URL publication history" href="/standards/history/url-1">History</a>
                        - <a href="https://url.spec.whatwg.org/" title="Latest editor's draft of URL">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Sam Ruby
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="streams api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-streams-api-20161129/" title="Latest draft of Streams API formally approved by the group">Streams API</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-11-29 - <a title="Streams API publication history" href="/standards/history/streams-api">History</a>
                        - <a href="https://streams.spec.whatwg.org/" title="Latest editor's draft of Streams API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Feras Moussa
                            <li>Takeshi Yoshino
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media source extensions™" data-tag="html webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-media-source-20161117/" title="Latest draft of Media Source Extensions™ formally approved by the group">Media Source Extensions™</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-11-17 - <a title="Media Source Extensions™ publication history" href="/standards/history/media-source">History</a>
                        - <a href="https://w3c.github.io/media-source/" title="Latest editor's draft of Media Source Extensions™">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Mark Watson
                            <li>Aaron Colwell
                            <li>Adrian Bateman
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="geolocation api specification 2nd edition" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-geolocation-API-20161108/" title="Latest draft of Geolocation API Specification 2nd Edition formally approved by the group">Geolocation API Specification 2nd Edition</a></h2>
                        <p class=deliverer>Geolocation Working Group</p>
                        <p class=pubdetails>2016-11-08 - <a title="Geolocation API Specification 2nd Edition publication history" href="/standards/history/geolocation-API">History</a>
                        - <a href="https://w3c.github.io/geolocation-api/" title="Latest editor's draft of Geolocation API Specification 2nd Edition">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrei Popescu
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="pointer lock" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-pointerlock-20161027/" title="Latest draft of Pointer Lock formally approved by the group">Pointer Lock</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-10-27 - <a title="Pointer Lock publication history" href="/standards/history/pointerlock">History</a>
                        - <a href="https://w3c.github.io/pointerlock/" title="Latest editor's draft of Pointer Lock">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Vincent Scheib
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="spatial data on the web use cases &amp; requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-sdw-ucr-20161025/" title="Latest draft of Spatial Data on the Web Use Cases &amp; Requirements formally approved by the group">Spatial Data on the Web Use Cases & Requirements</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2016-10-25 - <a title="Spatial Data on the Web Use Cases &amp; Requirements publication history" href="/standards/history/sdw-ucr">History</a>
                        - <a href="https://w3c.github.io/sdw/UseCases/SDWUseCasesAndRequirements.html" title="Latest editor's draft of Spatial Data on the Web Use Cases &amp; Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frans Knibbe
                            <li>Alejandro Llaves
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="vibration api (second edition)" data-tag="webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-vibration-20161018/" title="Latest draft of Vibration API (Second Edition) formally approved by the group">Vibration API (Second Edition)</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2016-10-18 - <a title="Vibration API (Second Edition) publication history" href="/standards/history/vibration">History</a>
                        - <a href="https://w3c.github.io/vibration/" title="Latest editor's draft of Vibration API (Second Edition)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="web payments overview 1.0" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-webpayments-overview-20161013/" title="Latest draft of Web Payments Overview 1.0 formally approved by the group">Web  Payments  Overview&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2016-10-13 - <a title="Web Payments Overview 1.0 publication history" href="/standards/history/webpayments-overview">History</a>
                        - <a href="https://w3c.github.io/webpayments-overview/" title="Latest editor's draft of Web Payments Overview 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Adrian Hope-Bailie
                            <li>Nick Telford-Reed
                            <li>Roy McElmurry
                            <li>Dapeng Liu
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="techniques for wcag 2.0" data-tag="accessibility" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/" title="Latest draft of Techniques for WCAG 2.0 formally approved by the group">Techniques  for  WCAG&nbsp;2.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2016-10-07 - <a title="Techniques for WCAG 2.0 publication history" href="/standards/history/WCAG20-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                            <li>Andrew Kirkpatrick
                            <li>Joshue O Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="understanding wcag 2.0" data-tag="accessibility" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-UNDERSTANDING-WCAG20-20161007/" title="Latest draft of Understanding WCAG 2.0 formally approved by the group">Understanding  WCAG&nbsp;2.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2016-10-07 - <a title="Understanding WCAG 2.0 publication history" href="/standards/history/UNDERSTANDING-WCAG20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                            <li>Andrew Kirkpatrick
                            <li>Joshue O Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="xmlhttprequest level 1" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-XMLHttpRequest-20161006/" title="Latest draft of XMLHttpRequest Level 1 formally approved by the group">XMLHttpRequest  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-10-06 - <a title="XMLHttpRequest Level 1 publication history" href="/standards/history/XMLHttpRequest">History</a>
                        - <a href="https://xhr.spec.whatwg.org/" title="Latest editor's draft of XMLHttpRequest Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Julian Aubourg
                            <li>Jungkee Song
                            <li>Hallvord Steen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media source extensions byte stream format registry" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-registry-20161004/" title="Latest draft of Media Source Extensions Byte Stream Format Registry formally approved by the group">Media Source Extensions Byte Stream Format Registry</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="Media Source Extensions Byte Stream Format Registry publication history" href="/standards/history/mse-byte-stream-format-registry">History</a>
                        - <a href="https://w3c.github.io/media-source/byte-stream-format-registry.html" title="Latest editor's draft of Media Source Extensions Byte Stream Format Registry">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Aaron Colwell
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webm byte stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-webm-20161004/" title="Latest draft of WebM Byte Stream Format formally approved by the group">WebM Byte Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="WebM Byte Stream Format publication history" href="/standards/history/mse-byte-stream-format-webm">History</a>
                        - <a href="https://w3c.github.io/media-source/webm-byte-stream-format.html" title="Latest editor's draft of WebM Byte Stream Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Aaron Colwell
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="iso bmff byte stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-isobmff-20161004/" title="Latest draft of ISO BMFF Byte Stream Format formally approved by the group">ISO BMFF Byte Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="ISO BMFF Byte Stream Format publication history" href="/standards/history/mse-byte-stream-format-isobmff">History</a>
                        - <a href="https://w3c.github.io/media-source/isobmff-byte-stream-format.html" title="Latest editor's draft of ISO BMFF Byte Stream Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Mark Watson
                            <li>Aaron Colwell
                            <li>Adrian Bateman
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mpeg-2 ts byte stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-mp2t-20161004/" title="Latest draft of MPEG-2 TS Byte Stream Format formally approved by the group">MPEG-2 TS Byte Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="MPEG-2 TS Byte Stream Format publication history" href="/standards/history/mse-byte-stream-format-mp2t">History</a>
                        - <a href="https://w3c.github.io/media-source/mp2t-byte-stream-format.html" title="Latest editor's draft of MPEG-2 TS Byte Stream Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Mark Watson
                            <li>Aaron Colwell
                            <li>Adrian Bateman
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mpeg audio byte stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-mpeg-audio-20161004/" title="Latest draft of MPEG Audio Byte Stream Format formally approved by the group">MPEG Audio Byte Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="MPEG Audio Byte Stream Format publication history" href="/standards/history/mse-byte-stream-format-mpeg-audio">History</a>
                        - <a href="https://w3c.github.io/media-source/mpeg-audio-byte-stream-format.html" title="Latest editor's draft of MPEG Audio Byte Stream Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Aaron Colwell
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="secure contexts" data-tag="security" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2016/CR-secure-contexts-20160915/" title="Latest draft of Secure Contexts formally approved by the group">Secure Contexts</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="Secure Contexts publication history" href="/standards/history/secure-contexts">History</a>
                        - <a href="https://w3c.github.io/webappsec-secure-contexts/" title="Latest editor's draft of Secure Contexts">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="&quot;cenc&quot; initialization data format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-initdata-cenc-20160915/" title="Latest draft of &quot;cenc&quot; Initialization Data Format formally approved by the group">"cenc" Initialization Data Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="&quot;cenc&quot; Initialization Data Format publication history" href="/standards/history/eme-initdata-cenc">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/initdata/cenc.html" title="Latest editor's draft of &quot;cenc&quot; Initialization Data Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="iso common encryption (&#039;cenc&#039;) protection scheme for iso base media file format stream format" data-tag="html webapi" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-stream-mp4-20160915/" title="Latest draft of ISO Common Encryption (&#039;cenc&#039;) Protection Scheme for ISO Base Media File Format Stream Format formally approved by the group">ISO Common Encryption ('cenc') Protection Scheme for ISO Base Media File Format Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="ISO Common Encryption (&#039;cenc&#039;) Protection Scheme for ISO Base Media File Format Stream Format publication history" href="/standards/history/eme-stream-mp4">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/stream/mp4.html" title="Latest editor's draft of ISO Common Encryption (&#039;cenc&#039;) Protection Scheme for ISO Base Media File Format Stream Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="&quot;keyids&quot; initialization data format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-initdata-keyids-20160915/" title="Latest draft of &quot;keyids&quot; Initialization Data Format formally approved by the group">"keyids" Initialization Data Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="&quot;keyids&quot; Initialization Data Format publication history" href="/standards/history/eme-initdata-keyids">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/initdata/keyids.html" title="Latest editor's draft of &quot;keyids&quot; Initialization Data Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="encrypted media extensions initialization data format registry" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-initdata-registry-20160915/" title="Latest draft of Encrypted Media Extensions Initialization Data Format Registry formally approved by the group">Encrypted Media Extensions Initialization Data Format Registry</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="Encrypted Media Extensions Initialization Data Format Registry publication history" href="/standards/history/eme-initdata-registry">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/initdata/" title="Latest editor's draft of Encrypted Media Extensions Initialization Data Format Registry">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="&quot;webm&quot; initialization data format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-initdata-webm-20160915/" title="Latest draft of &quot;webm&quot; Initialization Data Format formally approved by the group">"webm" Initialization Data Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="&quot;webm&quot; Initialization Data Format publication history" href="/standards/history/eme-initdata-webm">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/initdata/webm.html" title="Latest editor's draft of &quot;webm&quot; Initialization Data Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="encrypted media extensions stream format registry" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-stream-registry-20160915/" title="Latest draft of Encrypted Media Extensions Stream Format Registry formally approved by the group">Encrypted Media Extensions Stream Format Registry</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="Encrypted Media Extensions Stream Format Registry publication history" href="/standards/history/eme-stream-registry">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/stream/" title="Latest editor's draft of Encrypted Media Extensions Stream Format Registry">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webm stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-stream-webm-20160915/" title="Latest draft of WebM Stream Format formally approved by the group">WebM Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="WebM Stream Format publication history" href="/standards/history/eme-stream-webm">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/stream/webm.html" title="Latest editor's draft of WebM Stream Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="content security policy pinning" data-tag="security" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-csp-pinning-20160913/" title="Latest draft of Content Security Policy Pinning formally approved by the group">Content Security Policy Pinning</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-13 - <a title="Content Security Policy Pinning publication history" href="/standards/history/csp-pinning">History</a>
                        - <a href="https://w3c.github.io/webappsec-csp/pinning/" title="Latest editor's draft of Content Security Policy Pinning">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="content security policy: cookie controls" data-tag="security" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-csp-cookies-20160913/" title="Latest draft of Content Security Policy: Cookie Controls formally approved by the group">Content Security Policy: Cookie Controls</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-13 - <a title="Content Security Policy: Cookie Controls publication history" href="/standards/history/csp-cookies">History</a>
                        - <a href="https://w3c.github.io/webappsec-csp/cookies/" title="Latest editor's draft of Content Security Policy: Cookie Controls">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="entry point regulation" data-tag="security" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-epr-20160913/" title="Latest draft of Entry Point Regulation formally approved by the group">Entry Point Regulation</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-13 - <a title="Entry Point Regulation publication history" href="/standards/history/epr">History</a>
                        - <a href="https://w3c.github.io/webappsec-epr/" title="Latest editor's draft of Entry Point Regulation">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="content security policy: embedded enforcement" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-csp-embedded-enforcement-20160909/" title="Latest draft of Content Security Policy: Embedded Enforcement formally approved by the group">Content Security Policy: Embedded Enforcement</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-09 - <a title="Content Security Policy: Embedded Enforcement publication history" href="/standards/history/csp-embedded-enforcement">History</a>
                        - <a href="https://w3c.github.io/webappsec-cspee/" title="Latest editor's draft of Content Security Policy: Embedded Enforcement">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mixed content" data-tag="security" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2016/CR-mixed-content-20160802/" title="Latest draft of Mixed Content formally approved by the group">Mixed Content</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-08-02 - <a title="Mixed Content publication history" href="/standards/history/mixed-content">History</a>
                        - <a href="https://w3c.github.io/webappsec-mixed-content/" title="Latest editor's draft of Mixed Content">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xproc 2.0: standard step library" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-xproc20-steps-20160721/" title="Latest draft of XProc 2.0: Standard Step Library formally approved by the group">XProc 2.0: Standard Step Library</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2016-07-21 - <a title="XProc 2.0: Standard Step Library publication history" href="/standards/history/xproc20-steps">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>Alex Miłowski
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml inclusions (xinclude) version 1.1" data-tag="xml" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-xinclude-11-20160721/" title="Latest draft of XML Inclusions (XInclude) Version 1.1 formally approved by the group">XML  Inclusions  (XInclude)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2016-07-21 - <a title="XML Inclusions (XInclude) Version 1.1 publication history" href="/standards/history/xinclude-11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                            <li>David Orchard
                            <li>Daniel Veillard
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xproc 2.0: an xml pipeline language" data-tag="xml" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-xproc20-20160721/" title="Latest draft of XProc 2.0: An XML Pipeline Language formally approved by the group">XProc 2.0: An XML Pipeline Language</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2016-07-21 - <a title="XProc 2.0: An XML Pipeline Language publication history" href="/standards/history/xproc20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>Alex Miłowski
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="frame timing" data-tag="performance webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-frame-timing-20160720/" title="Latest draft of Frame Timing formally approved by the group">Frame Timing</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2016-07-20 - <a title="Frame Timing publication history" href="/standards/history/frame-timing">History</a>
                        - <a href="https://wicg.github.io/frame-timing/" title="Latest editor's draft of Frame Timing">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="wai-aria 1.0 primer" data-tag="accessibility" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/WD-wai-aria-primer-20160714/" title="Latest draft of WAI-ARIA 1.0 Primer formally approved by the group">WAI-ARIA 1.0 Primer</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2016-07-14 - <a title="WAI-ARIA 1.0 Primer publication history" href="/standards/history/wai-aria-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Pappas
                            <li>Richard Schwerdtfeger
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="wai-aria 1.0 authoring practices" data-tag="accessibility" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/WD-wai-aria-practices-20160714/" title="Latest draft of WAI-ARIA 1.0 Authoring Practices formally approved by the group">WAI-ARIA 1.0 Authoring Practices</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2016-07-14 - <a title="WAI-ARIA 1.0 Authoring Practices publication history" href="/standards/history/wai-aria-practices">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Scheuhammer
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="battery status api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2016/CR-battery-status-20160707/" title="Latest draft of Battery Status API formally approved by the group">Battery Status API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2016-07-07 - <a title="Battery Status API publication history" href="/standards/history/battery-status">History</a>
                        - <a href="https://w3c.github.io/battery/" title="Latest editor's draft of Battery Status API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Mounir Lamouri
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="subresource integrity" data-tag="security" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-SRI-20160623/" title="Latest draft of Subresource Integrity formally approved by the group">Subresource Integrity</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-06-23 - <a title="Subresource Integrity publication history" href="/standards/history/SRI">History</a>
                        - <a href="https://w3c.github.io/webappsec-subresource-integrity/" title="Latest editor's draft of Subresource Integrity">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Devdatta Akhawe
                            <li>Frederik Braun
                            <li>Francois Marier
                            <li>Joel Weinberger
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                <li data-title="user interface security and the visibility api" data-tag="security" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-UISecurity-20160607/" title="Latest draft of User Interface Security and the Visibility API formally approved by the group">User Interface Security and the Visibility API</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-06-07 - <a title="User Interface Security and the Visibility API publication history" href="/standards/history/UISecurity">History</a>
                        - <a href="https://w3c.github.io/webappsec-uisecurity/index.html" title="Latest editor's draft of User Interface Security and the Visibility API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brad Hill
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="input method editor api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-ime-api-20160524/" title="Latest draft of Input Method Editor API formally approved by the group">Input Method Editor API</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-05-24 - <a title="Input Method Editor API publication history" href="/standards/history/ime-api">History</a>
                        - <a href="https://w3c.github.io/ime-api/" title="Latest editor's draft of Input Method Editor API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="quota management api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-quota-api-20160523/" title="Latest draft of Quota Management API formally approved by the group">Quota Management API</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-05-23 - <a title="Quota Management API publication history" href="/standards/history/quota-api">History</a>
                        - <a href="https://w3c.github.io/quota-api/" title="Latest editor's draft of Quota Management API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kinuko Yasuda
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="dom parsing and serialization" data-tag="dom" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-DOM-Parsing-20160517/" title="Latest draft of DOM Parsing and Serialization formally approved by the group">DOM Parsing and Serialization</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-05-17 - <a title="DOM Parsing and Serialization publication history" href="/standards/history/DOM-Parsing">History</a>
                        - <a href="https://w3c.github.io/DOM-Parsing/" title="Latest editor's draft of DOM Parsing and Serialization">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="digital publishing and accessibility in w3c documents" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-dpub-accessibility-20160503/" title="Latest draft of Digital Publishing and Accessibility in W3C Documents formally approved by the group">Digital Publishing and Accessibility in W3C Documents</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2016-05-03 - <a title="Digital Publishing and Accessibility in W3C Documents publication history" href="/standards/history/dpub-accessibility">History</a>
                        - <a href="https://w3c.github.io/dpub-accessibility/" title="Latest editor's draft of Digital Publishing and Accessibility in W3C Documents">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deborah Kaplan
                            <li>Charles LaPierre
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="cascading style sheets level 2 revision 2 (css 2.2) specification" data-tag="css" data-status="wd" data-version="ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-CSS22-20160412/" title="Latest draft of Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification formally approved by the group">Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-04-12 - <a title="Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification publication history" href="/standards/history/CSS22">History</a>
                        - <a href="https://drafts.csswg.org/css2/" title="Latest editor's draft of Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="webcrypto key discovery" data-tag="security" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-webcrypto-key-discovery-20160329/" title="Latest draft of WebCrypto Key Discovery formally approved by the group">WebCrypto Key Discovery</a></h2>
                        <p class=deliverer>Web Cryptography Working Group</p>
                        <p class=pubdetails>2016-03-29 - <a title="WebCrypto Key Discovery publication history" href="/standards/history/webcrypto-key-discovery">History</a>
                        - <a href="https://dvcs.w3.org/hg/webcrypto-keydiscovery/raw-file/tip/Overview.html" title="Latest editor's draft of WebCrypto Key Discovery">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Watson
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css device adaptation module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-css-device-adapt-1-20160329/" title="Latest draft of CSS Device Adaptation Module Level 1 formally approved by the group">CSS  Device  Adaptation  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-03-29 - <a title="CSS Device Adaptation Module Level 1 publication history" href="/standards/history/css-device-adapt-1">History</a>
                        - <a href="https://drafts.csswg.org/css-device-adapt/" title="Latest editor's draft of CSS Device Adaptation Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rune Lillesveen
                            <li>Florian Rivoal
                            <li>Matt Rakow
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css object model (cssom)" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-cssom-1-20160317/" title="Latest draft of CSS Object Model (CSSOM) formally approved by the group">CSS Object Model (CSSOM)</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-03-17 - <a title="CSS Object Model (CSSOM) publication history" href="/standards/history/cssom-1">History</a>
                        - <a href="https://drafts.csswg.org/cssom/" title="Latest editor's draft of CSS Object Model (CSSOM)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Pieters
                            <li>Glenn Adams
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="cssom view module" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/" title="Latest draft of CSSOM View Module formally approved by the group">CSSOM View Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-03-17 - <a title="CSSOM View Module publication history" href="/standards/history/cssom-view-1">History</a>
                        - <a href="https://drafts.csswg.org/cssom-view/" title="Latest editor's draft of CSSOM View Module">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Pieters
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="accessibility requirements for people with low vision" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-low-vision-needs-20160317/" title="Latest draft of Accessibility Requirements for People with Low Vision formally approved by the group">Accessibility Requirements for People with Low Vision</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2016-03-17 - <a title="Accessibility Requirements for People with Low Vision publication history" href="/standards/history/low-vision-needs">History</a>
                        - <a href="https://w3c.github.io/low-vision-a11y-tf/requirements.html" title="Latest editor's draft of Accessibility Requirements for People with Low Vision">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Allan
                            <li>Andrew Kirkpatrick
                            <li>Shawn Lawton Henry (TAdER)
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="woff 2.0 evaluation report" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-WOFF20ER-20160315/" title="Latest draft of WOFF 2.0 Evaluation Report formally approved by the group">WOFF 2.0 Evaluation Report</a></h2>
                        <p class=deliverer>Web Fonts Working Group</p>
                        <p class=pubdetails>2016-03-15 - <a title="WOFF 2.0 Evaluation Report publication history" href="/standards/history/WOFF20ER">History</a>
                        - <a href="https://www.w3.org/Fonts/WG/WOFF2ER/" title="Latest editor's draft of WOFF 2.0 Evaluation Report">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="csv on the web: use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-csvw-ucr-20160225/" title="Latest draft of CSV on the Web: Use Cases and Requirements formally approved by the group">CSV on the Web: Use Cases and Requirements</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2016-02-25 - <a title="CSV on the Web: Use Cases and Requirements publication history" href="/standards/history/csvw-ucr">History</a>
                        - <a href="https://w3c.github.io/csvw/use-cases-and-requirements/" title="Latest editor's draft of CSV on the Web: Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Tandy
                            <li>Davide Ceolin
                            <li>Eric Stephan
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="html imports" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-html-imports-20160225/" title="Latest draft of HTML Imports formally approved by the group">HTML Imports</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-02-25 - <a title="HTML Imports publication history" href="/standards/history/html-imports">History</a>
                        - <a href="https://w3c.github.io/webcomponents/spec/imports/" title="Latest editor's draft of HTML Imports">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dimitri Glazkov
                            <li>Hajime Morita
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="csv on the web: a primer" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-tabular-data-primer-20160225/" title="Latest draft of CSV on the Web: A Primer formally approved by the group">CSV on the Web: A Primer</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2016-02-25 - <a title="CSV on the Web: A Primer publication history" href="/standards/history/tabular-data-primer">History</a>
                        - <a href="https://w3c.github.io/csvw/primer/" title="Latest editor's draft of CSV on the Web: A Primer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="embedding tabular metadata in html" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-csvw-html-20160225/" title="Latest draft of Embedding Tabular Metadata in HTML formally approved by the group">Embedding Tabular Metadata in HTML</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2016-02-25 - <a title="Embedding Tabular Metadata in HTML publication history" href="/standards/history/csvw-html">History</a>
                        - <a href="https://w3c.github.io/csvw/html-note/" title="Latest editor's draft of Embedding Tabular Metadata in HTML">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for wcag 2.0 extensions" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-wcag2-ext-req-20160105/" title="Latest draft of Requirements for WCAG 2.0 Extensions formally approved by the group">Requirements for WCAG 2.0 Extensions</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2016-01-05 - <a title="Requirements for WCAG 2.0 Extensions publication history" href="/standards/history/wcag2-ext-req">History</a>
                        - <a href="https://w3c.github.io/wcag/wcag20/extensions/requirements.html" title="Latest editor's draft of Requirements for WCAG 2.0 Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                            <li>Andrew Kirkpatrick
                            <li>Joshue O Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="model for tabular data and metadata on the web" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/" title="Latest draft of Model for Tabular Data and Metadata on the Web formally approved by the group">Model for Tabular Data and Metadata on the Web</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2015-12-17 - <a title="Model for Tabular Data and Metadata on the Web publication history" href="/standards/history/tabular-data-model">History</a>
                        - <a href="https://w3c.github.io/csvw/syntax/" title="Latest editor's draft of Model for Tabular Data and Metadata on the Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="generating json from tabular data on the web" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-csv2json-20151217/" title="Latest draft of Generating JSON from Tabular Data on the Web formally approved by the group">Generating JSON from Tabular Data on the Web</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2015-12-17 - <a title="Generating JSON from Tabular Data on the Web publication history" href="/standards/history/csv2json">History</a>
                        - <a href="https://w3c.github.io/csvw/csv2json/" title="Latest editor's draft of Generating JSON from Tabular Data on the Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Tandy
                            <li>Ivan Herman
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="metadata vocabulary for tabular data" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/" title="Latest draft of Metadata Vocabulary for Tabular Data formally approved by the group">Metadata Vocabulary for Tabular Data</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2015-12-17 - <a title="Metadata Vocabulary for Tabular Data publication history" href="/standards/history/tabular-metadata">History</a>
                        - <a href="https://w3c.github.io/csvw/metadata/" title="Latest editor's draft of Metadata Vocabulary for Tabular Data">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="generating rdf from tabular data on the web" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-csv2rdf-20151217/" title="Latest draft of Generating RDF from Tabular Data on the Web formally approved by the group">Generating RDF from Tabular Data on the Web</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2015-12-17 - <a title="Generating RDF from Tabular Data on the Web publication history" href="/standards/history/csv2rdf">History</a>
                        - <a href="https://w3c.github.io/csvw/csv2rdf/" title="Latest editor's draft of Generating RDF from Tabular Data on the Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Tandy
                            <li>Ivan Herman
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="uaag 2.0 reference: explanations, examples, and resources for user agent accessibility guidelines 2.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-UAAG20-Reference-20151215/" title="Latest draft of UAAG 2.0 Reference: Explanations, Examples, and Resources for User Agent Accessibility Guidelines 2.0 formally approved by the group">UAAG  2.0  Reference:  Explanations,  Examples,  and  Resources  for  User  Agent  Accessibility  Guidelines&nbsp;2.0</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-12-15 - <a title="UAAG 2.0 Reference: Explanations, Examples, and Resources for User Agent Accessibility Guidelines 2.0 publication history" href="/standards/history/UAAG20-Reference">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Allan
                            <li>Greg Lowney
                            <li>Kimberly Patch
                            <li>Jeanne F Spellman
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="user agent accessibility guidelines (uaag) 2.0" data-tag="accessibility" data-status="note" data-version="upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-UAAG20-20151215/" title="Latest draft of User Agent Accessibility Guidelines (UAAG) 2.0 formally approved by the group">User  Agent  Accessibility  Guidelines  (UAAG)&nbsp;2.0</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-12-15 - <a title="User Agent Accessibility Guidelines (UAAG) 2.0 publication history" href="/standards/history/UAAG20">History</a>
                        - <a href="https://www.w3.org/TR/2015/NOTE-UAAG20-20151215/" title="Latest editor's draft of User Agent Accessibility Guidelines (UAAG) 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Allan
                            <li>Greg Lowney
                            <li>Kimberly Patch
                            <li>Jeanne F Spellman
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery and xpath full text 3.0 requirements and use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-xpath-full-text-30-requirements-use-cases-20151210/" title="Latest draft of XQuery and XPath Full Text 3.0 Requirements and Use Cases formally approved by the group">XQuery and XPath Full Text 3.0 Requirements and Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2015-12-10 - <a title="XQuery and XPath Full Text 3.0 Requirements and Use Cases publication history" href="/standards/history/xpath-full-text-30-requirements-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pat Case
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media accessibility user requirements" data-tag="accessibility html media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-media-accessibility-reqs-20151203/" title="Latest draft of Media Accessibility User Requirements formally approved by the group">Media Accessibility User Requirements</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2015-12-03 - <a title="Media Accessibility User Requirements publication history" href="/standards/history/media-accessibility-reqs">History</a>
                        - <a href="https://w3c.github.io/pfwg/media-accessibility-reqs/" title="Latest editor's draft of Media Accessibility User Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Michael Cooper
                            <li>Mark Sadecki
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css custom properties for cascading variables module level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2015/CR-css-variables-1-20151203/" title="Latest draft of CSS Custom Properties for Cascading Variables Module Level 1 formally approved by the group">CSS  Custom  Properties  for  Cascading  Variables  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-12-03 - <a title="CSS Custom Properties for Cascading Variables Module Level 1 publication history" href="/standards/history/css-variables-1">History</a>
                        - <a href="https://drafts.csswg.org/css-variables/" title="Latest editor's draft of CSS Custom Properties for Cascading Variables Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css will change module level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2015/CR-css-will-change-1-20151203/" title="Latest draft of CSS Will Change Module Level 1 formally approved by the group">CSS  Will  Change  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-12-03 - <a title="CSS Will Change Module Level 1 publication history" href="/standards/history/css-will-change-1">History</a>
                        - <a href="https://drafts.csswg.org/css-will-change/" title="Latest editor's draft of CSS Will Change Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="xquery and xpath full text 3.0" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-xpath-full-text-30-20151124/" title="Latest draft of XQuery and XPath Full Text 3.0 formally approved by the group">XQuery  and  XPath  Full  Text&nbsp;3.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2015-11-24 - <a title="XQuery and XPath Full Text 3.0 publication history" href="/standards/history/xpath-full-text-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mary Holstege
                            <li>Jim Melton
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="confinement with origin web labels" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-COWL-20151015/" title="Latest draft of Confinement with Origin Web Labels formally approved by the group">Confinement with Origin Web Labels</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2015-10-15 - <a title="Confinement with Origin Web Labels publication history" href="/standards/history/COWL">History</a>
                        - <a href="https://w3c.github.io/webappsec-cowl/" title="Latest editor's draft of Confinement with Origin Web Labels">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deian Stefan
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="css snapshot 2015" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-css-2015-20151013/" title="Latest draft of CSS Snapshot 2015 formally approved by the group">CSS Snapshot 2015</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-10-13 - <a title="CSS Snapshot 2015 publication history" href="/standards/history/css-2015">History</a>
                        - <a href="https://drafts.csswg.org/css-2015/" title="Latest editor's draft of CSS Snapshot 2015">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="upgrade insecure requests" data-tag="security" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2015/CR-upgrade-insecure-requests-20151008/" title="Latest draft of Upgrade Insecure Requests formally approved by the group">Upgrade Insecure Requests</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2015-10-08 - <a title="Upgrade Insecure Requests publication history" href="/standards/history/upgrade-insecure-requests">History</a>
                        - <a href="https://w3c.github.io/webappsec-upgrade-insecure-requests/" title="Latest editor's draft of Upgrade Insecure Requests">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="a transcript extension for html" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-html-transcript-src-20151001/" title="Latest draft of A transcript extension for HTML formally approved by the group">A transcript extension for HTML</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-10-01 - <a title="A transcript extension for HTML publication history" href="/standards/history/html-transcript-src">History</a>
                        - <a href="https://w3c.github.io/html-transcript/html-transcript-src.html" title="Latest editor's draft of A transcript extension for HTML">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="html canvas 2d context, level 2" data-tag="graphics html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-2dcontext2-20150929/" title="Latest draft of HTML Canvas 2D Context, Level 2 formally approved by the group">HTML  Canvas  2D  Context,  Level&nbsp;2</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="HTML Canvas 2D Context, Level 2 publication history" href="/standards/history/2dcontext2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rik Cabanier
                            <li>Jatinder Mann
                            <li>Jay Munro
                            <li>Tom Wiltzius
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html to platform accessibility apis implementation guide" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-html-aapi-20150929/" title="Latest draft of HTML to Platform Accessibility APIs Implementation Guide formally approved by the group">HTML to Platform Accessibility APIs Implementation Guide</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="HTML to Platform Accessibility APIs Implementation Guide publication history" href="/standards/history/html-aapi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Cynthia Shelly
                            <li>Jason Kiss
                            <li>Alexander Surkov
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="polyglot markup: a robust profile of the html5 vocabulary" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-html-polyglot-20150929/" title="Latest draft of Polyglot Markup: A robust profile of the HTML5 vocabulary formally approved by the group">Polyglot Markup: A robust profile of the HTML5 vocabulary</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="Polyglot Markup: A robust profile of the HTML5 vocabulary publication history" href="/standards/history/html-polyglot">History</a>
                        - <a href="https://dev.w3.org/html5/html-polyglot/html-polyglot.html" title="Latest editor's draft of Polyglot Markup: A robust profile of the HTML5 vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eliot Graff
                            <li>Leif Halvard Silli
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c html json form submission" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-html-json-forms-20150929/" title="Latest draft of W3C HTML JSON form submission formally approved by the group">W3C HTML JSON form submission</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="W3C HTML JSON form submission publication history" href="/standards/history/html-json-forms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c html form http extensions" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-form-http-extensions-20150929/" title="Latest draft of W3C HTML Form HTTP Extensions formally approved by the group">W3C HTML Form HTTP Extensions</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="W3C HTML Form HTTP Extensions publication history" href="/standards/history/form-http-extensions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron Jones
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="implementing atag 2.0" data-tag="accessibility" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-IMPLEMENTING-ATAG20-20150924/" title="Latest draft of Implementing ATAG 2.0 formally approved by the group">Implementing  ATAG&nbsp;2.0</a></h2>
                        <p class=deliverer>Authoring Tool Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-09-24 - <a title="Implementing ATAG 2.0 publication history" href="/standards/history/IMPLEMENTING-ATAG20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jan Richards
                            <li>Jeanne F Spellman
                            <li>Jutta Treviranus
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="authoring tool accessibility guidelines (atag) 2.0" data-tag="accessibility" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-ATAG20-20150924/" title="Latest draft of Authoring Tool Accessibility Guidelines (ATAG) 2.0 formally approved by the group">Authoring  Tool  Accessibility  Guidelines  (ATAG)&nbsp;2.0</a></h2>
                        <p class=deliverer>Authoring Tool Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-09-24 - <a title="Authoring Tool Accessibility Guidelines (ATAG) 2.0 publication history" href="/standards/history/ATAG20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jan Richards
                            <li>Jeanne F Spellman
                            <li>Jutta Treviranus
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="timing control for script-based animations" data-tag="performance webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-animation-timing-20150922/" title="Latest draft of Timing control for script-based animations formally approved by the group">Timing control for script-based animations</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2015-09-22 - <a title="Timing control for script-based animations publication history" href="/standards/history/animation-timing">History</a>
                        - <a href="https://w3c.github.io/animation-timing/" title="Latest editor's draft of Timing control for script-based animations">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Robinson
                            <li>Cameron McCormack
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css page floats" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-css-page-floats-3-20150915/" title="Latest draft of CSS Page Floats formally approved by the group">CSS Page Floats</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-09-15 - <a title="CSS Page Floats publication history" href="/standards/history/css-page-floats-3">History</a>
                        - <a href="https://drafts.csswg.org/css-page-floats/" title="Latest editor's draft of CSS Page Floats">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Wilm
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="state chart xml (scxml): state machine notation for control abstraction" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-scxml-20150901/" title="Latest draft of State Chart XML (SCXML): State Machine Notation for Control Abstraction formally approved by the group">State Chart XML (SCXML): State Machine Notation for Control Abstraction</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2015-09-01 - <a title="State Chart XML (SCXML): State Machine Notation for Control Abstraction publication history" href="/standards/history/scxml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Barnett
                            <li>Rahul Akolkar
                            <li>RJ Auburn
                            <li>Michael Bodell
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Scott McGlashan
                            <li>Torbjörn Lager
                            <li>Marc Helbing
                            <li>Rafah Hosn
                            <li>T.V. Raman
                            <li>Klaus Reifenrath
                            <li>Noam Rosenthal
                            <li>Johan Roxendal
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="priorities for css from the digital publishing interest group" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-dpub-css-priorities-20150820/" title="Latest draft of Priorities for CSS from the Digital Publishing Interest Group formally approved by the group">Priorities for CSS from the Digital Publishing Interest Group</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2015-08-20 - <a title="Priorities for CSS from the Digital Publishing Interest Group publication history" href="/standards/history/dpub-css-priorities">History</a>
                        - <a href="https://w3c.github.io/dpub-pagination/priorities.html" title="Latest editor's draft of Priorities for CSS from the Digital Publishing Interest Group">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Cramer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="xpath data model for scxml" data-tag="media" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-scxml-xpath-dm-20150811/" title="Latest draft of XPath Data Model for SCXML formally approved by the group">XPath Data Model for SCXML</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2015-08-11 - <a title="XPath Data Model for SCXML publication history" href="/standards/history/scxml-xpath-dm">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Barnett
                            <li>Rahul Akolkar
                            <li>RJ Auburn
                            <li>Michael Bodell
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Scott McGlashan
                            <li>Torbjörn Lager
                            <li>Marc Helbing
                            <li>Rafah Hosn
                            <li>T V Raman
                            <li>Klaus Reifenrath
                            <li>Noam Rosenthal
                            <li>Johan Roxendal
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="dom event i/o processor for scxml" data-tag="media" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-scxml-dom-iop-20150811/" title="Latest draft of DOM Event I/O Processor for SCXML formally approved by the group">DOM Event I/O Processor for SCXML</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2015-08-11 - <a title="DOM Event I/O Processor for SCXML publication history" href="/standards/history/scxml-dom-iop">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Barnett
                            <li>Rahul Akolkar
                            <li>RJ Auburn
                            <li>Michael Bodell
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Scott McGlashan
                            <li>Torbjörn Lager
                            <li>Marc Helbing
                            <li>Rafah Hosn
                            <li>T V Raman
                            <li>Klaus Reifenrath
                            <li>Noam Rosenthal
                            <li>Johan Roxendal
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="runtime and security model for web applications" data-tag="security webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-runtime-20150806/" title="Latest draft of Runtime and Security Model for Web Applications formally approved by the group">Runtime and Security Model for Web Applications</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-08-06 - <a title="Runtime and Security Model for Web Applications publication history" href="/standards/history/runtime">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>MING JIN
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="linked data patch format" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-ldpatch-20150728/" title="Latest draft of Linked Data Patch Format formally approved by the group">Linked Data Patch Format</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2015-07-28 - <a title="Linked Data Patch Format publication history" href="/standards/history/ldpatch">History</a>
                        - <a href="https://dvcs.w3.org/hg/ldpwg/raw-file/ldpatch/ldpatch.html" title="Latest editor's draft of Linked Data Patch Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alexandre Bertails
                            <li>Pierre-Antoine Champin
                            <li>Andrei Sambra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xml signature syntax and processing version 2.0" data-tag="xml" data-status="note" data-version="upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-xmldsig-core2-20150723/" title="Latest draft of XML Signature Syntax and Processing Version 2.0 formally approved by the group">XML  Signature  Syntax  and  Processing  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2015-07-23 - <a title="XML Signature Syntax and Processing Version 2.0 publication history" href="/standards/history/xmldsig-core2">History</a>
                        - <a href="https://www.w3.org/2008/xmlsec/Drafts/xmldsig-core-20/" title="Latest editor's draft of XML Signature Syntax and Processing Version 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Donald Eastlake
                            <li>Joseph Reagle
                            <li>David Solo
                            <li>Frederick Hirsch
                            <li>Thomas Roessler
                            <li>Kelvin Yiu
                            <li>Pratik Datta
                            <li>Scott Cantor
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="tcp and udp socket api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-tcp-udp-sockets-20150723/" title="Latest draft of TCP and UDP Socket API formally approved by the group">TCP and UDP Socket API</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-07-23 - <a title="TCP and UDP Socket API publication history" href="/standards/history/tcp-udp-sockets">History</a>
                        - <a href="https://www.w3.org/2012/sysapps/tcp-udp-sockets/" title="Latest editor's draft of TCP and UDP Socket API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Claes Nilsson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="task scheduler api specification" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-task-scheduler-20150723/" title="Latest draft of Task Scheduler API Specification formally approved by the group">Task Scheduler API Specification</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-07-23 - <a title="Task Scheduler API Specification publication history" href="/standards/history/task-scheduler">History</a>
                        - <a href="https://www.w3.org/2012/sysapps/web-alarms/" title="Latest editor's draft of Task Scheduler API Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mahesh Kulkarni
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="the app: url scheme" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-app-uri-20150723/" title="Latest draft of The app: URL Scheme formally approved by the group">The app: URL Scheme</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-07-23 - <a title="The app: URL Scheme publication history" href="/standards/history/app-uri">History</a>
                        - <a href="https://app-uri.sysapps.org/" title="Latest editor's draft of The app: URL Scheme">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="additional requirements for bidi in html &amp; css" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-html-bidi-20150721/" title="Latest draft of Additional Requirements for Bidi in HTML &amp; CSS formally approved by the group">Additional Requirements for Bidi in HTML & CSS</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2015-07-21 - <a title="Additional Requirements for Bidi in HTML &amp; CSS publication history" href="/standards/history/html-bidi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aharon Lanin
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="permissions for device api access" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-api-perms-20150714/" title="Latest draft of Permissions for Device API Access formally approved by the group">Permissions for Device API Access</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2015-07-14 - <a title="Permissions for Device API Access publication history" href="/standards/history/api-perms">History</a>
                        - <a href="https://dev.w3.org/2009/dap/api-perms/" title="Latest editor's draft of Permissions for Device API Access">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paddy Byers
                            <li>Frederick Hirsch
                            <li>Dominique Hazaël-Massieux
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg paths" data-tag="graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-svg-paths-20150709/" title="Latest draft of SVG Paths formally approved by the group">SVG Paths</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2015-07-09 - <a title="SVG Paths publication history" href="/standards/history/svg-paths">History</a>
                        - <a href="https://svgwg.org/specs/paths/" title="Latest editor's draft of SVG Paths">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cyril Concolato
                            <li>Cameron McCormack
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="linked data platform paging 1.0" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-ldp-paging-20150630/" title="Latest draft of Linked Data Platform Paging 1.0 formally approved by the group">Linked  Data  Platform  Paging&nbsp;1.0</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2015-06-30 - <a title="Linked Data Platform Paging 1.0 publication history" href="/standards/history/ldp-paging">History</a>
                        - <a href="https://www.w3.org/2012/ldp/hg/ldp-paging.html" title="Latest editor's draft of Linked Data Platform Paging 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Speicher
                            <li>John Arwe
                            <li>Ashok Malhotra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="web nfc api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-nfc-20150616/" title="Latest draft of Web NFC API formally approved by the group">Web NFC API</a></h2>
                        <p class=deliverer>Near Field Communications Working Group</p>
                        <p class=pubdetails>2015-06-16 - <a title="Web NFC API publication history" href="/standards/history/nfc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Yriarte
                            <li>Samuel Ortiz
                            <li>Don Coleman
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="web telephony api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-telephony-20150602/" title="Latest draft of Web Telephony API formally approved by the group">Web Telephony API</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-06-02 - <a title="Web Telephony API publication history" href="/standards/history/telephony">History</a>
                        - <a href="https://www.w3.org/2012/sysapps/telephony/" title="Latest editor's draft of Web Telephony API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Jose Manuel Cantera Fonseca
                            <li>Eduardo Fullea
                            <li>Zoltan Kis
                            <li>John Lyle
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="contacts manager api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-contacts-manager-api-20150602/" title="Latest draft of Contacts Manager API formally approved by the group">Contacts Manager API</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-06-02 - <a title="Contacts Manager API publication history" href="/standards/history/contacts-manager-api">History</a>
                        - <a href="https://www.w3.org/2012/sysapps/contacts-manager-api/" title="Latest editor's draft of Contacts Manager API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eduardo Fullea
                            <li>Jose Manuel Cantera Fonseca
                            <li>Christophe Dumez
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="messaging api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-messaging-20150602/" title="Latest draft of Messaging API formally approved by the group">Messaging API</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-06-02 - <a title="Messaging API publication history" href="/standards/history/messaging">History</a>
                        - <a href="https://www.w3.org/2012/sysapps/messaging/" title="Latest editor's draft of Messaging API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eduardo Fullea
                            <li>Jose Manuel Cantera Fonseca
                            <li>Zoltan Kis
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="html5: techniques for providing useful text alternatives" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-html-alt-techniques-20150521/" title="Latest draft of HTML5: Techniques for providing useful text alternatives formally approved by the group">HTML5: Techniques for providing useful text alternatives</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-05-21 - <a title="HTML5: Techniques for providing useful text alternatives publication history" href="/standards/history/html-alt-techniques">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Liam Quin
                            <li>Steve Faulkner
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="dataset descriptions: hcls community profile" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-hcls-dataset-20150514/" title="Latest draft of Dataset Descriptions: HCLS Community Profile formally approved by the group">Dataset Descriptions: HCLS Community Profile</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2015-05-14 - <a title="Dataset Descriptions: HCLS Community Profile publication history" href="/standards/history/hcls-dataset">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alasdair Gray
                            <li>M. Scott Marshall
                            <li>Michel Dumontier
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="indieui: user context 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-indie-ui-context-20150430/" title="Latest draft of IndieUI: User Context 1.0 formally approved by the group">IndieUI:  User  Context&nbsp;1.0</a></h2>
                        <p class=deliverer>Independent User Interface (Indie UI) Working Group</p>
                        <p class=pubdetails>2015-04-30 - <a title="IndieUI: User Context 1.0 publication history" href="/standards/history/indie-ui-context">History</a>
                        - <a href="https://w3c.github.io/indie-ui/indie-ui-context.html" title="Latest editor's draft of IndieUI: User Context 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Craig
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="indieui: events 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-indie-ui-events-20150430/" title="Latest draft of IndieUI: Events 1.0 formally approved by the group">IndieUI:  Events&nbsp;1.0</a></h2>
                        <p class=deliverer>Independent User Interface (Indie UI) Working Group</p>
                        <p class=pubdetails>2015-04-30 - <a title="IndieUI: Events 1.0 publication history" href="/standards/history/indie-ui-events">History</a>
                        - <a href="https://w3c.github.io/indie-ui/indie-ui-events.html" title="Latest editor's draft of IndieUI: Events 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Craig
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="linked data platform 1.0 primer" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-ldp-primer-20150423/" title="Latest draft of Linked Data Platform 1.0 Primer formally approved by the group">Linked Data Platform 1.0 Primer</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2015-04-23 - <a title="Linked Data Platform 1.0 Primer publication history" href="/standards/history/ldp-primer">History</a>
                        - <a href="https://www.w3.org/2012/ldp/hg/ldp-primer/ldp-primer.html" title="Latest editor's draft of Linked Data Platform 1.0 Primer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nandana Mihindukulasooriya
                            <li>Roger Menday
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg markers" data-tag="graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-svg-markers-20150409/" title="Latest draft of SVG Markers formally approved by the group">SVG Markers</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2015-04-09 - <a title="SVG Markers publication history" href="/standards/history/svg-markers">History</a>
                        - <a href="https://svgwg.org/specs/markers/" title="Latest editor's draft of SVG Markers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg strokes" data-tag="graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-svg-strokes-20150409/" title="Latest draft of SVG Strokes formally approved by the group">SVG Strokes</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2015-04-09 - <a title="SVG Strokes publication history" href="/standards/history/svg-strokes">History</a>
                        - <a href="https://svgwg.org/specs/strokes/" title="Latest editor's draft of SVG Strokes">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                            <li>Dirk Schulze
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css template layout module" data-tag="css" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-css-template-3-20150326/" title="Latest draft of CSS Template Layout Module formally approved by the group">CSS Template Layout Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-03-26 - <a title="CSS Template Layout Module publication history" href="/standards/history/css-template-3">History</a>
                        - <a href="https://drafts.csswg.org/css-template/" title="Latest editor's draft of CSS Template Layout Module">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                            <li>César Acebal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdfa 1.1 primer - third edition" data-tag="data html" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-rdfa-primer-20150317/" title="Latest draft of RDFa 1.1 Primer - Third Edition formally approved by the group">RDFa 1.1 Primer - Third Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="RDFa 1.1 Primer - Third Edition publication history" href="/standards/history/rdfa-primer">History</a>
                        - <a href="https://www.w3.org/2010/02/rdfa/sources/rdfa-primer/Overview-src.html" title="Latest editor's draft of RDFa 1.1 Primer - Third Edition">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ivan Herman
                            <li>Ben Adida
                            <li>Manu Sporny
                            <li>Mark Birbeck
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdfa core 1.1 - third edition" data-tag="data html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-rdfa-core-20150317/" title="Latest draft of RDFa Core 1.1 - Third Edition formally approved by the group">RDFa Core 1.1 - Third Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="RDFa Core 1.1 - Third Edition publication history" href="/standards/history/rdfa-core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Adida
                            <li>Mark Birbeck
                            <li>Shane McCarron
                            <li>Ivan Herman
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html+rdfa 1.1 - second edition" data-tag="data html" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-html-rdfa-20150317/" title="Latest draft of HTML+RDFa 1.1 - Second Edition formally approved by the group">HTML+RDFa 1.1 - Second Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="HTML+RDFa 1.1 - Second Edition publication history" href="/standards/history/html-rdfa">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdfa lite 1.1 - second edition" data-tag="data html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-rdfa-lite-20150317/" title="Latest draft of RDFa Lite 1.1 - Second Edition formally approved by the group">RDFa Lite 1.1 - Second Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="RDFa Lite 1.1 - Second Edition publication history" href="/standards/history/rdfa-lite">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="public identifiers for entity resolution in xhtml" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-xhtml-pubid-20150317/" title="Latest draft of Public Identifiers for entity resolution in XHTML formally approved by the group">Public Identifiers for entity resolution in XHTML</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="Public Identifiers for entity resolution in XHTML publication history" href="/standards/history/xhtml-pubid">History</a>
                        - <a href="https://www.w3.org/2003/entities/2007doc/xhtml-pubid.html" title="Latest editor's draft of Public Identifiers for entity resolution in XHTML">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Carlisle
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web midi api" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-webmidi-20150317/" title="Latest draft of Web MIDI API formally approved by the group">Web MIDI API</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="Web MIDI API publication history" href="/standards/history/webmidi">History</a>
                        - <a href="https://webaudio.github.io/web-midi-api/" title="Latest editor's draft of Web MIDI API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Wilson
                            <li>Jussi Kalliokoski
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xhtml+rdfa 1.1 - third edition" data-tag="data html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-xhtml-rdfa-20150317/" title="Latest draft of XHTML+RDFa 1.1 - Third Edition formally approved by the group">XHTML+RDFa 1.1 - Third Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="XHTML+RDFa 1.1 - Third Edition publication history" href="/standards/history/xhtml-rdfa">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="linked data platform 1.0" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-ldp-20150226/" title="Latest draft of Linked Data Platform 1.0 formally approved by the group">Linked  Data  Platform&nbsp;1.0</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2015-02-26 - <a title="Linked Data Platform 1.0 publication history" href="/standards/history/ldp">History</a>
                        - <a href="https://www.w3.org/2012/ldp/hg/ldp.html" title="Latest editor's draft of Linked Data Platform 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Speicher
                            <li>John Arwe
                            <li>Ashok Malhotra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mobile accessibility: how wcag 2.0 and other w3c/wai guidelines apply to mobile" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-mobile-accessibility-mapping-20150226/" title="Latest draft of Mobile Accessibility: How WCAG 2.0 and Other W3C/WAI Guidelines Apply to Mobile formally approved by the group">Mobile Accessibility: How WCAG 2.0 and Other W3C/WAI Guidelines Apply to Mobile</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-02-26 - <a title="Mobile Accessibility: How WCAG 2.0 and Other W3C/WAI Guidelines Apply to Mobile publication history" href="/standards/history/mobile-accessibility-mapping">History</a>
                        - <a href="https://w3c.github.io/Mobile-A11y-TF-Note/" title="Latest editor's draft of Mobile Accessibility: How WCAG 2.0 and Other W3C/WAI Guidelines Apply to Mobile">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kimberly Patch
                            <li>Jeanne F Spellman
                            <li>Kathleen Wahlbin
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html5 image description extension (longdesc)" data-tag="html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-html-longdesc-20150226/" title="Latest draft of HTML5 Image Description Extension (longdesc) formally approved by the group">HTML5 Image Description Extension (longdesc)</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-02-26 - <a title="HTML5 Image Description Extension (longdesc) publication history" href="/standards/history/html-longdesc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Charles McCathieNevile
                            <li>Mark Sadecki
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="data on the web best practices use cases &amp; requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-dwbp-ucr-20150224/" title="Latest draft of Data on the Web Best Practices Use Cases &amp; Requirements formally approved by the group">Data on the Web Best Practices Use Cases & Requirements</a></h2>
                        <p class=deliverer>Data on the Web Best Practices Working Group</p>
                        <p class=pubdetails>2015-02-24 - <a title="Data on the Web Best Practices Use Cases &amp; Requirements publication history" href="/standards/history/dwbp-ucr">History</a>
                        - <a href="https://w3c.github.io/dwbp/usecasesv1.html" title="Latest editor's draft of Data on the Web Best Practices Use Cases &amp; Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deirdre Lee
                            <li>Bernadette Farias Loscio
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="content security policy 1.0" data-tag="security" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-CSP1-20150219/" title="Latest draft of Content Security Policy 1.0 formally approved by the group">Content  Security  Policy&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2015-02-19 - <a title="Content Security Policy 1.0 publication history" href="/standards/history/CSP1">History</a>
                        - <a href="https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-1.0-specification.html" title="Latest editor's draft of Content Security Policy 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Sterne
                            <li>Adam Barth
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="authoring techniques for xhtml &amp; html internationalization: characters and encodings 1.0" data-tag="html i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2015/NOTE-i18n-html-tech-char-20150127/" title="Latest draft of Authoring Techniques for XHTML &amp; HTML Internationalization: Characters and Encodings 1.0 formally approved by the group">Authoring  Techniques  for  XHTML  &  HTML  Internationalization:  Characters  and  Encodings&nbsp;1.0</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2015-01-27 - <a title="Authoring Techniques for XHTML &amp; HTML Internationalization: Characters and Encodings 1.0 publication history" href="/standards/history/i18n-html-tech-char">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css exclusions module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-css3-exclusions-20150115/" title="Latest draft of CSS Exclusions Module Level 1 formally approved by the group">CSS  Exclusions  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-01-15 - <a title="CSS Exclusions Module Level 1 publication history" href="/standards/history/css3-exclusions">History</a>
                        - <a href="https://drafts.csswg.org/css-exclusions/" title="Latest editor's draft of CSS Exclusions Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Vincent Hardy
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="cognitive accessibility user research" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2015/WD-coga-user-research-20150115/" title="Latest draft of Cognitive Accessibility User Research formally approved by the group">Cognitive Accessibility User Research</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-01-15 - <a title="Cognitive Accessibility User Research publication history" href="/standards/history/coga-user-research">History</a>
                        - <a href="https://w3c.github.io/coga/user-research/" title="Latest editor's draft of Cognitive Accessibility User Research">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Horwitz
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="compositing and blending level 1" data-tag="css graphics" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2015/CR-compositing-1-20150113/" title="Latest draft of Compositing and Blending Level 1 formally approved by the group">Compositing  and  Blending  Level&nbsp;1</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-01-13 - <a title="Compositing and Blending Level 1 publication history" href="/standards/history/compositing-1">History</a>
                        - <a href="https://drafts.fxtf.org/compositing-1/" title="Latest editor's draft of Compositing and Blending Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rik Cabanier
                            <li>Nikos Andronikos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="dpub ig metadata task force report" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2015/NOTE-dpub-metadata-20150108/" title="Latest draft of DPUB IG Metadata Task Force Report formally approved by the group">DPUB IG Metadata Task Force Report</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2015-01-08 - <a title="DPUB IG Metadata Task Force Report publication history" href="/standards/history/dpub-metadata">History</a>
                        - <a href="https://w3c.github.io/dpub-metadata/" title="Latest editor's draft of DPUB IG Metadata Task Force Report">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bill Kasdorf
                            <li>Madi Solomon
                            <li>Ivan Herman
                          </ul>
                                  </li>
                                                                                                                          <li data-title="indexed database api" data-tag="webapi" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2015/REC-IndexedDB-20150108/" title="Latest draft of Indexed Database API formally approved by the group">Indexed Database API</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2015-01-08 - <a title="Indexed Database API publication history" href="/standards/history/IndexedDB">History</a>
                        - <a href="https://w3c.github.io/IndexedDB/" title="Latest editor's draft of Indexed Database API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nikunj Mehta
                            <li>Jonas Sicking
                            <li>Eliot Graff
                            <li>Andrei Popescu
                            <li>Jeremy Orlow
                            <li>Joshua Bell
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="microdata to rdf – second edition" data-tag="data html" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-microdata-rdf-20141216/" title="Latest draft of Microdata to RDF – Second Edition formally approved by the group">Microdata to RDF – Second Edition</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2014-12-16 - <a title="Microdata to RDF – Second Edition publication history" href="/standards/history/microdata-rdf">History</a>
                        - <a href="https://w3c.github.io/microdata-rdf/" title="Latest editor's draft of Microdata to RDF – Second Edition">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html5 differences from html4" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-html5-diff-20141209/" title="Latest draft of HTML5 Differences from HTML4 formally approved by the group">HTML5 Differences from HTML4</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2014-12-09 - <a title="HTML5 Differences from HTML4 publication history" href="/standards/history/html5-diff">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Pieters
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="digital publishing annotation use cases" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-dpub-annotation-uc-20141204/" title="Latest draft of Digital Publishing Annotation Use Cases formally approved by the group">Digital Publishing Annotation Use Cases</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2014-12-04 - <a title="Digital Publishing Annotation Use Cases publication history" href="/standards/history/dpub-annotation-uc">History</a>
                        - <a href="https://w3c.github.io/dpub-annotation/" title="Latest editor's draft of Digital Publishing Annotation Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Sanderson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="fullscreen" data-tag="css webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-fullscreen-20141118/" title="Latest draft of Fullscreen formally approved by the group">Fullscreen</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-11-18 - <a title="Fullscreen publication history" href="/standards/history/fullscreen">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Tantek Çelik
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="resource priorities" data-tag="performance" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-resource-priorities-20141023/" title="Latest draft of Resource Priorities formally approved by the group">Resource Priorities</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2014-10-23 - <a title="Resource Priorities publication history" href="/standards/history/resource-priorities">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tobin Titus
                            <li>James Simonsen
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                          <li data-title="css presentation levels module" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-css3-preslev-20141014/" title="Latest draft of CSS Presentation Levels Module formally approved by the group">CSS Presentation Levels Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS Presentation Levels Module publication history" href="/standards/history/css3-preslev">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                            <li>Håkon Wium Lie
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="css mobile profile 2.0" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-css-mobile-20141014/" title="Latest draft of CSS Mobile Profile 2.0 formally approved by the group">CSS  Mobile  Profile&nbsp;2.0</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS Mobile Profile 2.0 publication history" href="/standards/history/css-mobile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="behavioral extensions to css" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-becss-20141014/" title="Latest draft of Behavioral Extensions to CSS formally approved by the group">Behavioral Extensions to CSS</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="Behavioral Extensions to CSS publication history" href="/standards/history/becss">History</a>
                        - <a href="https://dev.w3.org/2006/xbl2/css-module.html" title="Latest editor's draft of Behavioral Extensions to CSS">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="css3 hyperlink presentation module" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-css3-hyperlinks-20141014/" title="Latest draft of CSS3 Hyperlink Presentation Module formally approved by the group">CSS3 Hyperlink Presentation Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS3 Hyperlink Presentation Module publication history" href="/standards/history/css3-hyperlinks">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="css tv profile 1.0" data-tag="css media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-css-tv-20141014/" title="Latest draft of CSS TV Profile 1.0 formally approved by the group">CSS  TV  Profile&nbsp;1.0</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS TV Profile 1.0 publication history" href="/standards/history/css-tv">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sean Hayes
                            <li>Glenn Adams
                            <li>Tantek Çelik
                            <li>Håkon Wium Lie
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="the css ‘reader’ media type" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-css3-reader-20141014/" title="Latest draft of The CSS ‘Reader’ Media Type formally approved by the group">The CSS ‘Reader’ Media Type</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="The CSS ‘Reader’ Media Type publication history" href="/standards/history/css3-reader">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="css marquee module level 3" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-css3-marquee-20141014/" title="Latest draft of CSS Marquee Module Level 3 formally approved by the group">CSS  Marquee  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS Marquee Module Level 3 publication history" href="/standards/history/css3-marquee">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css regions module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-css-regions-1-20141009/" title="Latest draft of CSS Regions Module Level 1 formally approved by the group">CSS  Regions  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-09 - <a title="CSS Regions Module Level 1 publication history" href="/standards/history/css-regions-1">History</a>
                        - <a href="https://drafts.csswg.org/css-regions/" title="Latest editor's draft of CSS Regions Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="uniform messaging policy, level one" data-tag="security" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-UMP-20141002/" title="Latest draft of Uniform Messaging Policy, Level One formally approved by the group">Uniform Messaging Policy, Level One</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-10-02 - <a title="Uniform Messaging Policy, Level One publication history" href="/standards/history/UMP">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tyler Close
                            <li>Mark Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for latin text layout and pagination" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-dpub-latinreq-20140930/" title="Latest draft of Requirements for Latin Text Layout and Pagination formally approved by the group">Requirements for Latin Text Layout and Pagination</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2014-09-30 - <a title="Requirements for Latin Text Layout and Pagination publication history" href="/standards/history/dpub-latinreq">History</a>
                        - <a href="https://w3c.github.io/dpub-pagination/" title="Latest editor's draft of Requirements for Latin Text Layout and Pagination">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Cramer
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xquery scripting extension 1.0" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-xquery-sx-10-20140918/" title="Latest draft of XQuery Scripting Extension 1.0 formally approved by the group">XQuery  Scripting  Extension&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-09-18 - <a title="XQuery Scripting Extension 1.0 publication history" href="/standards/history/xquery-sx-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Snelson
                            <li>Don Chamberlin
                            <li>Daniel Engovatov
                            <li>Dana Florescu
                            <li>Giorgio Ghelli
                            <li>Jim Melton
                            <li>Jerome Simeon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ldp access control" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-ldp-acr-20140916/" title="Latest draft of LDP Access Control formally approved by the group">LDP Access Control</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2014-09-16 - <a title="LDP Access Control publication history" href="/standards/history/ldp-acr">History</a>
                        - <a href="https://dvcs.w3.org/hg/ldpwg/raw-file/default/ldp-acr.html" title="Latest editor's draft of LDP Access Control">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ashok Malhotra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css line grid module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-css-line-grid-1-20140916/" title="Latest draft of CSS Line Grid Module Level 1 formally approved by the group">CSS  Line  Grid  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-09-16 - <a title="CSS Line Grid Module Level 1 publication history" href="/standards/history/css-line-grid-1">History</a>
                        - <a href="https://drafts.csswg.org/css-line-grid/" title="Latest editor's draft of CSS Line Grid Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) profile for limiting usage of dynamic memory" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-exi-profile-20140909/" title="Latest draft of Efficient XML Interchange (EXI) Profile for limiting usage of dynamic memory formally approved by the group">Efficient XML Interchange (EXI) Profile for limiting usage of dynamic memory</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2014-09-09 - <a title="Efficient XML Interchange (EXI) Profile for limiting usage of dynamic memory publication history" href="/standards/history/exi-profile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Youenn Fablet
                            <li>Daniel Peintner
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="linked data platform best practices and guidelines" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-ldp-bp-20140828/" title="Latest draft of Linked Data Platform Best Practices and Guidelines formally approved by the group">Linked Data Platform Best Practices and Guidelines</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2014-08-28 - <a title="Linked Data Platform Best Practices and Guidelines publication history" href="/standards/history/ldp-bp">History</a>
                        - <a href="https://dvcs.w3.org/hg/ldpwg/raw-file/default/ldp-bp/ldp-bp.html" title="Latest editor's draft of Linked Data Platform Best Practices and Guidelines">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cody Burleson
                            <li>Miguel Esteban Gutiérrez
                            <li>Nandana Mihindukulasooriya
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css masking module level 1" data-tag="css graphics" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2014/CR-css-masking-1-20140826/" title="Latest draft of CSS Masking Module Level 1 formally approved by the group">CSS  Masking  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-08-26 - <a title="CSS Masking Module Level 1 publication history" href="/standards/history/css-masking-1">History</a>
                        - <a href="https://drafts.fxtf.org/css-masking-1/" title="Latest editor's draft of CSS Masking Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Schulze
                            <li>Brian Birtles
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="the srcset attribute" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-html-srcset-20140819/" title="Latest draft of The srcset attribute formally approved by the group">The srcset attribute</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2014-08-19 - <a title="The srcset attribute publication history" href="/standards/history/html-srcset">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Theresa O&#039;Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="wake lock: use cases" data-tag="webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-wake-lock-use-cases-20140814/" title="Latest draft of Wake Lock: Use cases formally approved by the group">Wake Lock: Use cases</a></h2>
                        <p class=deliverer>Web and Mobile Interest Group</p>
                        <p class=pubdetails>2014-08-14 - <a title="Wake Lock: Use cases publication history" href="/standards/history/wake-lock-use-cases">History</a>
                        - <a href="https://w3c-webmob.github.io/wake-lock-use-cases/" title="Latest editor's draft of Wake Lock: Use cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Natasha Rooney
                            <li>Dominique Hazaël-Massieux
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="introduction to web components" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-components-intro-20140724/" title="Latest draft of Introduction to Web Components formally approved by the group">Introduction to Web Components</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-07-24 - <a title="Introduction to Web Components publication history" href="/standards/history/components-intro">History</a>
                        - <a href="https://w3c.github.io/webcomponents/explainer/" title="Latest editor's draft of Introduction to Web Components">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dimitri Glazkov
                            <li>Hayato Ito
                          </ul>
                                  </li>
                                                                                                                          <li data-title="the picture element" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-html-picture-element-20140722/" title="Latest draft of The picture Element formally approved by the group">The picture Element</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2014-07-22 - <a title="The picture Element publication history" href="/standards/history/html-picture-element">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Simon Pieters
                            <li>Yoav Weiss
                            <li>Marcos Caceres
                            <li>Mathew Marquis
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="website accessibility conformance evaluation methodology (wcag-em) 1.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-WCAG-EM-20140710/" title="Latest draft of Website Accessibility Conformance Evaluation Methodology (WCAG-EM) 1.0 formally approved by the group">Website  Accessibility  Conformance  Evaluation  Methodology  (WCAG-EM)&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2014-07-10 - <a title="Website Accessibility Conformance Evaluation Methodology (WCAG-EM) 1.0 publication history" href="/standards/history/WCAG-EM">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Velleman
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 primer" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-rdf11-primer-20140624/" title="Latest draft of RDF 1.1 Primer formally approved by the group">RDF 1.1 Primer</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-06-24 - <a title="RDF 1.1 Primer publication history" href="/standards/history/rdf11-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Guus Schreiber
                            <li>Yves Raimond
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="authoring html: language declarations" data-tag="html i18n" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-i18n-html-tech-lang-20140603/" title="Latest draft of Authoring HTML: Language declarations formally approved by the group">Authoring HTML: Language declarations</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2014-06-03 - <a title="Authoring HTML: Language declarations publication history" href="/standards/history/i18n-html-tech-lang">History</a>
                        - <a href="https://www.w3.org/International/docs/bp-html-lang/" title="Latest editor's draft of Authoring HTML: Language declarations">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="authoring html: handling right-to-left scripts" data-tag="html i18n" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-i18n-html-tech-bidi-20140603/" title="Latest draft of Authoring HTML: Handling Right-to-left Scripts formally approved by the group">Authoring HTML: Handling Right-to-left Scripts</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2014-06-03 - <a title="Authoring HTML: Handling Right-to-left Scripts publication history" href="/standards/history/i18n-html-tech-bidi">History</a>
                        - <a href="https://www.w3.org/International/docs/bp-html-bidi/" title="Latest editor's draft of Authoring HTML: Handling Right-to-left Scripts">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                <li data-title="vcard ontology - for describing people and organizations" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-vcard-rdf-20140522/" title="Latest draft of vCard Ontology - for describing People and Organizations formally approved by the group">vCard Ontology - for describing People and Organizations</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2014-05-22 - <a title="vCard Ontology - for describing People and Organizations publication history" href="/standards/history/vcard-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Renato Iannella
                            <li>James McKinney
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="emotion markup language (emotionml) 1.0" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-emotionml-20140522/" title="Latest draft of Emotion Markup Language (EmotionML) 1.0 formally approved by the group">Emotion  Markup  Language  (EmotionML)&nbsp;1.0</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2014-05-22 - <a title="Emotion Markup Language (EmotionML) 1.0 publication history" href="/standards/history/emotionml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Felix Burkhardt
                            <li>Marc Schröder
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css font loading module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-css-font-loading-3-20140522/" title="Latest draft of CSS Font Loading Module Level 3 formally approved by the group">CSS  Font  Loading  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-05-22 - <a title="CSS Font Loading Module Level 3 publication history" href="/standards/history/css-font-loading-3">History</a>
                        - <a href="https://drafts.csswg.org/css-font-loading/" title="Latest editor's draft of CSS Font Loading Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css generated content for paged media module" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-css-gcpm-3-20140513/" title="Latest draft of CSS Generated Content for Paged Media Module formally approved by the group">CSS Generated Content for Paged Media Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-05-13 - <a title="CSS Generated Content for Paged Media Module publication history" href="/standards/history/css-gcpm-3">History</a>
                        - <a href="https://drafts.csswg.org/css-gcpm/" title="Latest editor's draft of CSS Generated Content for Paged Media Module">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Cramer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) primer" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-exi-primer-20140424/" title="Latest draft of Efficient XML Interchange (EXI) Primer formally approved by the group">Efficient XML Interchange (EXI) Primer</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2014-04-24 - <a title="Efficient XML Interchange (EXI) Primer publication history" href="/standards/history/exi-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Peintner
                            <li>Santiago Pericas-Geertsen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="file api: directories and system" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-file-system-api-20140424/" title="Latest draft of File API: Directories and System formally approved by the group">File API: Directories and System</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-04-24 - <a title="File API: Directories and System publication history" href="/standards/history/file-system-api">History</a>
                        - <a href="https://dev.w3.org/2009/dap/file-system/file-dir-sys.html" title="Latest editor's draft of File API: Directories and System">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Uhrhane
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="file api: writer" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-file-writer-api-20140424/" title="Latest draft of File API: Writer formally approved by the group">File API: Writer</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-04-24 - <a title="File API: Writer publication history" href="/standards/history/file-writer-api">History</a>
                        - <a href="https://dev.w3.org/2009/dap/file-system/file-writer.html" title="Latest editor's draft of File API: Writer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Uhrhane
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="requirements for indieui: events 1.0 and indieui: user context 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-indie-ui-requirements-20140422/" title="Latest draft of Requirements for IndieUI: Events 1.0 and IndieUI: User Context 1.0 formally approved by the group">Requirements  for  IndieUI:  Events  1.0  and  IndieUI:  User  Context&nbsp;1.0</a></h2>
                        <p class=deliverer>Independent User Interface (Indie UI) Working Group</p>
                        <p class=pubdetails>2014-04-22 - <a title="Requirements for IndieUI: Events 1.0 and IndieUI: User Context 1.0 publication history" href="/standards/history/indie-ui-requirements">History</a>
                        - <a href="https://dvcs.w3.org/hg/IndieUI/raw-file/default/src/indie-ui-requirements.html" title="Latest editor's draft of Requirements for IndieUI: Events 1.0 and IndieUI: User Context 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg integration" data-tag="css graphics html" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-svg-integration-20140417/" title="Latest draft of SVG Integration formally approved by the group">SVG Integration</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2014-04-17 - <a title="SVG Integration publication history" href="/standards/history/svg-integration">History</a>
                        - <a href="https://svgwg.org/specs/integration/" title="Latest editor's draft of SVG Integration">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                            <li>Doug Schepers
                            <li>Dirk Schulze
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="the network information api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-netinfo-api-20140410/" title="Latest draft of The Network Information API formally approved by the group">The Network Information API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-04-10 - <a title="The Network Information API publication history" href="/standards/history/netinfo-api">History</a>
                        - <a href="https://dvcs.w3.org/hg/dap/raw-file/tip/network-api/Overview.html" title="Latest editor's draft of The Network Information API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mathematical markup language (mathml) version 3.0 2nd edition" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-MathML3-20140410/" title="Latest draft of Mathematical Markup Language (MathML) Version 3.0 2nd Edition formally approved by the group">Mathematical Markup Language (MathML) Version 3.0 2nd Edition</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2014-04-10 - <a title="Mathematical Markup Language (MathML) Version 3.0 2nd Edition publication history" href="/standards/history/MathML3">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Carlisle
                            <li>Patrick D F Ion
                            <li>Robert R Miner
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xml entity definitions for characters (2nd edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-xml-entity-names-20140410/" title="Latest draft of XML Entity Definitions for Characters (2nd Edition) formally approved by the group">XML Entity Definitions for Characters (2nd Edition)</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2014-04-10 - <a title="XML Entity Definitions for Characters (2nd Edition) publication history" href="/standards/history/xml-entity-names">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Carlisle
                            <li>Patrick D F Ion
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <li data-title="xpath and xquery functions and operators 3.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-xpath-functions-30-20140408/" title="Latest draft of XPath and XQuery Functions and Operators 3.0 formally approved by the group">XPath  and  XQuery  Functions  and  Operators&nbsp;3.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XPath and XQuery Functions and Operators 3.0 publication history" href="/standards/history/xpath-functions-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="mbui - abstract user interface models" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-abstract-ui-20140408/" title="Latest draft of MBUI - Abstract User Interface Models formally approved by the group">MBUI - Abstract User Interface Models</a></h2>
                        <p class=deliverer>Model-Based User Interfaces Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="MBUI - Abstract User Interface Models publication history" href="/standards/history/abstract-ui">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jean Vanderdonckt
                            <li>Ricardo Tesoriero
                            <li>Nesrine Mezhoudi
                            <li>Vivian Genaro Motti
                            <li>François Beuvens
                            <li>Jérémie Melchior
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xquery 3.0 use cases" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-xquery-30-use-cases-20140408/" title="Latest draft of XQuery 3.0 Use Cases formally approved by the group">XQuery 3.0 Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQuery 3.0 Use Cases publication history" href="/standards/history/xquery-30-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Tim Kraska
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xquery 3.0: an xml query language" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-xquery-30-20140408/" title="Latest draft of XQuery 3.0: An XML Query Language formally approved by the group">XQuery 3.0: An XML Query Language</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQuery 3.0: An XML Query Language publication history" href="/standards/history/xquery-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Don Chamberlin
                            <li>Michael Dyck
                            <li>John Snelson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                              <li data-title="xml path language (xpath) 3.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-xpath-30-20140408/" title="Latest draft of XML Path Language (XPath) 3.0 formally approved by the group">XML  Path  Language  (XPath)&nbsp;3.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XML Path Language (XPath) 3.0 publication history" href="/standards/history/xpath-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Don Chamberlin
                            <li>Michael Dyck
                            <li>John Snelson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                              <li data-title="xslt and xquery serialization 3.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-xslt-xquery-serialization-30-20140408/" title="Latest draft of XSLT and XQuery Serialization 3.0 formally approved by the group">XSLT  and  XQuery  Serialization&nbsp;3.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XSLT and XQuery Serialization 3.0 publication history" href="/standards/history/xslt-xquery-serialization-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Zongaro
                            <li>Andrew Coleman
                            <li>Michael Sperberg-McQueen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xquery 3.0 requirements" data-tag="xml" data-status="note" data-version="">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-xquery-30-requirements-20140408/" title="Latest draft of XQuery 3.0 Requirements formally approved by the group">XQuery 3.0 Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQuery 3.0 Requirements publication history" href="/standards/history/xquery-30-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Daniel Engovatov
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="xquery and xpath data model 3.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-xpath-datamodel-30-20140408/" title="Latest draft of XQuery and XPath Data Model 3.0 formally approved by the group">XQuery  and  XPath  Data  Model&nbsp;3.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQuery and XPath Data Model 3.0 publication history" href="/standards/history/xpath-datamodel-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>Anders Berglund
                            <li>John Snelson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                      <li data-title="xqueryx 3.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-xqueryx-30-20140408/" title="Latest draft of XQueryX 3.0 formally approved by the group">XQueryX&nbsp;3.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQueryX 3.0 publication history" href="/standards/history/xqueryx-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Melton
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="mbui - task models" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-task-models-20140408/" title="Latest draft of MBUI - Task Models formally approved by the group">MBUI - Task Models</a></h2>
                        <p class=deliverer>Model-Based User Interfaces Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="MBUI - Task Models publication history" href="/standards/history/task-models">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Fabio Paternò
                            <li>Carmen Santoro
                            <li>Spano Lucio Davide
                            <li>Dave Raggett
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="review of apps that use network information" data-tag="webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-netinfo-usecases-20140403/" title="Latest draft of Review of apps that use network information formally approved by the group">Review of apps that use network information</a></h2>
                        <p class=deliverer>Web and Mobile Interest Group</p>
                        <p class=pubdetails>2014-04-03 - <a title="Review of apps that use network information publication history" href="/standards/history/netinfo-usecases">History</a>
                        - <a href="https://w3c-webmob.github.io/netinfo-usecases/" title="Latest editor's draft of Review of apps that use network information">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Fernando Jiménez Moreno
                            <li>Ernesto Jimenez
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css scoping module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-css-scoping-1-20140403/" title="Latest draft of CSS Scoping Module Level 1 formally approved by the group">CSS  Scoping  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-04-03 - <a title="CSS Scoping Module Level 1 publication history" href="/standards/history/css-scoping-1">History</a>
                        - <a href="https://drafts.csswg.org/css-scoping/" title="Latest editor's draft of CSS Scoping Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="vocabularies for emotionml" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-emotion-voc-20140401/" title="Latest draft of Vocabularies for EmotionML formally approved by the group">Vocabularies for EmotionML</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2014-04-01 - <a title="Vocabularies for EmotionML publication history" href="/standards/history/emotion-voc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Felix Burkhardt
                            <li>Marc Schröder
                            <li>Catherine Pelachaud
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="accessible rich internet applications (wai-aria) 1.0" data-tag="accessibility" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-wai-aria-20140320/" title="Latest draft of Accessible Rich Internet Applications (WAI-ARIA) 1.0 formally approved by the group">Accessible  Rich  Internet  Applications  (WAI-ARIA)&nbsp;1.0</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2014-03-20 - <a title="Accessible Rich Internet Applications (WAI-ARIA) 1.0 publication history" href="/standards/history/wai-aria">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Craig
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css shapes module level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2014/CR-css-shapes-1-20140320/" title="Latest draft of CSS Shapes Module Level 1 formally approved by the group">CSS  Shapes  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-03-20 - <a title="CSS Shapes Module Level 1 publication history" href="/standards/history/css-shapes-1">History</a>
                        - <a href="https://drafts.csswg.org/css-shapes/" title="Latest editor's draft of CSS Shapes Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Vincent Hardy
                            <li>Rossen Atanassov
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css namespaces module level 3" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-css-namespaces-3-20140320/" title="Latest draft of CSS Namespaces Module Level 3 formally approved by the group">CSS  Namespaces  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-03-20 - <a title="CSS Namespaces Module Level 3 publication history" href="/standards/history/css-namespaces-3">History</a>
                        - <a href="https://drafts.csswg.org/css-namespaces/" title="Latest editor's draft of CSS Namespaces Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                    <li data-title="wai-aria 1.0 user agent implementation guide" data-tag="accessibility" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-wai-aria-implementation-20140320/" title="Latest draft of WAI-ARIA 1.0 User Agent Implementation Guide formally approved by the group">WAI-ARIA 1.0 User Agent Implementation Guide</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2014-03-20 - <a title="WAI-ARIA 1.0 User Agent Implementation Guide publication history" href="/standards/history/wai-aria-implementation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Scheuhammer
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="html templates" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-html-templates-20140318/" title="Latest draft of HTML Templates formally approved by the group">HTML Templates</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-03-18 - <a title="HTML Templates publication history" href="/standards/history/html-templates">History</a>
                        - <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html" title="Latest editor's draft of HTML Templates">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dimitri Glazkov
                            <li>Rafael Weinstein
                            <li>Tony Ross
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="linked data platform use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-ldp-ucr-20140313/" title="Latest draft of Linked Data Platform Use Cases and Requirements formally approved by the group">Linked Data Platform Use Cases and Requirements</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2014-03-13 - <a title="Linked Data Platform Use Cases and Requirements publication history" href="/standards/history/ldp-ucr">History</a>
                        - <a href="https://www.w3.org/2012/ldp/hg/ldp-ucr.html" title="Latest editor's draft of Linked Data Platform Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Battle
                            <li>Steve Speicher
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="metadata api for media resources 1.0" data-tag="media webapi" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-mediaont-api-1.0-20140313/" title="Latest draft of Metadata API for Media Resources 1.0 formally approved by the group">Metadata  API  for  Media  Resources&nbsp;1.0</a></h2>
                        <p class=deliverer>Media Annotations Working Group</p>
                        <p class=pubdetails>2014-03-13 - <a title="Metadata API for Media Resources 1.0 publication history" href="/standards/history/mediaont-api-1.0">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Stegmaier
                            <li>Werner Bailer
                            <li>Martin Höffernig
                            <li>Wonsuk Lee
                            <li>Chris Poppe
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 trig" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-trig-20140225/" title="Latest draft of RDF 1.1 TriG formally approved by the group">RDF 1.1 TriG</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 TriG publication history" href="/standards/history/trig">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gavin Carothers
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="rdf schema 1.1" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-rdf-schema-20140225/" title="Latest draft of RDF Schema 1.1 formally approved by the group">RDF  Schema&nbsp;1.1</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF Schema 1.1 publication history" href="/standards/history/rdf-schema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dan Brickley
                            <li>Ramanathan Guha
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 test cases" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-rdf11-testcases-20140225/" title="Latest draft of RDF 1.1 Test Cases formally approved by the group">RDF 1.1 Test Cases</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 Test Cases publication history" href="/standards/history/rdf11-testcases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                            <li>Markus Lanthaler
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 n-quads" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-n-quads-20140225/" title="Latest draft of RDF 1.1 N-Quads formally approved by the group">RDF 1.1 N-Quads</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 N-Quads publication history" href="/standards/history/n-quads">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gavin Carothers
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 semantics" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-rdf11-mt-20140225/" title="Latest draft of RDF 1.1 Semantics formally approved by the group">RDF 1.1 Semantics</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 Semantics publication history" href="/standards/history/rdf11-mt">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Hayes
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1: on semantics of rdf datasets" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-rdf11-datasets-20140225/" title="Latest draft of RDF 1.1: On Semantics of RDF Datasets formally approved by the group">RDF 1.1: On Semantics of RDF Datasets</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1: On Semantics of RDF Datasets publication history" href="/standards/history/rdf11-datasets">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Antoine Zimmermann
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 n-triples" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-n-triples-20140225/" title="Latest draft of RDF 1.1 N-Triples formally approved by the group">RDF 1.1 N-Triples</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 N-Triples publication history" href="/standards/history/n-triples">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gavin Carothers
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 concepts and abstract syntax" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/" title="Latest draft of RDF 1.1 Concepts and Abstract Syntax formally approved by the group">RDF 1.1 Concepts and Abstract Syntax</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 Concepts and Abstract Syntax publication history" href="/standards/history/rdf11-concepts">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Cyganiak
                            <li>David Wood
                            <li>Markus Lanthaler
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="what’s new in rdf 1.1" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-rdf11-new-20140225/" title="Latest draft of What’s New in RDF 1.1 formally approved by the group">What’s  New  in  RDF&nbsp;1.1</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="What’s New in RDF 1.1 publication history" href="/standards/history/rdf11-new">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Wood
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 xml syntax" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-rdf-syntax-grammar-20140225/" title="Latest draft of RDF 1.1 XML Syntax formally approved by the group">RDF 1.1 XML Syntax</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 XML Syntax publication history" href="/standards/history/rdf-syntax-grammar">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Fabien Gandon
                            <li>Guus Schreiber
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 turtle" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-turtle-20140225/" title="Latest draft of RDF 1.1 Turtle formally approved by the group">RDF 1.1 Turtle</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 Turtle publication history" href="/standards/history/turtle">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Gavin Carothers
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="good practices for capability urls" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2014/WD-capability-urls-20140218/" title="Latest draft of Good Practices for Capability URLs formally approved by the group">Good Practices for Capability URLs</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2014-02-18 - <a title="Good Practices for Capability URLs publication history" href="/standards/history/capability-urls">History</a>
                        - <a href="https://w3ctag.github.io/capability-urls/" title="Latest editor's draft of Good Practices for Capability URLs">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) format 1.0 (second edition)" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-exi-20140211/" title="Latest draft of Efficient XML Interchange (EXI) Format 1.0 (Second Edition) formally approved by the group">Efficient XML Interchange (EXI) Format 1.0 (Second Edition)</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2014-02-11 - <a title="Efficient XML Interchange (EXI) Format 1.0 (Second Edition) publication history" href="/standards/history/exi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Schneider
                            <li>Takuki Kamiya
                            <li>Daniel Peintner
                            <li>Rumen Kyusakov
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml processor profiles" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-xml-proc-profiles-20140206/" title="Latest draft of XML processor profiles formally approved by the group">XML processor profiles</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2014-02-06 - <a title="XML processor profiles publication history" href="/standards/history/xml-proc-profiles">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                            <li>Norman Walsh
                            <li>James Fuller
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="w3c html ruby markup extensions" data-tag="html" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-html-ruby-extensions-20140204/" title="Latest draft of W3C HTML Ruby Markup Extensions formally approved by the group">W3C HTML Ruby Markup Extensions</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2014-02-04 - <a title="W3C HTML Ruby Markup Extensions publication history" href="/standards/history/html-ruby-extensions">History</a>
                        - <a href="https://darobin.github.com/html-ruby/" title="Latest editor's draft of W3C HTML Ruby Markup Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the rdf data cube vocabulary" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-vocab-data-cube-20140116/" title="Latest draft of The RDF Data Cube Vocabulary formally approved by the group">The RDF Data Cube Vocabulary</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2014-01-16 - <a title="The RDF Data Cube Vocabulary publication history" href="/standards/history/vocab-data-cube">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Cyganiak
                            <li>Dave Reynolds
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the organization ontology" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2014/REC-vocab-org-20140116/" title="Latest draft of The Organization Ontology formally approved by the group">The Organization Ontology</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2014-01-16 - <a title="The Organization Ontology publication history" href="/standards/history/vocab-org">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Reynolds
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="calendar api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-calendar-api-20140114/" title="Latest draft of Calendar API formally approved by the group">Calendar API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="Calendar API publication history" href="/standards/history/calendar-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Tibbett
                            <li>Suresh Chitturi
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="the system information api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-system-info-api-20140114/" title="Latest draft of The System Information API formally approved by the group">The System Information API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="The System Information API publication history" href="/standards/history/system-info-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Max Froumentin
                            <li>Dzung Tran
                            <li>Bryan Sullivan
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="the messaging api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-messaging-api-20140114/" title="Latest draft of The Messaging API formally approved by the group">The Messaging API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="The Messaging API publication history" href="/standards/history/messaging-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dominique Hazaël-Massieux
                            <li>Suresh Chitturi
                            <li>Max Froumentin
                            <li>Maria Angeles Oteo
                            <li>Niklas Widell
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="web intents addendum - local services" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-webintents-local-services-20140114/" title="Latest draft of Web Intents Addendum - Local Services formally approved by the group">Web Intents Addendum - Local Services</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="Web Intents Addendum - Local Services publication history" href="/standards/history/webintents-local-services">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Claes Nilsson
                            <li>Norifumi Kikkawa
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="pick media intent" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-gallery-20140114/" title="Latest draft of Pick Media Intent formally approved by the group">Pick Media Intent</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="Pick Media Intent publication history" href="/standards/history/gallery">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jungkee Song
                            <li>Wonsuk Lee
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="pick contacts intent" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2014/NOTE-contacts-api-20140114/" title="Latest draft of Pick Contacts Intent formally approved by the group">Pick Contacts Intent</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="Pick Contacts Intent publication history" href="/standards/history/contacts-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Tibbett
                            <li>Robin Berjon
                            <li>Jungkee Song
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="best practices for publishing linked data" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-ld-bp-20140109/" title="Latest draft of Best Practices for Publishing Linked Data formally approved by the group">Best Practices for Publishing Linked Data</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2014-01-09 - <a title="Best Practices for Publishing Linked Data publication history" href="/standards/history/ld-bp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernadette Hyland
                            <li>Ghislain Auguste Atemezing
                            <li>Boris Villazón-Terrazas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mbui - glossary" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-mbui-glossary-20140107/" title="Latest draft of MBUI - Glossary formally approved by the group">MBUI - Glossary</a></h2>
                        <p class=deliverer>Model-Based User Interfaces Working Group</p>
                        <p class=pubdetails>2014-01-07 - <a title="MBUI - Glossary publication history" href="/standards/history/mbui-glossary">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jaroslav Pullmann
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="introduction to model-based user interfaces" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2014/NOTE-mbui-intro-20140107/" title="Latest draft of Introduction to Model-Based User Interfaces formally approved by the group">Introduction to Model-Based User Interfaces</a></h2>
                        <p class=deliverer>Model-Based User Interfaces Working Group</p>
                        <p class=pubdetails>2014-01-07 - <a title="Introduction to Model-Based User Interfaces publication history" href="/standards/history/mbui-intro">History</a>
                        - <a href="https://www.w3.org/2011/mbui/drafts/mbui-intro/" title="Latest editor's draft of Introduction to Model-Based User Interfaces">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gerrit Meixner
                            <li>Gaelle Calvary
                          </ul>
                                  </li>
                                                                                                    <li data-title="performance timeline" data-tag="performance webapi" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-performance-timeline-20131212/" title="Latest draft of Performance Timeline formally approved by the group">Performance Timeline</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2013-12-12 - <a title="Performance Timeline publication history" href="/standards/history/performance-timeline">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="css style attributes" data-tag="css html" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-css-style-attr-20131107/" title="Latest draft of CSS Style Attributes formally approved by the group">CSS Style Attributes</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2013-11-07 - <a title="CSS Style Attributes publication history" href="/standards/history/css-style-attr">History</a>
                        - <a href="https://drafts.csswg.org/css-style-attr/" title="Latest editor's draft of CSS Style Attributes">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 json alternate serialization (rdf/json)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-rdf-json-20131107/" title="Latest draft of RDF 1.1 JSON Alternate Serialization (RDF/JSON) formally approved by the group">RDF 1.1 JSON Alternate Serialization (RDF/JSON)</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2013-11-07 - <a title="RDF 1.1 JSON Alternate Serialization (RDF/JSON) publication history" href="/standards/history/rdf-json">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Davis
                            <li>Thomas Steiner
                            <li>Arnaud Le Hors
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="use cases and requirements for standardizing responsive images" data-tag="html" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-respimg-usecases-20131107/" title="Latest draft of Use Cases and Requirements for Standardizing Responsive Images formally approved by the group">Use Cases and Requirements for Standardizing Responsive Images</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2013-11-07 - <a title="Use Cases and Requirements for Standardizing Responsive Images publication history" href="/standards/history/respimg-usecases">History</a>
                        - <a href="https://usecases.responsiveimages.org" title="Latest editor's draft of Use Cases and Requirements for Standardizing Responsive Images">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Mathew Marquis
                            <li>Yoav Weiss
                            <li>David Newton
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xproc v2.0 requirements" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2013/WD-xproc-v2-req-20131105/" title="Latest draft of XProc V2.0 Requirements formally approved by the group">XProc V2.0 Requirements</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2013-11-05 - <a title="XProc V2.0 Requirements publication history" href="/standards/history/xproc-v2-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Miłowski
                            <li>James Fuller
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="touch events extensions" data-tag="dom webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2013/NOTE-touch-events-extensions-20131031/" title="Latest draft of Touch Events Extensions formally approved by the group">Touch Events Extensions</a></h2>
                        <p class=deliverer>Web Events Working Group</p>
                        <p class=pubdetails>2013-10-31 - <a title="Touch Events Extensions publication history" href="/standards/history/touch-events-extensions">History</a>
                        - <a href="https://dvcs.w3.org/hg/webevents/raw-file/default/touchevents.html" title="Latest editor's draft of Touch Events Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                            <li>Sangwhan Moon
                            <li>Matt Brubeck
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                    <li data-title="page visibility (second edition)" data-tag="performance webapi" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-page-visibility-20131029/" title="Latest draft of Page Visibility (Second Edition) formally approved by the group">Page Visibility (Second Edition)</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2013-10-29 - <a title="Page Visibility (Second Edition) publication history" href="/standards/history/page-visibility">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jatinder Mann
                            <li>Arvind Jain
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="internationalization tag set (its) version 2.0" data-tag="data html i18n" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-its20-20131029/" title="Latest draft of Internationalization Tag Set (ITS) Version 2.0 formally approved by the group">Internationalization  Tag  Set  (ITS)  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>MultilingualWeb-LT Working Group</p>
                        <p class=pubdetails>2013-10-29 - <a title="Internationalization Tag Set (ITS) Version 2.0 publication history" href="/standards/history/its20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Filip
                            <li>Shaun McCance
                            <li>David Lewis
                            <li>Christian Lieske
                            <li>Arle Lommel
                            <li>Jirka Kosek
                            <li>Felix Sasaki
                            <li>Yves Savourel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="selectors api level 2" data-tag="css webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2013/NOTE-selectors-api2-20131017/" title="Latest draft of Selectors API Level 2 formally approved by the group">Selectors  API  Level&nbsp;2</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2013-10-17 - <a title="Selectors API Level 2 publication history" href="/standards/history/selectors-api2">History</a>
                        - <a href="https://dev.w3.org/2006/webapi/selectors-api2/" title="Latest editor's draft of Selectors API Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lachlan Hunt
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="touch events" data-tag="webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-touch-events-20131010/" title="Latest draft of Touch Events formally approved by the group">Touch Events</a></h2>
                        <p class=deliverer>Web Events Working Group</p>
                        <p class=pubdetails>2013-10-10 - <a title="Touch Events publication history" href="/standards/history/touch-events">History</a>
                        - <a href="https://w3c.github.io/touch-events/" title="Latest editor's draft of Touch Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                            <li>Sangwhan Moon
                            <li>Matt Brubeck
                            <li>Arthur Barstow
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="use cases &amp; exploratory approaches for ruby markup" data-tag="html i18n" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-ruby-use-cases-20131008/" title="Latest draft of Use Cases &amp; Exploratory Approaches for Ruby Markup formally approved by the group">Use Cases & Exploratory Approaches for Ruby Markup</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2013-10-08 - <a title="Use Cases &amp; Exploratory Approaches for Ruby Markup publication history" href="/standards/history/ruby-use-cases">History</a>
                        - <a href="https://www.w3.org/International/docs/ruby/" title="Latest editor's draft of Use Cases &amp; Exploratory Approaches for Ruby Markup">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web cryptography api use cases" data-tag="security" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-webcrypto-usecases-20130910/" title="Latest draft of Web Cryptography API Use Cases formally approved by the group">Web Cryptography API Use Cases</a></h2>
                        <p class=deliverer>Web Cryptography Working Group</p>
                        <p class=pubdetails>2013-09-10 - <a title="Web Cryptography API Use Cases publication history" href="/standards/history/webcrypto-usecases">History</a>
                        - <a href="https://dvcs.w3.org/hg/webcrypto-usecases/raw-file/tip/Overview.html" title="Latest editor's draft of Web Cryptography API Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arun Ranganathan
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="guidance on applying wcag 2.0 to non-web information and communications technologies (wcag2ict)" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-wcag2ict-20130905/" title="Latest draft of Guidance on Applying WCAG 2.0 to Non-Web Information and Communications Technologies (WCAG2ICT) formally approved by the group">Guidance on Applying WCAG 2.0 to Non-Web Information and Communications Technologies (WCAG2ICT)</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2013-09-05 - <a title="Guidance on Applying WCAG 2.0 to Non-Web Information and Communications Technologies (WCAG2ICT) publication history" href="/standards/history/wcag2ict">History</a>
                        - <a href="https://www.w3.org/WAI/GL/wcag2ict/" title="Latest editor's draft of Guidance on Applying WCAG 2.0 to Non-Web Information and Communications Technologies (WCAG2ICT)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                            <li>Peter Korn
                            <li>Andi Snow-Weaver
                            <li>Gregg Vanderheiden
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="use cases and lessons for the data cube vocabulary" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-vocab-data-cube-use-cases-20130801/" title="Latest draft of Use Cases and Lessons for the Data Cube Vocabulary formally approved by the group">Use Cases and Lessons for the Data Cube Vocabulary</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2013-08-01 - <a title="Use Cases and Lessons for the Data Cube Vocabulary publication history" href="/standards/history/vocab-data-cube-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Benedikt Kaempgen
                            <li>Richard Cyganiak
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="registered organization vocabulary" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-vocab-regorg-20130801/" title="Latest draft of Registered Organization Vocabulary formally approved by the group">Registered Organization Vocabulary</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2013-08-01 - <a title="Registered Organization Vocabulary publication history" href="/standards/history/vocab-regorg">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Marios Meimaris
                            <li>Agis Papantoniou
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="asset description metadata schema (adms)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-vocab-adms-20130801/" title="Latest draft of Asset Description Metadata Schema (ADMS) formally approved by the group">Asset Description Metadata Schema (ADMS)</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2013-08-01 - <a title="Asset Description Metadata Schema (ADMS) publication history" href="/standards/history/vocab-adms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Gofran Shukair
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="linked data glossary" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-ld-glossary-20130627/" title="Latest draft of Linked Data Glossary formally approved by the group">Linked Data Glossary</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2013-06-27 - <a title="Linked Data Glossary publication history" href="/standards/history/ld-glossary">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernadette Hyland
                            <li>Ghislain Auguste Atemezing
                            <li>Michael Pendleton
                            <li>Biplav Srivastava
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="emma: extensible multimodal annotation markup language version 1.1" data-tag="" data-status="wd" data-version="">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2013/WD-emma11-20130627/" title="Latest draft of EMMA: Extensible MultiModal Annotation markup language Version 1.1 formally approved by the group">EMMA:  Extensible  MultiModal  Annotation  markup  language  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2013-06-27 - <a title="EMMA: Extensible MultiModal Annotation markup language Version 1.1 publication history" href="/standards/history/emma11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Johnston
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="test cases for canonical xml 2.0" data-tag="xml" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xml-c14n2-testcases-20130618/" title="Latest draft of Test cases for Canonical XML 2.0 formally approved by the group">Test  cases  for  Canonical  XML&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-06-18 - <a title="Test cases for Canonical XML 2.0 publication history" href="/standards/history/xml-c14n2-testcases">History</a>
                        - <a href="https://www.w3.org/2008/xmlsec/Drafts/c14n-20/test-cases/" title="Latest editor's draft of Test cases for Canonical XML 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pratik Datta
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="widget updates" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2013/NOTE-widgets-updates-20130606/" title="Latest draft of Widget Updates formally approved by the group">Widget Updates</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2013-06-06 - <a title="Widget Updates publication history" href="/standards/history/widgets-updates">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Richard Tibbett
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="urls in data primer" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2013/WD-urls-in-data-20130604/" title="Latest draft of URLs in Data Primer formally approved by the group">URLs in Data Primer</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2013-06-04 - <a title="URLs in Data Primer publication history" href="/standards/history/urls-in-data">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="html: the markup language (an html language reference)" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-html-markup-20130528/" title="Latest draft of HTML: The Markup Language (an HTML language reference) formally approved by the group">HTML: The Markup Language (an HTML language reference)</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2013-05-28 - <a title="HTML: The Markup Language (an HTML language reference) publication history" href="/standards/history/html-markup">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael[tm] Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html5: edition for web authors" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-html5-author-20130528/" title="Latest draft of HTML5: Edition for Web Authors formally approved by the group">HTML5: Edition for Web Authors</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2013-05-28 - <a title="HTML5: Edition for Web Authors publication history" href="/standards/history/html5-author">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                            <li>Travis Leithead
                            <li>Silvia Pfeiffer
                            <li>Erika Doyle Navara
                            <li>Theresa O&#039;Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="main element - an html5 extension specification" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-html-main-element-20130528/" title="Latest draft of main element - an HTML5 extension specification formally approved by the group">main element - an HTML5 extension specification</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2013-05-28 - <a title="main element - an HTML5 extension specification publication history" href="/standards/history/html-main-element">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="web intents" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2013/NOTE-web-intents-20130523/" title="Latest draft of Web Intents formally approved by the group">Web Intents</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2013-05-23 - <a title="Web Intents publication history" href="/standards/history/web-intents">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Greg Billock
                            <li>James Hawkins
                            <li>Paul Kinlan
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="java language binding for web idl" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-WebIDL-Java-20130514/" title="Latest draft of Java language binding for Web IDL formally approved by the group">Java language binding for Web IDL</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2013-05-14 - <a title="Java language binding for Web IDL publication history" href="/standards/history/WebIDL-Java">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="linking across provenance bundles" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-prov-links-20130430/" title="Latest draft of Linking Across Provenance Bundles formally approved by the group">Linking Across Provenance Bundles</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Linking Across Provenance Bundles publication history" href="/standards/history/prov-links">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Moreau
                            <li>Timothy Lebo
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-aq: provenance access and query" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-prov-aq-20130430/" title="Latest draft of PROV-AQ: Provenance Access and Query formally approved by the group">PROV-AQ: Provenance Access and Query</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-AQ: Provenance Access and Query publication history" href="/standards/history/prov-aq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Graham Klyne
                            <li>Paul Groth
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-n: the provenance notation" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-prov-n-20130430/" title="Latest draft of PROV-N: The Provenance Notation formally approved by the group">PROV-N: The Provenance Notation</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-N: The Provenance Notation publication history" href="/standards/history/prov-n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Moreau
                            <li>Paolo Missier
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="constraints of the prov data model" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-prov-constraints-20130430/" title="Latest draft of Constraints of the PROV Data Model formally approved by the group">Constraints of the PROV Data Model</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Constraints of the PROV Data Model publication history" href="/standards/history/prov-constraints">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Cheney
                            <li>Paolo Missier
                            <li>Luc Moreau
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="publishing and linking on the web" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-publishing-linking-20130430/" title="Latest draft of Publishing and Linking on the Web formally approved by the group">Publishing and Linking on the Web</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Publishing and Linking on the Web publication history" href="/standards/history/publishing-linking">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ashok Malhotra
                            <li>Larry Masinter
                            <li>Jeni Tennison
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-o: the prov ontology" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-prov-o-20130430/" title="Latest draft of PROV-O: The PROV Ontology formally approved by the group">PROV-O: The PROV Ontology</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-O: The PROV Ontology publication history" href="/standards/history/prov-o">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timothy Lebo
                            <li>Satya Sahoo
                            <li>Deborah McGuinness
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="dublin core to prov mapping" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-prov-dc-20130430/" title="Latest draft of Dublin Core to PROV Mapping formally approved by the group">Dublin Core to PROV Mapping</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Dublin Core to PROV Mapping publication history" href="/standards/history/prov-dc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Garijo
                            <li>Kai Eckert
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-overview" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-prov-overview-20130430/" title="Latest draft of PROV-Overview formally approved by the group">PROV-Overview</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-Overview publication history" href="/standards/history/prov-overview">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Groth
                            <li>Luc Moreau
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-dictionary: modeling provenance for dictionary data structures" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/" title="Latest draft of PROV-Dictionary: Modeling Provenance for Dictionary Data Structures formally approved by the group">PROV-Dictionary: Modeling Provenance for Dictionary Data Structures</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-Dictionary: Modeling Provenance for Dictionary Data Structures publication history" href="/standards/history/prov-dictionary">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tom De Nies
                            <li>Sam Coppens
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov model primer" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-prov-primer-20130430/" title="Latest draft of PROV Model Primer formally approved by the group">PROV Model Primer</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV Model Primer publication history" href="/standards/history/prov-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yolanda Gil
                            <li>Simon Miles
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-dm: the prov data model" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-prov-dm-20130430/" title="Latest draft of PROV-DM: The PROV Data Model formally approved by the group">PROV-DM: The PROV Data Model</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-DM: The PROV Data Model publication history" href="/standards/history/prov-dm">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Moreau
                            <li>Paolo Missier
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="semantics of the prov data model" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-prov-sem-20130430/" title="Latest draft of Semantics of the PROV Data Model formally approved by the group">Semantics of the PROV Data Model</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Semantics of the PROV Data Model publication history" href="/standards/history/prov-sem">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Cheney
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov implementation report" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-prov-implementations-20130430/" title="Latest draft of PROV Implementation Report formally approved by the group">PROV Implementation Report</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV Implementation Report publication history" href="/standards/history/prov-implementations">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Trung Dong Huynh
                            <li>Paul Groth
                            <li>Stephan Zednik
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-xml: the prov xml schema" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-prov-xml-20130430/" title="Latest draft of PROV-XML: The PROV XML Schema formally approved by the group">PROV-XML: The PROV XML Schema</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-XML: The PROV XML Schema publication history" href="/standards/history/prov-xml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hook Hua
                            <li>Curt Tilmes
                            <li>Stephan Zednik
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xml security generic hybrid ciphers" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmlsec-generic-hybrid-20130411/" title="Latest draft of XML Security Generic Hybrid Ciphers formally approved by the group">XML Security Generic Hybrid Ciphers</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security Generic Hybrid Ciphers publication history" href="/standards/history/xmlsec-generic-hybrid">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Magnus Nyström
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml encryption syntax and processing version 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-xmlenc-core1-20130411/" title="Latest draft of XML Encryption Syntax and Processing Version 1.1 formally approved by the group">XML  Encryption  Syntax  and  Processing  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Encryption Syntax and Processing Version 1.1 publication history" href="/standards/history/xmlenc-core1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Donald Eastlake
                            <li>Joseph Reagle
                            <li>Frederick Hirsch
                            <li>Thomas Roessler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xml security 1.1 requirements and design considerations" data-tag="xml" data-status="note" data-version="">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmlsec-reqs-20130411/" title="Latest draft of XML Security 1.1 Requirements and Design Considerations formally approved by the group">XML Security 1.1 Requirements and Design Considerations</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security 1.1 Requirements and Design Considerations publication history" href="/standards/history/xmlsec-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Thomas Roessler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="functional explanation of changes in xml encryption 1.1" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmlenc-core1-explain-20130411/" title="Latest draft of Functional Explanation of Changes in XML Encryption 1.1 formally approved by the group">Functional  Explanation  of  Changes  in  XML  Encryption&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="Functional Explanation of Changes in XML Encryption 1.1 publication history" href="/standards/history/xmlenc-core1-explain">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml signature best practices" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmldsig-bestpractices-20130411/" title="Latest draft of XML Signature Best Practices formally approved by the group">XML Signature Best Practices</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Signature Best Practices publication history" href="/standards/history/xmldsig-bestpractices">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Pratik Datta
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml security 2.0 requirements and design considerations" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmlsec-reqs2-20130411/" title="Latest draft of XML Security 2.0 Requirements and Design Considerations formally approved by the group">XML Security 2.0 Requirements and Design Considerations</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security 2.0 Requirements and Design Considerations publication history" href="/standards/history/xmlsec-reqs2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Pratik Datta
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="canonical xml version 2.0" data-tag="xml" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xml-c14n2-20130411/" title="Latest draft of Canonical XML Version 2.0 formally approved by the group">Canonical  XML  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="Canonical XML Version 2.0 publication history" href="/standards/history/xml-c14n2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Glenn Marcy
                            <li>Pratik Datta
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml signature properties" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-xmldsig-properties-20130411/" title="Latest draft of XML Signature Properties formally approved by the group">XML Signature Properties</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Signature Properties publication history" href="/standards/history/xmldsig-properties">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml signature syntax and processing version 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-xmldsig-core1-20130411/" title="Latest draft of XML Signature Syntax and Processing Version 1.1 formally approved by the group">XML  Signature  Syntax  and  Processing  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Signature Syntax and Processing Version 1.1 publication history" href="/standards/history/xmldsig-core1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Donald Eastlake
                            <li>Joseph Reagle
                            <li>David Solo
                            <li>Frederick Hirsch
                            <li>Magnus Nyström
                            <li>Thomas Roessler
                            <li>Kelvin Yiu
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml security relax ng schemas" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmlsec-rngschema-20130411/" title="Latest draft of XML Security RELAX NG Schemas formally approved by the group">XML Security RELAX NG Schemas</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security RELAX NG Schemas publication history" href="/standards/history/xmlsec-rngschema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Murata Makoto
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml encryption 1.1 cipherreference processing using 2.0 transforms" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmlenc-transform20-20130411/" title="Latest draft of XML Encryption 1.1 CipherReference Processing using 2.0 Transforms formally approved by the group">XML Encryption 1.1 CipherReference Processing using 2.0 Transforms</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Encryption 1.1 CipherReference Processing using 2.0 Transforms publication history" href="/standards/history/xmlenc-transform20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml security algorithm cross-reference" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmlsec-algorithms-20130411/" title="Latest draft of XML Security Algorithm Cross-Reference formally approved by the group">XML Security Algorithm Cross-Reference</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security Algorithm Cross-Reference publication history" href="/standards/history/xmlsec-algorithms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Thomas Roessler
                            <li>Kelvin Yiu
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xml signature streaming profile of xpath 1.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmldsig-xpath-20130411/" title="Latest draft of XML Signature Streaming Profile of XPath 1.0 formally approved by the group">XML  Signature  Streaming  Profile  of  XPath&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Signature Streaming Profile of XPath 1.0 publication history" href="/standards/history/xmldsig-xpath">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pratik Datta
                            <li>Frederick Hirsch
                            <li>Meiko Jensen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="functional explanation of changes in xml signature 1.1" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-xmldsig-core1-explain-20130411/" title="Latest draft of Functional Explanation of Changes in XML Signature 1.1 formally approved by the group">Functional  Explanation  of  Changes  in  XML  Signature&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="Functional Explanation of Changes in XML Signature 1.1 publication history" href="/standards/history/xmldsig-core1-explain">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="role attribute 1.0" data-tag="accessibility" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-role-attribute-20130328/" title="Latest draft of Role Attribute 1.0 formally approved by the group">Role  Attribute&nbsp;1.0</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2013-03-28 - <a title="Role Attribute 1.0 publication history" href="/standards/history/role-attribute">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 service description" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-service-description-20130321/" title="Latest draft of SPARQL 1.1 Service Description formally approved by the group">SPARQL 1.1 Service Description</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Service Description publication history" href="/standards/history/sparql11-service-description">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregory Williams
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 overview" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-overview-20130321/" title="Latest draft of SPARQL 1.1 Overview formally approved by the group">SPARQL 1.1 Overview</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Overview publication history" href="/standards/history/sparql11-overview">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 update" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-update-20130321/" title="Latest draft of SPARQL 1.1 Update formally approved by the group">SPARQL 1.1 Update</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Update publication history" href="/standards/history/sparql11-update">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paula Gearon
                            <li>Alexandre Passant
                            <li>Axel Polleres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 protocol" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-protocol-20130321/" title="Latest draft of SPARQL 1.1 Protocol formally approved by the group">SPARQL 1.1 Protocol</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Protocol publication history" href="/standards/history/sparql11-protocol">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lee Feigenbaum
                            <li>Gregory Williams
                            <li>Kendall Clark
                            <li>Elias Torres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 query language" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-query-20130321/" title="Latest draft of SPARQL 1.1 Query Language formally approved by the group">SPARQL 1.1 Query Language</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Query Language publication history" href="/standards/history/sparql11-query">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Harris
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 entailment regimes" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-entailment-20130321/" title="Latest draft of SPARQL 1.1 Entailment Regimes formally approved by the group">SPARQL 1.1 Entailment Regimes</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Entailment Regimes publication history" href="/standards/history/sparql11-entailment">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Birte Glimm
                            <li>Chimezie Ogbuji
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 query results csv and tsv formats" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-results-csv-tsv-20130321/" title="Latest draft of SPARQL 1.1 Query Results CSV and TSV Formats formally approved by the group">SPARQL 1.1 Query Results CSV and TSV Formats</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Query Results CSV and TSV Formats publication history" href="/standards/history/sparql11-results-csv-tsv">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql query results xml format (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-rdf-sparql-XMLres-20130321/" title="Latest draft of SPARQL Query Results XML Format (Second Edition) formally approved by the group">SPARQL Query Results XML Format (Second Edition)</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL Query Results XML Format (Second Edition) publication history" href="/standards/history/rdf-sparql-XMLres">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Beckett
                            <li>Jeen Broekstra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 federated query" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-federated-query-20130321/" title="Latest draft of SPARQL 1.1 Federated Query formally approved by the group">SPARQL 1.1 Federated Query</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Federated Query publication history" href="/standards/history/sparql11-federated-query">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Carlos Buil Aranda
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 query results json format" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-results-json-20130321/" title="Latest draft of SPARQL 1.1 Query Results JSON Format formally approved by the group">SPARQL 1.1 Query Results JSON Format</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Query Results JSON Format publication history" href="/standards/history/sparql11-results-json">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 graph store http protocol" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-sparql11-http-rdf-update-20130321/" title="Latest draft of SPARQL 1.1 Graph Store HTTP Protocol formally approved by the group">SPARQL 1.1 Graph Store HTTP Protocol</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Graph Store HTTP Protocol publication history" href="/standards/history/sparql11-http-rdf-update">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chimezie Ogbuji
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="css print profile" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2013/NOTE-css-print-20130314/" title="Latest draft of CSS Print Profile formally approved by the group">CSS Print Profile</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2013-03-14 - <a title="CSS Print Profile publication history" href="/standards/history/css-print">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Melinda Grant
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif basic logic dialect (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-rif-bld-20130205/" title="Latest draft of RIF Basic Logic Dialect (Second Edition) formally approved by the group">RIF Basic Logic Dialect (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Basic Logic Dialect (Second Edition) publication history" href="/standards/history/rif-bld">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harold Boley
                            <li>Michael Kifer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif production rule dialect (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-rif-prd-20130205/" title="Latest draft of RIF Production Rule Dialect (Second Edition) formally approved by the group">RIF Production Rule Dialect (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Production Rule Dialect (Second Edition) publication history" href="/standards/history/rif-prd">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christian de Sainte Marie
                            <li>Gary Hallmark
                            <li>Adrian Paschke
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif core dialect (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-rif-core-20130205/" title="Latest draft of RIF Core Dialect (Second Edition) formally approved by the group">RIF Core Dialect (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Core Dialect (Second Edition) publication history" href="/standards/history/rif-core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harold Boley
                            <li>Gary Hallmark
                            <li>Michael Kifer
                            <li>Adrian Paschke
                            <li>Axel Polleres
                            <li>Dave Reynolds
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif primer (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-rif-primer-20130205/" title="Latest draft of RIF Primer (Second Edition) formally approved by the group">RIF Primer (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Primer (Second Edition) publication history" href="/standards/history/rif-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Leora Morgenstern
                            <li>Christopher Welty
                            <li>Harold Boley
                            <li>Gary Hallmark
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif datatypes and built-ins 1.0 (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-rif-dtb-20130205/" title="Latest draft of RIF Datatypes and Built-Ins 1.0 (Second Edition) formally approved by the group">RIF Datatypes and Built-Ins 1.0 (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Datatypes and Built-Ins 1.0 (Second Edition) publication history" href="/standards/history/rif-dtb">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Axel Polleres
                            <li>Harold Boley
                            <li>Michael Kifer
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif use cases and requirements (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-rif-ucr-20130205/" title="Latest draft of RIF Use Cases and Requirements (Second Edition) formally approved by the group">RIF Use Cases and Requirements (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Use Cases and Requirements (Second Edition) publication history" href="/standards/history/rif-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Adrian Paschke
                            <li>Leora Morgenstern
                            <li>David Hirtle
                            <li>Allen Ginsberg
                            <li>Paula-Lavinia Patranjan
                            <li>Francis McCabe
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif rdf and owl compatibility (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-rif-rdf-owl-20130205/" title="Latest draft of RIF RDF and OWL Compatibility (Second Edition) formally approved by the group">RIF RDF and OWL Compatibility (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF RDF and OWL Compatibility (Second Edition) publication history" href="/standards/history/rif-rdf-owl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jos de Bruijn
                            <li>Christopher Welty
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif framework for logic dialects (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2013/REC-rif-fld-20130205/" title="Latest draft of RIF Framework for Logic Dialects (Second Edition) formally approved by the group">RIF Framework for Logic Dialects (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Framework for Logic Dialects (Second Edition) publication history" href="/standards/history/rif-fld">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harold Boley
                            <li>Michael Kifer
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif combination with xml data (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-rif-xml-data-20130205/" title="Latest draft of RIF Combination with XML data (Second Edition) formally approved by the group">RIF Combination with XML data (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Combination with XML data (Second Edition) publication history" href="/standards/history/rif-xml-data">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christian de Sainte Marie
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif test cases (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-rif-test-20130205/" title="Latest draft of RIF Test Cases (Second Edition) formally approved by the group">RIF Test Cases (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Test Cases (Second Edition) publication history" href="/standards/history/rif-test">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stella Mitchell
                            <li>Leora Morgenstern
                            <li>Adrian Paschke
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="ttml simple delivery profile for closed captions (us)" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-ttml10-sdp-us-20130205/" title="Latest draft of TTML Simple Delivery Profile for Closed Captions (US) formally approved by the group">TTML Simple Delivery Profile for Closed Captions (US)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="TTML Simple Delivery Profile for Closed Captions (US) publication history" href="/standards/history/ttml10-sdp-us">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                            <li>Monica Martin
                            <li>Sean Hayes
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif in rdf (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-rif-in-rdf-20130205/" title="Latest draft of RIF In RDF (Second Edition) formally approved by the group">RIF In RDF (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF In RDF (Second Edition) publication history" href="/standards/history/rif-in-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sandro Hawke
                            <li>Axel Polleres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif overview (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-rif-overview-20130205/" title="Latest draft of RIF Overview (Second Edition) formally approved by the group">RIF Overview (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Overview (Second Edition) publication history" href="/standards/history/rif-overview">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kifer
                            <li>Harold Boley
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="owl 2 rl in rif (second edition)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-rif-owl-rl-20130205/" title="Latest draft of OWL 2 RL in RIF (Second Edition) formally approved by the group">OWL 2 RL in RIF (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="OWL 2 RL in RIF (Second Edition) publication history" href="/standards/history/rif-owl-rl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Reynolds
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web audio processing: use cases and requirements" data-tag="media webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2013/NOTE-webaudio-usecases-20130129/" title="Latest draft of Web Audio Processing: Use Cases and Requirements formally approved by the group">Web Audio Processing: Use Cases and Requirements</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2013-01-29 - <a title="Web Audio Processing: Use Cases and Requirements publication history" href="/standards/history/webaudio-usecases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joe Berkovitz
                            <li>Olivier Thereaux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="navigation timing" data-tag="performance webapi" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-navigation-timing-20121217/" title="Latest draft of Navigation Timing formally approved by the group">Navigation Timing</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2012-12-17 - <a title="Navigation Timing publication history" href="/standards/history/navigation-timing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Zhiheng Wang
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="woff file format 1.0" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-WOFF-20121213/" title="Latest draft of WOFF File Format 1.0 formally approved by the group">WOFF  File  Format&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Fonts Working Group</p>
                        <p class=pubdetails>2012-12-13 - <a title="WOFF File Format 1.0 publication history" href="/standards/history/WOFF">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Kew
                            <li>Tal Leming
                            <li>Erik van Blokland
                          </ul>
                                  </li>
                                                                                                                          <li data-title="owl 2 web ontology language conformance (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-conformance-20121211/" title="Latest draft of OWL 2 Web Ontology Language Conformance (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Conformance (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Conformance (Second Edition) publication history" href="/standards/history/owl2-conformance">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael[tm] Smith
                            <li>Ian Horrocks
                            <li>Markus Krötzsch
                            <li>Birte Glimm
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language quick reference guide (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-quick-reference-20121211/" title="Latest draft of OWL 2 Web Ontology Language Quick Reference Guide (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Quick Reference Guide (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Quick Reference Guide (Second Edition) publication history" href="/standards/history/owl2-quick-reference">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jie Bao
                            <li>Elisa Kendall
                            <li>Deborah McGuinness
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language data range extension: linear equations (second edition)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-owl2-dr-linear-20121211/" title="Latest draft of OWL 2 Web Ontology Language Data Range Extension: Linear Equations (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Data Range Extension: Linear Equations (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Data Range Extension: Linear Equations (Second Edition) publication history" href="/standards/history/owl2-dr-linear">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bijan Parsia
                            <li>Uli Sattler
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language rdf-based semantics (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-rdf-based-semantics-20121211/" title="Latest draft of OWL 2 Web Ontology Language RDF-Based Semantics (Second Edition) formally approved by the group">OWL 2 Web Ontology Language RDF-Based Semantics (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language RDF-Based Semantics (Second Edition) publication history" href="/standards/history/owl2-rdf-based-semantics">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language manchester syntax (second edition)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-owl2-manchester-syntax-20121211/" title="Latest draft of OWL 2 Web Ontology Language Manchester Syntax (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Manchester Syntax (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Manchester Syntax (Second Edition) publication history" href="/standards/history/owl2-manchester-syntax">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Horridge
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdf:plainliteral: a datatype for rdf plain literals (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-rdf-plain-literal-20121211/" title="Latest draft of rdf:PlainLiteral: A Datatype for RDF Plain Literals (Second Edition) formally approved by the group">rdf:PlainLiteral: A Datatype for RDF Plain Literals (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="rdf:PlainLiteral: A Datatype for RDF Plain Literals (Second Edition) publication history" href="/standards/history/rdf-plain-literal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jie Bao
                            <li>Sandro Hawke
                            <li>Boris Motik
                            <li>Peter Patel-Schneider
                            <li>Axel Polleres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language xml serialization (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-xml-serialization-20121211/" title="Latest draft of OWL 2 Web Ontology Language XML Serialization (Second Edition) formally approved by the group">OWL 2 Web Ontology Language XML Serialization (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language XML Serialization (Second Edition) publication history" href="/standards/history/owl2-xml-serialization">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Motik
                            <li>Bijan Parsia
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language new features and rationale (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-new-features-20121211/" title="Latest draft of OWL 2 Web Ontology Language New Features and Rationale (Second Edition) formally approved by the group">OWL 2 Web Ontology Language New Features and Rationale (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language New Features and Rationale (Second Edition) publication history" href="/standards/history/owl2-new-features">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christine Golbreich
                            <li>Evan Wallace
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="owl 2 web ontology language mapping to rdf graphs (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-mapping-to-rdf-20121211/" title="Latest draft of OWL 2 Web Ontology Language Mapping to RDF Graphs (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Mapping to RDF Graphs (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Mapping to RDF Graphs (Second Edition) publication history" href="/standards/history/owl2-mapping-to-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Peter Patel-Schneider
                            <li>Boris Motik
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language document overview (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-overview-20121211/" title="Latest draft of OWL 2 Web Ontology Language Document Overview (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Document Overview (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Document Overview (Second Edition) publication history" href="/standards/history/owl2-overview">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language primer (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-primer-20121211/" title="Latest draft of OWL 2 Web Ontology Language Primer (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Primer (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Primer (Second Edition) publication history" href="/standards/history/owl2-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pascal Hitzler
                            <li>Markus Krötzsch
                            <li>Bijan Parsia
                            <li>Peter Patel-Schneider
                            <li>Sebastian Rudolph
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="owl 2 web ontology language direct semantics (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-direct-semantics-20121211/" title="Latest draft of OWL 2 Web Ontology Language Direct Semantics (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Direct Semantics (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Direct Semantics (Second Edition) publication history" href="/standards/history/owl2-direct-semantics">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Motik
                            <li>Peter Patel-Schneider
                            <li>Bernardo Cuenca Grau
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language profiles (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-profiles-20121211/" title="Latest draft of OWL 2 Web Ontology Language Profiles (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Profiles (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Profiles (Second Edition) publication history" href="/standards/history/owl2-profiles">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Motik
                            <li>Bernardo Cuenca Grau
                            <li>Ian Horrocks
                            <li>Zhe Wu
                            <li>Achille Fokoue
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="owl 2 web ontology language structural specification and functional-style syntax (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-owl2-syntax-20121211/" title="Latest draft of OWL 2 Web Ontology Language Structural Specification and Functional-Style Syntax (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Structural Specification and Functional-Style Syntax (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Structural Specification and Functional-Style Syntax (Second Edition) publication history" href="/standards/history/owl2-syntax">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Motik
                            <li>Peter Patel-Schneider
                            <li>Bijan Parsia
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml encryption 1.1 interop test report" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-xmlenc-core1-interop-20121113/" title="Latest draft of XML Encryption 1.1 Interop Test Report formally approved by the group">XML Encryption 1.1 Interop Test Report</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2012-11-13 - <a title="XML Encryption 1.1 Interop Test Report publication history" href="/standards/history/xmlenc-core1-interop">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pratik Datta
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml signature 1.1 interop test report" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-xmldsig-core1-interop-20121113/" title="Latest draft of XML Signature 1.1 Interop Test Report formally approved by the group">XML Signature 1.1 Interop Test Report</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2012-11-13 - <a title="XML Signature 1.1 Interop Test Report publication history" href="/standards/history/xmldsig-core1-interop">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Pratik Datta
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="best practices for fragment identifiers and media type definitions" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2012/WD-fragid-best-practices-20121025/" title="Latest draft of Best Practices for Fragment Identifiers and Media Type Definitions formally approved by the group">Best Practices for Fragment Identifiers and Media Type Definitions</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2012-10-25 - <a title="Best Practices for Fragment Identifiers and Media Type Definitions publication history" href="/standards/history/fragid-best-practices">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="multimodal architecture and interfaces" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-mmi-arch-20121025/" title="Latest draft of Multimodal Architecture and Interfaces formally approved by the group">Multimodal Architecture and Interfaces</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2012-10-25 - <a title="Multimodal Architecture and Interfaces publication history" href="/standards/history/mmi-arch">History</a>
                        </p>
                                  </li>
                                                                                                                                                <li data-title="associating schemas with xml documents 1.0 (third edition)" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-xml-model-20121009/" title="Latest draft of Associating Schemas with XML documents 1.0 (Third Edition) formally approved by the group">Associating Schemas with XML documents 1.0 (Third Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2012-10-09 - <a title="Associating Schemas with XML documents 1.0 (Third Edition) publication history" href="/standards/history/xml-model">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                            <li>Jirka Kosek
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web api design cookbook" data-tag="webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-api-design-20121002/" title="Latest draft of Web API Design Cookbook formally approved by the group">Web API Design Cookbook</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2012-10-02 - <a title="Web API Design Cookbook publication history" href="/standards/history/api-design">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                            <li>Jungkee Song
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="r2rml: rdb to rdf mapping language" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-r2rml-20120927/" title="Latest draft of R2RML: RDB to RDF Mapping Language formally approved by the group">R2RML: RDB to RDF Mapping Language</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2012-09-27 - <a title="R2RML: RDB to RDF Mapping Language publication history" href="/standards/history/r2rml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Souripriya Das
                            <li>Seema Sundara
                            <li>Richard Cyganiak
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a direct mapping of relational data to rdf" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-rdb-direct-mapping-20120927/" title="Latest draft of A Direct Mapping of Relational Data to RDF formally approved by the group">A Direct Mapping of Relational Data to RDF</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2012-09-27 - <a title="A Direct Mapping of Relational Data to RDF publication history" href="/standards/history/rdb-direct-mapping">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcelo Arenas
                            <li>Alexandre Bertails
                            <li>Eric Prud&#039;hommeaux
                            <li>Juan Sequeda
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="media fragments uri 1.0 (basic)" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-media-frags-20120925/" title="Latest draft of Media Fragments URI 1.0 (basic) formally approved by the group">Media Fragments URI 1.0 (basic)</a></h2>
                        <p class=deliverer>Media Fragments Working Group</p>
                        <p class=pubdetails>2012-09-25 - <a title="Media Fragments URI 1.0 (basic) publication history" href="/standards/history/media-frags">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Raphaël Troncy
                            <li>Erik Mannens
                            <li>Silvia Pfeiffer
                            <li>Davy Van Deursen
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="research report on web accessibility metrics" data-tag="accessibility" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2012/WD-accessibility-metrics-report-20120830/" title="Latest draft of Research Report on Web Accessibility Metrics formally approved by the group">Research Report on Web Accessibility Metrics</a></h2>
                        <p class=deliverer>Research and Development Working Group</p>
                        <p class=pubdetails>2012-08-30 - <a title="Research Report on Web Accessibility Metrics publication history" href="/standards/history/accessibility-metrics-report">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markel Vigo
                            <li>Giorgio Brajnik
                            <li>Joshue O Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdb2rdf implementation report" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-rdb2rdf-implementations-20120814/" title="Latest draft of RDB2RDF Implementation Report formally approved by the group">RDB2RDF Implementation Report</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2012-08-14 - <a title="RDB2RDF Implementation Report publication history" href="/standards/history/rdb2rdf-implementations">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Villazón-Terrazas
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="r2rml and direct mapping test cases" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-rdb2rdf-test-cases-20120814/" title="Latest draft of R2RML and Direct Mapping Test Cases formally approved by the group">R2RML and Direct Mapping Test Cases</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2012-08-14 - <a title="R2RML and Direct Mapping Test Cases publication history" href="/standards/history/rdb2rdf-test-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Villazón-Terrazas
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xforms 2.0: xpath expression module" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2012/WD-xforms-xpath-20120807/" title="Latest draft of XForms 2.0: XPath expression module formally approved by the group">XForms 2.0: XPath expression module</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2012-08-07 - <a title="XForms 2.0: XPath expression module publication history" href="/standards/history/xforms-xpath">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nick Van Den Bleeken
                            <li>John Boyer
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="xforms 2.0" data-tag="xml" data-status="wd" data-version="upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2012/WD-xforms20-20120807/" title="Latest draft of XForms 2.0 formally approved by the group">XForms&nbsp;2.0</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2012-08-07 - <a title="XForms 2.0 publication history" href="/standards/history/xforms20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>L Klotz
                            <li>Steven Pemberton
                            <li>Nick Van Den Bleeken
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="registration &amp; discovery of multimodal modality components in multimodal systems: use cases and requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-mmi-discovery-20120705/" title="Latest draft of Registration &amp; Discovery of Multimodal Modality Components in Multimodal Systems: Use Cases and Requirements formally approved by the group">Registration & Discovery of Multimodal Modality Components in Multimodal Systems: Use Cases and Requirements</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2012-07-05 - <a title="Registration &amp; Discovery of Multimodal Modality Components in Multimodal Systems: Use Cases and Requirements publication history" href="/standards/history/mmi-discovery">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>B Helena RODRIGUEZ
                          </ul>
                                  </li>
                                                                                                                          <li data-title="rdf interfaces" data-tag="data webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-rdf-interfaces-20120705/" title="Latest draft of RDF Interfaces formally approved by the group">RDF Interfaces</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2012-07-05 - <a title="RDF Interfaces publication history" href="/standards/history/rdf-interfaces">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nathan Rixham
                            <li>Manu Sporny
                            <li>Benjamin Adrian
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdf api" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-rdf-api-20120705/" title="Latest draft of RDF API formally approved by the group">RDF API</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2012-07-05 - <a title="RDF API publication history" href="/standards/history/rdf-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nathan Rixham
                            <li>Manu Sporny
                            <li>Benjamin Adrian
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdfa api" data-tag="data html webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-rdfa-api-20120705/" title="Latest draft of RDFa API formally approved by the group">RDFa API</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2012-07-05 - <a title="RDFa API publication history" href="/standards/history/rdfa-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Benjamin Adrian
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web application privacy best practices" data-tag="webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-app-privacy-bp-20120703/" title="Latest draft of Web Application Privacy Best Practices formally approved by the group">Web Application Privacy Best Practices</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2012-07-03 - <a title="Web Application Privacy Best Practices publication history" href="/standards/history/app-privacy-bp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="media queries" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-css3-mediaqueries-20120619/" title="Latest draft of Media Queries formally approved by the group">Media Queries</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2012-06-19 - <a title="Media Queries publication history" href="/standards/history/css3-mediaqueries">History</a>
                        - <a href="https://drafts.csswg.org/mediaqueries-3/" title="Latest editor's draft of Media Queries">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="mediastream processing api" data-tag="media webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-streamproc-20120531/" title="Latest draft of MediaStream Processing API formally approved by the group">MediaStream Processing API</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2012-05-31 - <a title="MediaStream Processing API publication history" href="/standards/history/streamproc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert O&#039;Callahan
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="the from-origin header" data-tag="security" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-from-origin-20120529/" title="Latest draft of The From-Origin Header formally approved by the group">The From-Origin Header</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2012-05-29 - <a title="The From-Origin Header publication history" href="/standards/history/from-origin">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="xbl 2.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-xbl-20120524/" title="Latest draft of XBL 2.0 formally approved by the group">XBL&nbsp;2.0</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2012-05-24 - <a title="XBL 2.0 publication history" href="/standards/history/xbl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web services internationalization (ws-i18n)" data-tag="i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-ws-i18n-20120522/" title="Latest draft of Web Services Internationalization (WS-I18N) formally approved by the group">Web Services Internationalization (WS-I18N)</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2012-05-22 - <a title="Web Services Internationalization (WS-I18N) publication history" href="/standards/history/ws-i18n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                            <li>Mary Trumble
                            <li>Felix Sasaki
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c xml schema definition language (xsd) 1.1 part 1: structures" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-xmlschema11-1-20120405/" title="Latest draft of W3C XML Schema Definition Language (XSD) 1.1 Part 1: Structures formally approved by the group">W3C XML Schema Definition Language (XSD) 1.1 Part 1: Structures</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2012-04-05 - <a title="W3C XML Schema Definition Language (XSD) 1.1 Part 1: Structures publication history" href="/standards/history/xmlschema11-1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sandy Gao
                            <li>Michael Sperberg-McQueen
                            <li>Henry Thompson
                            <li>Noah Mendelsohn
                            <li>David Beech
                            <li>Murray Maloney
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="terms for describing people" data-tag="data" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2012/WD-vocab-people-20120405/" title="Latest draft of Terms for describing people formally approved by the group">Terms for describing people</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2012-04-05 - <a title="Terms for describing people publication history" href="/standards/history/vocab-people">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c xml schema definition language (xsd) 1.1 part 2: datatypes" data-tag="xml" data-status="rec" data-version="upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/" title="Latest draft of W3C XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes formally approved by the group">W3C XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2012-04-05 - <a title="W3C XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes publication history" href="/standards/history/xmlschema11-2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Peterson
                            <li>Sandy Gao
                            <li>Ashok Malhotra
                            <li>Michael Sperberg-McQueen
                            <li>Henry Thompson
                            <li>Paul V. Biron
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="smil timesheets 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-timesheets-20120328/" title="Latest draft of SMIL Timesheets 1.0 formally approved by the group">SMIL  Timesheets&nbsp;1.0</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2012-03-28 - <a title="SMIL Timesheets 1.0 publication history" href="/standards/history/timesheets">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Petri Vuorimaa
                            <li>Dick Bulterman
                            <li>Pablo Cesar
                          </ul>
                                  </li>
                                                                                                                          <li data-title="the media capture api" data-tag="media webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-media-capture-api-20120322/" title="Latest draft of The Media Capture API formally approved by the group">The Media Capture API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2012-03-22 - <a title="The Media Capture API publication history" href="/standards/history/media-capture-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dzung Tran
                            <li>Ilkka Oksanen
                            <li>Ingmar Kliche
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="widget uri scheme" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-widgets-uri-20120313/" title="Latest draft of Widget URI scheme formally approved by the group">Widget URI scheme</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2012-03-13 - <a title="Widget URI scheme publication history" href="/standards/history/widgets-uri">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="html data guide" data-tag="data html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-html-data-guide-20120308/" title="Latest draft of HTML Data Guide formally approved by the group">HTML Data Guide</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2012-03-08 - <a title="HTML Data Guide publication history" href="/standards/history/html-data-guide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mediastream capture scenarios" data-tag="media webapi" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2012/WD-capture-scenarios-20120306/" title="Latest draft of MediaStream Capture Scenarios formally approved by the group">MediaStream Capture Scenarios</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2012-03-06 - <a title="MediaStream Capture Scenarios publication history" href="/standards/history/capture-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="soap over java message service 1.0" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-soapjms-20120216/" title="Latest draft of SOAP over Java Message Service 1.0 formally approved by the group">SOAP  over  Java  Message  Service&nbsp;1.0</a></h2>
                        <p class=deliverer>SOAP-JMS Binding Working Group</p>
                        <p class=pubdetails>2012-02-16 - <a title="SOAP over Java Message Service 1.0 publication history" href="/standards/history/soapjms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Adams
                            <li>Peter Easton
                            <li>Eric Johnson
                            <li>Roland Merrick
                            <li>Mark Phillips
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xinclude 1.1 requirement and use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-xinclude-11-requirements-20120214/" title="Latest draft of XInclude 1.1 Requirement and Use Cases formally approved by the group">XInclude 1.1 Requirement and Use Cases</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2012-02-14 - <a title="XInclude 1.1 Requirement and Use Cases publication history" href="/standards/history/xinclude-11-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="ontology for media resources 1.0" data-tag="media" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2012/REC-mediaont-10-20120209/" title="Latest draft of Ontology for Media Resources 1.0 formally approved by the group">Ontology  for  Media  Resources&nbsp;1.0</a></h2>
                        <p class=deliverer>Media Annotations Working Group</p>
                        <p class=pubdetails>2012-02-09 - <a title="Ontology for Media Resources 1.0 publication history" href="/standards/history/mediaont-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wonsuk Lee
                            <li>Werner Bailer
                            <li>Tobias Bürger
                            <li>Pierre-Antoine Champin
                            <li>Jean-Pierre EVAIN
                            <li>Véronique Malaisé
                            <li>Thierry Michel
                            <li>Felix Sasaki
                            <li>Joakim Söderberg
                            <li>Florian Stegmaier
                            <li>John Strassner
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html/xml task force report" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-html-xml-tf-report-20120209/" title="Latest draft of HTML/XML Task Force Report formally approved by the group">HTML/XML Task Force Report</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2012-02-09 - <a title="HTML/XML Task Force Report publication history" href="/standards/history/html-xml-tf-report">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="usage patterns for client-side uri parameters" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2012/NOTE-hash-in-uri-20120209/" title="Latest draft of Usage Patterns For Client-Side URI parameters formally approved by the group">Usage Patterns For Client-Side URI parameters</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2012-02-09 - <a title="Usage Patterns For Client-Side URI parameters publication history" href="/standards/history/hash-in-uri">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>T.V. Raman
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="mmi interoperability test report" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2012/NOTE-mmi-interop-20120124/" title="Latest draft of MMI interoperability test report formally approved by the group">MMI interoperability test report</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2012-01-24 - <a title="MMI interoperability test report publication history" href="/standards/history/mmi-interop">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ingmar Kliche
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="extensible stylesheet language (xsl) version 2.0" data-tag="xml" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2012/WD-xslfo20-20120117/" title="Latest draft of Extensible Stylesheet Language (XSL) Version 2.0 formally approved by the group">Extensible  Stylesheet  Language  (XSL)  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Print and Page Layout Working Group</p>
                        <p class=pubdetails>2012-01-17 - <a title="Extensible Stylesheet Language (XSL) Version 2.0 publication history" href="/standards/history/xslfo20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Pawson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="audio processing api" data-tag="media webapi" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2011/WD-audioproc-20111215/" title="Latest draft of Audio Processing API formally approved by the group">Audio Processing API</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2011-12-15 - <a title="Audio Processing API publication history" href="/standards/history/audioproc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert O&#039;Callahan
                            <li>Chris Rogers
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web services enumeration (ws-enumeration)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-ws-enumeration-20111213/" title="Latest draft of Web Services Enumeration (WS-Enumeration) formally approved by the group">Web Services Enumeration (WS-Enumeration)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Enumeration (WS-Enumeration) publication history" href="/standards/history/ws-enumeration">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services event descriptions (ws-eventdescriptions)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-ws-event-descriptions-20111213/" title="Latest draft of Web Services Event Descriptions (WS-EventDescriptions) formally approved by the group">Web Services Event Descriptions (WS-EventDescriptions)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Event Descriptions (WS-EventDescriptions) publication history" href="/standards/history/ws-event-descriptions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services soap assertions (ws-soapassertions)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-ws-soap-assertions-20111213/" title="Latest draft of Web Services SOAP Assertions (WS-SOAPAssertions) formally approved by the group">Web Services SOAP Assertions (WS-SOAPAssertions)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services SOAP Assertions (WS-SOAPAssertions) publication history" href="/standards/history/ws-soap-assertions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services eventing (ws-eventing)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-ws-eventing-20111213/" title="Latest draft of Web Services Eventing (WS-Eventing) formally approved by the group">Web Services Eventing (WS-Eventing)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Eventing (WS-Eventing) publication history" href="/standards/history/ws-eventing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services metadata exchange (ws-metadataexchange)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-ws-metadata-exchange-20111213/" title="Latest draft of Web Services Metadata Exchange (WS-MetadataExchange) formally approved by the group">Web Services Metadata Exchange (WS-MetadataExchange)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Metadata Exchange (WS-MetadataExchange) publication history" href="/standards/history/ws-metadata-exchange">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services transfer (ws-transfer)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-ws-transfer-20111213/" title="Latest draft of Web Services Transfer (WS-Transfer) formally approved by the group">Web Services Transfer (WS-Transfer)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Transfer (WS-Transfer) publication history" href="/standards/history/ws-transfer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services fragment (ws-fragment)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-ws-fragment-20111213/" title="Latest draft of Web Services Fragment (WS-Fragment) formally approved by the group">Web Services Fragment (WS-Fragment)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Fragment (WS-Fragment) publication history" href="/standards/history/ws-fragment">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="requirements for home networking scenarios" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-hnreq-20111201/" title="Latest draft of Requirements for Home Networking Scenarios formally approved by the group">Requirements for Home Networking Scenarios</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=deliverer>Media and Entertainment Interest Group</p>
                        <p class=pubdetails>2011-12-01 - <a title="Requirements for Home Networking Scenarios publication history" href="/standards/history/hnreq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Giuseppe Pascale
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for media fragments 1.0 resolution in http" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2011/WD-media-frags-recipes-20111201/" title="Latest draft of Protocol for Media Fragments 1.0 Resolution in HTTP formally approved by the group">Protocol for Media Fragments 1.0 Resolution in HTTP</a></h2>
                        <p class=deliverer>Media Fragments Working Group</p>
                        <p class=pubdetails>2011-12-01 - <a title="Protocol for Media Fragments 1.0 Resolution in HTTP publication history" href="/standards/history/media-frags-recipes">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Raphaël Troncy
                            <li>Erik Mannens
                            <li>Silvia Pfeiffer
                            <li>Davy Van Deursen
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ontology of rhetorical blocks (orb)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-hcls-orb-20111020/" title="Latest draft of Ontology of Rhetorical Blocks (ORB) formally approved by the group">Ontology of Rhetorical Blocks (ORB)</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2011-10-20 - <a title="Ontology of Rhetorical Blocks (ORB) publication history" href="/standards/history/hcls-orb">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Ciccarese
                            <li>Tudor Groza
                          </ul>
                                  </li>
                                                                                                                          <li data-title="requirement for standardizing widgets" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-widgets-reqs-20110927/" title="Latest draft of Requirement For Standardizing Widgets formally approved by the group">Requirement For Standardizing Widgets</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2011-09-27 - <a title="Requirement For Standardizing Widgets publication history" href="/standards/history/widgets-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="ink markup language (inkml)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-InkML-20110920/" title="Latest draft of Ink Markup Language (InkML) formally approved by the group">Ink Markup Language (InkML)</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2011-09-20 - <a title="Ink Markup Language (InkML) publication history" href="/standards/history/InkML">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stephen Watt
                            <li>Tom Underhill
                          </ul>
                                  </li>
                                                                                                    <li data-title="scalable vector graphics (svg) 1.1 (second edition)" data-tag="graphics" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-SVG11-20110816/" title="Latest draft of Scalable Vector Graphics (SVG) 1.1 (Second Edition) formally approved by the group">Scalable Vector Graphics (SVG) 1.1 (Second Edition)</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2011-08-16 - <a title="Scalable Vector Graphics (SVG) 1.1 (Second Edition) publication history" href="/standards/history/SVG11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Erik Dahlström
                            <li>Patrick Dengler
                            <li>Anthony Grasso
                            <li>Chris Lilley
                            <li>Cameron McCormack
                            <li>Doug Schepers
                            <li>Jonathan Watt
                            <li>Jon Ferraiolo
                            <li>Jun Fujisawa
                            <li>Dean Jackson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="voice browser call control: ccxml version 1.0" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-ccxml-20110705/" title="Latest draft of Voice Browser Call Control: CCXML Version 1.0 formally approved by the group">Voice  Browser  Call  Control:  CCXML  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2011-07-05 - <a title="Voice Browser Call Control: CCXML Version 1.0 publication history" href="/standards/history/ccxml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Baggia
                            <li>Mark Scott
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="working with time zones" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-timezone-20110705/" title="Latest draft of Working with Time Zones formally approved by the group">Working with Time Zones</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2011-07-05 - <a title="Working with Time Zones publication history" href="/standards/history/timezone">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                <li data-title="an xsd datatype for ieee floating-point decimal" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-xsd-precisionDecimal-20110609/" title="Latest draft of An XSD datatype for IEEE floating-point decimal formally approved by the group">An XSD datatype for IEEE floating-point decimal</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2011-06-09 - <a title="An XSD datatype for IEEE floating-point decimal publication history" href="/standards/history/xsd-precisionDecimal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Peterson
                            <li>Michael Sperberg-McQueen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="unicode block names for use in xsd regular expressions" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-xsd-unicode-blocknames-20110609/" title="Latest draft of Unicode block names for use in XSD regular expressions formally approved by the group">Unicode block names for use in XSD regular expressions</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2011-06-09 - <a title="Unicode block names for use in XSD regular expressions publication history" href="/standards/history/xsd-unicode-blocknames">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Sperberg-McQueen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a mathml for css profile" data-tag="css" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-mathml-for-css-20110607/" title="Latest draft of A MathML for CSS Profile formally approved by the group">A MathML for CSS Profile</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2011-06-07 - <a title="A MathML for CSS Profile publication history" href="/standards/history/mathml-for-css">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                            <li>David Carlisle
                            <li>Giorgi Chavchanidze
                            <li>Patrick D F Ion
                            <li>Bruce Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="cascading style sheets level 2 revision 1 (css 2.1) specification" data-tag="css" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/" title="Latest draft of Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification formally approved by the group">Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2011-06-07 - <a title="Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification publication history" href="/standards/history/CSS21">History</a>
                        - <a href="https://drafts.csswg.org/css2/" title="Latest editor's draft of Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                            <li>Tantek Çelik
                            <li>Ian Hickson
                            <li>Håkon Wium Lie
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="cascading style sheets (css) snapshot 2007" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2011/NOTE-css-beijing-20110512/" title="Latest draft of Cascading Style Sheets (CSS) Snapshot 2007 formally approved by the group">Cascading Style Sheets (CSS) Snapshot 2007</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2011-05-12 - <a title="Cascading Style Sheets (CSS) Snapshot 2007 publication history" href="/standards/history/css-beijing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="points of interest core" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2011/WD-poi-core-20110512/" title="Latest draft of Points of Interest Core formally approved by the group">Points of Interest Core</a></h2>
                        <p class=deliverer>Points of Interest Working Group</p>
                        <p class=pubdetails>2011-05-12 - <a title="Points of Interest Core publication history" href="/standards/history/poi-core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Womer
                          </ul>
                                  </li>
                                                                                                                          <li data-title="cascading style sheets (css) snapshot 2010" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2011/NOTE-css-2010-20110512/" title="Latest draft of Cascading Style Sheets (CSS) Snapshot 2010 formally approved by the group">Cascading Style Sheets (CSS) Snapshot 2010</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2011-05-12 - <a title="Cascading Style Sheets (CSS) Snapshot 2010 publication history" href="/standards/history/css-2010">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="programmable http caching and serving" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2011/NOTE-DataCache-20110329/" title="Latest draft of Programmable HTTP Caching and Serving formally approved by the group">Programmable HTTP Caching and Serving</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2011-03-29 - <a title="Programmable HTTP Caching and Serving publication history" href="/standards/history/DataCache">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nikunj Mehta
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                      <li data-title="xquery update facility 1.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-xquery-update-10-20110317/" title="Latest draft of XQuery Update Facility 1.0 formally approved by the group">XQuery  Update  Facility&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2011-03-17 - <a title="XQuery Update Facility 1.0 publication history" href="/standards/history/xquery-update-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Don Chamberlin
                            <li>Jonathan Robie
                            <li>Michael Dyck
                            <li>Daniela Florescu
                            <li>Jim Melton
                            <li>Jerome Simeon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="xquery and xpath full text 1.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2011/REC-xpath-full-text-10-20110317/" title="Latest draft of XQuery and XPath Full Text 1.0 formally approved by the group">XQuery  and  XPath  Full  Text&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2011-03-17 - <a title="XQuery and XPath Full Text 1.0 publication history" href="/standards/history/xpath-full-text-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pat Case
                            <li>Michael Dyck
                            <li>Mary Holstege
                            <li>Sihem Amer-Yahia
                            <li>Chavdar Botev
                            <li>Stephen Buxton
                            <li>Jochen Dörre
                            <li>Jim Melton
                            <li>Michael Rys
                            <li>Jayavel Shanmugasundaram
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="device api access control use cases and requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-dap-policy-reqs-20110317/" title="Latest draft of Device API Access Control Use Cases and Requirements formally approved by the group">Device API Access Control Use Cases and Requirements</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2011-03-17 - <a title="Device API Access Control Use Cases and Requirements publication history" href="/standards/history/dap-policy-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Laura Arribas
                            <li>Frederick Hirsch
                            <li>Dominique Hazaël-Massieux
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="describing linked datasets with the void vocabulary" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-void-20110303/" title="Latest draft of Describing Linked Datasets with the VoID Vocabulary formally approved by the group">Describing Linked Datasets with the VoID Vocabulary</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2011-03-03 - <a title="Describing Linked Datasets with the VoID Vocabulary publication history" href="/standards/history/void">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Keith Alexander
                            <li>Richard Cyganiak
                            <li>Michael Hausenblas
                            <li>Jun Zhao
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="best practices for creating mmi modality components" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-mmi-mcbp-20110301/" title="Latest draft of Best practices for creating MMI Modality Components formally approved by the group">Best practices for creating MMI Modality Components</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2011-03-01 - <a title="Best practices for creating MMI Modality Components publication history" href="/standards/history/mmi-mcbp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ingmar Kliche
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xquery update facility 1.0 use cases" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-xquery-update-10-use-cases-20110125/" title="Latest draft of XQuery Update Facility 1.0 Use Cases formally approved by the group">XQuery Update Facility 1.0 Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="XQuery Update Facility 1.0 Use Cases publication history" href="/standards/history/xquery-update-10-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ioana Manolescu
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery update facility 1.0 requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-xquery-update-10-requirements-20110125/" title="Latest draft of XQuery Update Facility 1.0 Requirements formally approved by the group">XQuery Update Facility 1.0 Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="XQuery Update Facility 1.0 Requirements publication history" href="/standards/history/xquery-update-10-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Don Chamberlin
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery and xpath full text 1.0 requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-xpath-full-text-10-requirements-20110125/" title="Latest draft of XQuery and XPath Full Text 1.0 Requirements formally approved by the group">XQuery and XPath Full Text 1.0 Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="XQuery and XPath Full Text 1.0 Requirements publication history" href="/standards/history/xpath-full-text-10-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stephen Buxton
                            <li>Pat Case
                            <li>Michael Rys
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery and xpath full text 1.0 use cases" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-xpath-full-text-10-use-cases-20110125/" title="Latest draft of XQuery and XPath Full Text 1.0 Use Cases formally approved by the group">XQuery and XPath Full Text 1.0 Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="XQuery and XPath Full Text 1.0 Use Cases publication history" href="/standards/history/xpath-full-text-10-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pat Case
                            <li>Sihem Amer-Yahia
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document templating steps for xproc" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2011/NOTE-xproc-template-20110125/" title="Latest draft of Document Templating Steps for XProc formally approved by the group">Document Templating Steps for XProc</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="Document Templating Steps for XProc publication history" href="/standards/history/xproc-template">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="xhtml™ 2.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-xhtml2-20101216/" title="Latest draft of XHTML™ 2.0 formally approved by the group">XHTML™&nbsp;2.0</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XHTML™ 2.0 publication history" href="/standards/history/xhtml2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>Markus Gylling
                            <li>Shane McCarron
                            <li>Steven Pemberton
                            <li>Jonny Axelsson
                            <li>Micah Dubinko
                            <li>Beth Epperson
                            <li>Masayasu Ishikawa
                            <li>Ann Navarro
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="xml events 2" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-xml-events2-20101216/" title="Latest draft of XML Events 2 formally approved by the group">XML  Events&nbsp;2</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XML Events 2 publication history" href="/standards/history/xml-events2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Mark Birbeck
                            <li>Roland Merrick
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xframes" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-xframes-20101216/" title="Latest draft of XFrames formally approved by the group">XFrames</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XFrames publication history" href="/standards/history/xframes">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Pemberton
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="voice extensible markup language (voicexml) 3.0" data-tag="media" data-status="wd" data-version="upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2010/WD-voicexml30-20101216/" title="Latest draft of Voice Extensible Markup Language (VoiceXML) 3.0 formally approved by the group">Voice  Extensible  Markup  Language  (VoiceXML)&nbsp;3.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="Voice Extensible Markup Language (VoiceXML) 3.0 publication history" href="/standards/history/voicexml30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott McGlashan
                            <li>Daniel Burnett
                            <li>Rahul Akolkar
                            <li>RJ Auburn
                            <li>Paolo Baggia
                            <li>Michael Bodell
                            <li>Jerry Carter
                            <li>Mangesh Deshmukh
                            <li>Matt Oshry
                            <li>Kenneth Rehor
                            <li>Xu Yang
                            <li>Milan Young
                            <li>Rafah Hosn
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml role attribute module" data-tag="accessibility html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-xhtml-role-20101216/" title="Latest draft of XHTML Role Attribute Module formally approved by the group">XHTML Role Attribute Module</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XHTML Role Attribute Module publication history" href="/standards/history/xhtml-role">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>Shane McCarron
                            <li>Steven Pemberton
                            <li>T.V. Raman
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml access module" data-tag="accessibility html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-xhtml-access-20101216/" title="Latest draft of XHTML Access Module formally approved by the group">XHTML Access Module</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XHTML Access Module publication history" href="/standards/history/xhtml-access">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>Shane McCarron
                            <li>Steven Pemberton
                            <li>T.V. Raman
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="hlink" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-hlink-20101216/" title="Latest draft of HLink formally approved by the group">HLink</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="HLink publication history" href="/standards/history/hlink">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Pemberton
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="curie syntax 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-curie-20101216/" title="Latest draft of CURIE Syntax 1.0 formally approved by the group">CURIE  Syntax&nbsp;1.0</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="CURIE Syntax 1.0 publication history" href="/standards/history/curie">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>Shane McCarron
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="mobile web application best practices" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-mwabp-20101214/" title="Latest draft of Mobile Web Application Best Practices formally approved by the group">Mobile Web Application Best Practices</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="Mobile Web Application Best Practices publication history" href="/standards/history/mwabp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Adam Connors
                            <li>Bryan Sullivan
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xquery 1.0 and xpath 2.0 formal semantics (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xquery-semantics-20101214/" title="Latest draft of XQuery 1.0 and XPath 2.0 Formal Semantics (Second Edition) formally approved by the group">XQuery 1.0 and XPath 2.0 Formal Semantics (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XQuery 1.0 and XPath 2.0 Formal Semantics (Second Edition) publication history" href="/standards/history/xquery-semantics">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Denise Draper
                            <li>Michael Dyck
                            <li>Peter Fankhauser
                            <li>Mary Fernandez
                            <li>Ashok Malhotra
                            <li>Kristoffer Rose
                            <li>Michael Rys
                            <li>Jerome Simeon
                            <li>Philip Wadler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xquery 1.0: an xml query language (second edition)" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xquery-20101214/" title="Latest draft of XQuery 1.0: An XML Query Language (Second Edition) formally approved by the group">XQuery 1.0: An XML Query Language (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XQuery 1.0: An XML Query Language (Second Edition) publication history" href="/standards/history/xquery">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Boag
                            <li>Don Chamberlin
                            <li>Mary Fernandez
                            <li>Daniela Florescu
                            <li>Jonathan Robie
                            <li>Jerome Simeon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xml path language (xpath) 2.0 (second edition)" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xpath20-20101214/" title="Latest draft of XML Path Language (XPath) 2.0 (Second Edition) formally approved by the group">XML Path Language (XPath) 2.0 (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XML Path Language (XPath) 2.0 (Second Edition) publication history" href="/standards/history/xpath20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anders Berglund
                            <li>Scott Boag
                            <li>Don Chamberlin
                            <li>Mary Fernandez
                            <li>Michael Kay
                            <li>Jonathan Robie
                            <li>Jerome Simeon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xslt 2.0 and xquery 1.0 serialization (second edition)" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xslt-xquery-serialization-20101214/" title="Latest draft of XSLT 2.0 and XQuery 1.0 Serialization (Second Edition) formally approved by the group">XSLT 2.0 and XQuery 1.0 Serialization (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XSLT 2.0 and XQuery 1.0 Serialization (Second Edition) publication history" href="/standards/history/xslt-xquery-serialization">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Boag
                            <li>Michael Kay
                            <li>Joanne Tong
                            <li>Norman Walsh
                            <li>Henry Zongaro
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xml syntax for xquery 1.0 (xqueryx) (second edition)" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xqueryx-20101214/" title="Latest draft of XML Syntax for XQuery 1.0 (XQueryX) (Second Edition) formally approved by the group">XML Syntax for XQuery 1.0 (XQueryX) (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XML Syntax for XQuery 1.0 (XQueryX) (Second Edition) publication history" href="/standards/history/xqueryx">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Melton
                            <li>Subramanian Muralidhar
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xquery 1.0 and xpath 2.0 data model (xdm) (second edition)" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xpath-datamodel-20101214/" title="Latest draft of XQuery 1.0 and XPath 2.0 Data Model (XDM) (Second Edition) formally approved by the group">XQuery 1.0 and XPath 2.0 Data Model (XDM) (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XQuery 1.0 and XPath 2.0 Data Model (XDM) (Second Edition) publication history" href="/standards/history/xpath-datamodel">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anders Berglund
                            <li>Mary Fernandez
                            <li>Ashok Malhotra
                            <li>Jonathan Marsh
                            <li>Marton Nagy
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xquery 1.0 and xpath 2.0 functions and operators (second edition)" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xpath-functions-20101214/" title="Latest draft of XQuery 1.0 and XPath 2.0 Functions and Operators (Second Edition) formally approved by the group">XQuery 1.0 and XPath 2.0 Functions and Operators (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XQuery 1.0 and XPath 2.0 Functions and Operators (Second Edition) publication history" href="/standards/history/xpath-functions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ashok Malhotra
                            <li>Jim Melton
                            <li>Norman Walsh
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="web sql database" data-tag="webapi" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-webdatabase-20101118/" title="Latest draft of Web SQL Database formally approved by the group">Web SQL Database</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2010-11-18 - <a title="Web SQL Database publication history" href="/standards/history/webdatabase">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="associating style sheets with xml documents 1.0 (second edition)" data-tag="css xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xml-stylesheet-20101028/" title="Latest draft of Associating Style Sheets with XML documents 1.0 (Second Edition) formally approved by the group">Associating Style Sheets with XML documents 1.0 (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2010-10-28 - <a title="Associating Style Sheets with XML documents 1.0 (Second Edition) publication history" href="/standards/history/xml-stylesheet">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                            <li>Simon Pieters
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="guidelines for web content transformation proxies 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-ct-guidelines-20101026/" title="Latest draft of Guidelines for Web Content Transformation Proxies 1.0 formally approved by the group">Guidelines  for  Web  Content  Transformation  Proxies&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2010-10-26 - <a title="Guidelines for Web Content Transformation Proxies 1.0 publication history" href="/standards/history/ct-guidelines">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="speech synthesis markup language (ssml) version 1.1" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-speech-synthesis11-20100907/" title="Latest draft of Speech Synthesis Markup Language (SSML) Version 1.1 formally approved by the group">Speech  Synthesis  Markup  Language  (SSML)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2010-09-07 - <a title="Speech Synthesis Markup Language (SSML) Version 1.1 publication history" href="/standards/history/speech-synthesis11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                            <li>Zhi Wei Shuang
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="wicd core 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-WICD-20100819/" title="Latest draft of WICD Core 1.0 formally approved by the group">WICD  Core&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2010-08-19 - <a title="WICD Core 1.0 publication history" href="/standards/history/WICD">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timur Mehrvarz
                            <li>Lasse Pajunen
                            <li>Julien Quint
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="wicd full 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-WICDFull-20100819/" title="Latest draft of WICD Full 1.0 formally approved by the group">WICD  Full&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2010-08-19 - <a title="WICD Full 1.0 publication history" href="/standards/history/WICDFull">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timur Mehrvarz
                            <li>Lasse Pajunen
                            <li>Julien Quint
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="compound document by reference framework 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-CDR-20100819/" title="Latest draft of Compound Document by Reference Framework 1.0 formally approved by the group">Compound  Document  by  Reference  Framework&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2010-08-19 - <a title="Compound Document by Reference Framework 1.0 publication history" href="/standards/history/CDR">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timur Mehrvarz
                            <li>Lasse Pajunen
                            <li>Julien Quint
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="wicd mobile 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-WICDMobile-20100819/" title="Latest draft of WICD Mobile 1.0 formally approved by the group">WICD  Mobile&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2010-08-19 - <a title="WICD Mobile 1.0 publication history" href="/standards/history/WICDMobile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timur Mehrvarz
                            <li>Lasse Pajunen
                            <li>Julien Quint
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web security context: user interface guidelines" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-wsc-ui-20100812/" title="Latest draft of Web Security Context: User Interface Guidelines formally approved by the group">Web Security Context: User Interface Guidelines</a></h2>
                        <p class=deliverer>Web Security Context Working Group</p>
                        <p class=pubdetails>2010-08-12 - <a title="Web Security Context: User Interface Guidelines publication history" href="/standards/history/wsc-ui">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thomas Roessler
                            <li>Anil Saldhana
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web services resource transfer (ws-rt)" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-ws-resource-transfer-20100713/" title="Latest draft of Web Services Resource Transfer (WS-RT) formally approved by the group">Web Services Resource Transfer (WS-RT)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2010-07-13 - <a title="Web Services Resource Transfer (WS-RT) publication history" href="/standards/history/ws-resource-transfer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="delivery context: client interfaces (dcci) 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-DPF-20100629/" title="Latest draft of Delivery Context: Client Interfaces (DCCI) 1.0 formally approved by the group">Delivery  Context:  Client  Interfaces  (DCCI)&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Delivery Context: Client Interfaces (DCCI) 1.0 publication history" href="/standards/history/DPF">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Keith Waters
                            <li>Rafah Hosn
                            <li>Dave Raggett
                            <li>Sailesh Sathish
                            <li>Matt Womer
                            <li>Max Froumentin
                            <li>Rhys Lewis
                            <li>Keith Rosenblatt
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="delivery context: xpath access functions 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-cselection-xaf-20100629/" title="Latest draft of Delivery Context: XPath Access Functions 1.0 formally approved by the group">Delivery  Context:  XPath  Access  Functions&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Delivery Context: XPath Access Functions 1.0 publication history" href="/standards/history/cselection-xaf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                            <li>Roland Merrick
                          </ul>
                                  </li>
                                                                                                                          <li data-title="delivery context ontology" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-dcontology-20100629/" title="Latest draft of Delivery Context Ontology formally approved by the group">Delivery Context Ontology</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Delivery Context Ontology publication history" href="/standards/history/dcontology">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jose Manuel Cantera Fonseca
                            <li>Rhys Lewis
                          </ul>
                                  </li>
                                                                                                                          <li data-title="device independent authoring language (dial)" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-dial-20100629/" title="Latest draft of Device Independent Authoring Language (DIAL) formally approved by the group">Device Independent Authoring Language (DIAL)</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Device Independent Authoring Language (DIAL) publication history" href="/standards/history/dial">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kevin Smith
                          </ul>
                                  </li>
                                                                                                                          <li data-title="dial part 0: primer" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-dial-primer-20100629/" title="Latest draft of DIAL Part 0: Primer formally approved by the group">DIAL Part 0: Primer</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="DIAL Part 0: Primer publication history" href="/standards/history/dial-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kevin Smith
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device api privacy requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2010/NOTE-dap-privacy-reqs-20100629/" title="Latest draft of Device API Privacy Requirements formally approved by the group">Device API Privacy Requirements</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Device API Privacy Requirements publication history" href="/standards/history/dap-privacy-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alissa Cooper
                            <li>Frederick Hirsch
                            <li>John Morris
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="content selection for device independence (diselect) 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-cselection-20100629/" title="Latest draft of Content Selection for Device Independence (DISelect) 1.0 formally approved by the group">Content  Selection  for  Device  Independence  (DISelect)&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Content Selection for Device Independence (DISelect) 1.0 publication history" href="/standards/history/cselection">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                            <li>Roland Merrick
                            <li>Max Froumentin
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="composite capability/preference profiles (cc/pp): structure and vocabularies 2.0" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-CCPP-struct-vocab2-20100629/" title="Latest draft of Composite Capability/Preference Profiles (CC/PP): Structure and Vocabularies 2.0 formally approved by the group">Composite  Capability/Preference  Profiles  (CC/PP):  Structure  and  Vocabularies&nbsp;2.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Composite Capability/Preference Profiles (CC/PP): Structure and Vocabularies 2.0 publication history" href="/standards/history/CCPP-struct-vocab2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cédric Kiss
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="content selection primer 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2010/NOTE-cselection-primer-20100629/" title="Latest draft of Content Selection Primer 1.0 formally approved by the group">Content  Selection  Primer&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Content Selection Primer 1.0 publication history" href="/standards/history/cselection-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                            <li>Roland Merrick
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="requirements and use cases for xslt 2.1" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2010/WD-xslt-21-requirements-20100610/" title="Latest draft of Requirements and Use Cases for XSLT 2.1 formally approved by the group">Requirements  and  Use  Cases  for  XSLT&nbsp;2.1</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-06-10 - <a title="Requirements and Use Cases for XSLT 2.1 publication history" href="/standards/history/xslt-21-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Petr Cimprich
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="use cases and requirements for mapping relational databases to rdf" data-tag="data" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2010/WD-rdb2rdf-ucr-20100608/" title="Latest draft of Use Cases and Requirements for Mapping Relational Databases to RDF formally approved by the group">Use Cases and Requirements for Mapping Relational Databases to RDF</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2010-06-08 - <a title="Use Cases and Requirements for Mapping Relational Databases to RDF publication history" href="/standards/history/rdb2rdf-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="xproc: an xml pipeline language" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xproc-20100511/" title="Latest draft of XProc: An XML Pipeline Language formally approved by the group">XProc: An XML Pipeline Language</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2010-05-11 - <a title="XProc: An XML Pipeline Language publication history" href="/standards/history/xproc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>Alex Miłowski
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xml linking language (xlink) version 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-xlink11-20100506/" title="Latest draft of XML Linking Language (XLink) Version 1.1 formally approved by the group">XML  Linking  Language  (XLink)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2010-05-06 - <a title="XML Linking Language (XLink) Version 1.1 publication history" href="/standards/history/xlink11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                            <li>Eve Maler
                            <li>David Orchard
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                  <li data-title="webcgm 2.1" data-tag="graphics" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2010/REC-webcgm21-20100301/" title="Latest draft of WebCGM 2.1 formally approved by the group">WebCGM&nbsp;2.1</a></h2>
                        <p class=deliverer>WebCGM Working Group</p>
                        <p class=pubdetails>2010-03-01 - <a title="WebCGM 2.1 publication history" href="/standards/history/webcgm21">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Benoit Bezaire
                            <li>Lofton Henderson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml signature transform simplification: requirements and design" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2010/NOTE-xmldsig-simplify-20100204/" title="Latest draft of XML Signature Transform Simplification: Requirements and Design formally approved by the group">XML Signature Transform Simplification: Requirements and Design</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2010-02-04 - <a title="XML Signature Transform Simplification: Requirements and Design publication history" href="/standards/history/xmldsig-simplify">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Pratik Datta
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a method for writing testable conformance requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2010/NOTE-test-methodology-20100128/" title="Latest draft of A Method for Writing Testable Conformance Requirements formally approved by the group">A Method for Writing Testable Conformance Requirements</a></h2>
                        <p class=deliverer>Mobile Web Test Suites Working Group</p>
                        <p class=pubdetails>2010-01-28 - <a title="A Method for Writing Testable Conformance Requirements publication history" href="/standards/history/test-methodology">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dominique Hazaël-Massieux
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="sparql 1.1 property paths" data-tag="data" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2010/WD-sparql11-property-paths-20100126/" title="Latest draft of SPARQL 1.1 Property Paths formally approved by the group">SPARQL 1.1 Property Paths</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2010-01-26 - <a title="SPARQL 1.1 Property Paths publication history" href="/standards/history/sparql11-property-paths">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="use cases and requirements for ontology and api for media resource 1.0" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2010/WD-media-annot-reqs-20100121/" title="Latest draft of Use Cases and Requirements for Ontology and API for Media Resource 1.0 formally approved by the group">Use  Cases  and  Requirements  for  Ontology  and  API  for  Media  Resource&nbsp;1.0</a></h2>
                        <p class=deliverer>Media Annotations Working Group</p>
                        <p class=pubdetails>2010-01-21 - <a title="Use Cases and Requirements for Ontology and API for Media Resource 1.0 publication history" href="/standards/history/media-annot-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wonsuk Lee
                            <li>Tobias Bürger
                            <li>Felix Sasaki
                            <li>Véronique Malaisé
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="w3c xml schema definition language (xsd): component designators" data-tag="xml" data-status="cr" data-version="latest upcoming">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2010/CR-xmlschema-ref-20100119/" title="Latest draft of W3C XML Schema Definition Language (XSD): Component Designators formally approved by the group">W3C XML Schema Definition Language (XSD): Component Designators</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2010-01-19 - <a title="W3C XML Schema Definition Language (XSD): Component Designators publication history" href="/standards/history/xmlschema-ref">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mary Holstege
                            <li>Asir Vedamuthu
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="use cases and requirements for media fragments" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2009/WD-media-frags-reqs-20091217/" title="Latest draft of Use cases and requirements for Media Fragments formally approved by the group">Use cases and requirements for Media Fragments</a></h2>
                        <p class=deliverer>Media Fragments Working Group</p>
                        <p class=pubdetails>2009-12-17 - <a title="Use cases and requirements for Media Fragments publication history" href="/standards/history/media-frags-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Raphaël Troncy
                            <li>Erik Mannens
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="use cases for possible future emma features" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-emma-usecases-20091215/" title="Latest draft of Use Cases for Possible Future EMMA Features formally approved by the group">Use Cases for Possible Future EMMA Features</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2009-12-15 - <a title="Use Cases for Possible Future EMMA Features publication history" href="/standards/history/emma-usecases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Johnston
                          </ul>
                                  </li>
                                                                                                                          <li data-title="namespaces in xml 1.0 (third edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-xml-names-20091208/" title="Latest draft of Namespaces in XML 1.0 (Third Edition) formally approved by the group">Namespaces in XML 1.0 (Third Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2009-12-08 - <a title="Namespaces in XML 1.0 (Third Edition) publication history" href="/standards/history/xml-names">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Bray
                            <li>Dave Hollander
                            <li>Andrew Layman
                            <li>Richard Tobin
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mobile web for social development roadmap" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-mw4d-roadmap-20091208/" title="Latest draft of Mobile Web for Social Development Roadmap formally approved by the group">Mobile Web for Social Development Roadmap</a></h2>
                        <p class=deliverer>Mobile Web For Social Development (MW4D) Interest Group</p>
                        <p class=pubdetails>2009-12-08 - <a title="Mobile Web for Social Development Roadmap publication history" href="/standards/history/mw4d-roadmap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stéphane Boyera
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="pics 1.1 label distribution -- label syntax and communication protocols" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-PICS-labels-20091124/" title="Latest draft of PICS 1.1 Label Distribution -- Label Syntax and Communication Protocols formally approved by the group">PICS 1.1 Label Distribution -- Label Syntax and Communication Protocols</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-11-24 - <a title="PICS 1.1 Label Distribution -- Label Syntax and Communication Protocols publication history" href="/standards/history/REC-PICS-labels">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Krauskopf
                            <li>Jim Miller
                            <li>Paul Resnick
                            <li>Win Treese
                          </ul>
                                  </li>
                                                                                                                          <li data-title="pics signed labels (dsig) 1.0 specification" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-DSig-label-20091124/" title="Latest draft of PICS Signed Labels (DSig) 1.0 Specification formally approved by the group">PICS Signed Labels (DSig) 1.0 Specification</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-11-24 - <a title="PICS Signed Labels (DSig) 1.0 Specification publication history" href="/standards/history/REC-DSig-label">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yanghua Chu
                            <li>Philip DesAutels
                            <li>Brian LaMacchia
                            <li>Peter Lipp
                          </ul>
                                  </li>
                                                                                                                          <li data-title="pics 1.1 rating services and rating systems -- and their machine readable descriptions" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-PICS-services-20091124/" title="Latest draft of PICS 1.1 Rating Services and Rating Systems -- and Their Machine Readable Descriptions formally approved by the group">PICS 1.1 Rating Services and Rating Systems -- and Their Machine Readable Descriptions</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-11-24 - <a title="PICS 1.1 Rating Services and Rating Systems -- and Their Machine Readable Descriptions publication history" href="/standards/history/REC-PICS-services">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Miller
                            <li>Paul Resnick
                            <li>David Singer
                          </ul>
                                  </li>
                                                                                                                          <li data-title="picsrules 1.1 specification" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-PICSRules-20091124/" title="Latest draft of PICSRules 1.1 Specification formally approved by the group">PICSRules 1.1 Specification</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-11-24 - <a title="PICSRules 1.1 Specification publication history" href="/standards/history/REC-PICSRules">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christopher Evans
                            <li>Alex Hopmann
                            <li>Martin PreslerMarshall
                            <li>Paul Resnick
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="content transformation landscape 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-ct-landscape-20091027/" title="Latest draft of Content Transformation Landscape 1.0 formally approved by the group">Content  Transformation  Landscape&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2009-10-27 - <a title="Content Transformation Landscape 1.0 publication history" href="/standards/history/ct-landscape">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Andrew Swainston
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="the sml xlink reference scheme" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-sml-xlink-ref-scheme-20091023/" title="Latest draft of The SML XLink Reference Scheme formally approved by the group">The SML XLink Reference Scheme</a></h2>
                        <p class=deliverer>Service Modeling Language Working Group</p>
                        <p class=pubdetails>2009-10-23 - <a title="The SML XLink Reference Scheme publication history" href="/standards/history/sml-xlink-ref-scheme">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pratul Dublish
                            <li>Len Charest
                            <li>Virginia Smith
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                            <li data-title="xforms 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-xforms-20091020/" title="Latest draft of XForms 1.1 formally approved by the group">XForms&nbsp;1.1</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="XForms 1.1 publication history" href="/standards/history/xforms11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sioc, sioc types and health care and life sciences" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-hcls-sioc-20091020/" title="Latest draft of SIOC, SIOC Types and Health Care and Life Sciences formally approved by the group">SIOC, SIOC Types and Health Care and Life Sciences</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="SIOC, SIOC Types and Health Care and Life Sciences publication history" href="/standards/history/hcls-sioc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alexandre Passant
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="extended guidelines for mobile web best practices 1.0" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2009/NOTE-mwbp-guidelines-20091020/" title="Latest draft of Extended Guidelines for Mobile Web Best Practices 1.0 formally approved by the group">Extended  Guidelines  for  Mobile  Web  Best  Practices&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="Extended Guidelines for Mobile Web Best Practices 1.0 publication history" href="/standards/history/mwbp-guidelines">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kai Scheppe
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="semantic web applications in neuromedicine (swan) ontology" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-hcls-swan-20091020/" title="Latest draft of Semantic Web Applications in Neuromedicine (SWAN) Ontology formally approved by the group">Semantic Web Applications in Neuromedicine (SWAN) Ontology</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="Semantic Web Applications in Neuromedicine (SWAN) Ontology publication history" href="/standards/history/hcls-swan">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Ciccarese
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="swan/sioc: alignment between the swan and sioc ontologies" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-hcls-swansioc-20091020/" title="Latest draft of SWAN/SIOC: Alignment Between the SWAN and SIOC Ontologies formally approved by the group">SWAN/SIOC: Alignment Between the SWAN and SIOC Ontologies</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="SWAN/SIOC: Alignment Between the SWAN and SIOC Ontologies publication history" href="/standards/history/hcls-swansioc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alexandre Passant
                            <li>Paolo Ciccarese
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device apis requirements" data-tag="webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-dap-api-reqs-20091015/" title="Latest draft of Device APIs Requirements formally approved by the group">Device APIs Requirements</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2009-10-15 - <a title="Device APIs Requirements publication history" href="/standards/history/dap-api-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                            <li>Daniel Coloma
                            <li>Max Froumentin
                            <li>Marcin Hanclik
                            <li>Jere Käpyaho
                            <li>Kangchan Lee
                            <li>Bryan Sullivan
                            <li>Dzung Tran
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg color 1.2, part 2: language" data-tag="graphics" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2009/WD-SVGColor12-20091001/" title="Latest draft of SVG Color 1.2, Part 2: Language formally approved by the group">SVG Color 1.2, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-10-01 - <a title="SVG Color 1.2, Part 2: Language publication history" href="/standards/history/SVGColor12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                            <li>Anthony Grasso
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg color 1.2, part 1: primer" data-tag="graphics" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2009/WD-SVGColorPrimer12-20091001/" title="Latest draft of SVG Color 1.2, Part 1: Primer formally approved by the group">SVG Color 1.2, Part 1: Primer</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-10-01 - <a title="SVG Color 1.2, Part 1: Primer publication history" href="/standards/history/SVGColorPrimer12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                            <li>Anthony Grasso
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="requirements for string identity matching and string indexing" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-charreq-20090915/" title="Latest draft of Requirements for String Identity Matching and String Indexing formally approved by the group">Requirements for String Identity Matching and String Indexing</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2009-09-15 - <a title="Requirements for String Identity Matching and String Indexing publication history" href="/standards/history/charreq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Dürst
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): test suite" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-powder-test-20090910/" title="Latest draft of Protocol for Web Description Resources (POWDER): Test Suite formally approved by the group">Protocol for Web Description Resources (POWDER): Test Suite</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-10 - <a title="Protocol for Web Description Resources (POWDER): Test Suite publication history" href="/standards/history/powder-test">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Antonis Kukurikos
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="publishing open government data" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2009/WD-gov-data-20090908/" title="Latest draft of Publishing Open Government Data formally approved by the group">Publishing Open Government Data</a></h2>
                        <p class=deliverer>eGovernment Interest Group</p>
                        <p class=pubdetails>2009-09-08 - <a title="Publishing Open Government Data publication history" href="/standards/history/gov-data">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Bennett
                            <li>Adam Harvey
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): grouping of resources" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-powder-grouping-20090901/" title="Latest draft of Protocol for Web Description Resources (POWDER): Grouping of Resources formally approved by the group">Protocol for Web Description Resources (POWDER): Grouping of Resources</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-01 - <a title="Protocol for Web Description Resources (POWDER): Grouping of Resources publication history" href="/standards/history/powder-grouping">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Andrea Perego
                            <li>Kevin Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): primer" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-powder-primer-20090901/" title="Latest draft of Protocol for Web Description Resources (POWDER): Primer formally approved by the group">Protocol for Web Description Resources (POWDER): Primer</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-01 - <a title="Protocol for Web Description Resources (POWDER): Primer publication history" href="/standards/history/powder-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kai Scheppe
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): description resources" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-powder-dr-20090901/" title="Latest draft of Protocol for Web Description Resources (POWDER): Description Resources formally approved by the group">Protocol for Web Description Resources (POWDER): Description Resources</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-01 - <a title="Protocol for Web Description Resources (POWDER): Description Resources publication history" href="/standards/history/powder-dr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Kevin Smith
                            <li>Andrea Perego
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): formal semantics" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-powder-formal-20090901/" title="Latest draft of Protocol for Web Description Resources (POWDER): Formal Semantics formally approved by the group">Protocol for Web Description Resources (POWDER): Formal Semantics</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-01 - <a title="Protocol for Web Description Resources (POWDER): Formal Semantics publication history" href="/standards/history/powder-formal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stasinos Konstantopoulos
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="w3c mobileok scheme 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-mobileOK-20090825/" title="Latest draft of W3C mobileOK Scheme 1.0 formally approved by the group">W3C  mobileOK  Scheme&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2009-08-25 - <a title="W3C mobileOK Scheme 1.0 publication history" href="/standards/history/mobileOK">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Phil Archer
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="skos simple knowledge organization system primer" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-skos-primer-20090818/" title="Latest draft of SKOS Simple Knowledge Organization System Primer formally approved by the group">SKOS Simple Knowledge Organization System Primer</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2009-08-18 - <a title="SKOS Simple Knowledge Organization System Primer publication history" href="/standards/history/skos-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Antoine Isaac
                            <li>Ed Summers
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="skos simple knowledge organization system reference" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-skos-reference-20090818/" title="Latest draft of SKOS Simple Knowledge Organization System Reference formally approved by the group">SKOS Simple Knowledge Organization System Reference</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2009-08-18 - <a title="SKOS Simple Knowledge Organization System Reference publication history" href="/standards/history/skos-reference">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alistair Miles
                            <li>Sean Bechhofer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="skos use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-skos-ucr-20090818/" title="Latest draft of SKOS Use Cases and Requirements formally approved by the group">SKOS Use Cases and Requirements</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2009-08-18 - <a title="SKOS Use Cases and Requirements publication history" href="/standards/history/skos-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Antoine Isaac
                            <li>Jon Phipps
                            <li>Daniel Rubin
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml security derived keys" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2009/NOTE-xmlsec-derivedkeys-20090730/" title="Latest draft of XML Security Derived Keys formally approved by the group">XML Security Derived Keys</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-07-30 - <a title="XML Security Derived Keys publication history" href="/standards/history/xmlsec-derivedkeys">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Magnus Nyström
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="relationship between mobile web best practices (mwbp) and web content accessibility guidelines (wcag)" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-mwbp-wcag-20090709/" title="Latest draft of Relationship between Mobile Web Best Practices (MWBP) and Web Content Accessibility Guidelines (WCAG) formally approved by the group">Relationship between Mobile Web Best Practices (MWBP) and Web Content Accessibility Guidelines (WCAG)</a></h2>
                        <p class=deliverer>Accessibility Education and Outreach Working Group (EOWG)</p>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2009-07-09 - <a title="Relationship between Mobile Web Best Practices (MWBP) and Web Content Accessibility Guidelines (WCAG) publication history" href="/standards/history/mwbp-wcag">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alan Chuter
                            <li>Yeliz Yesilada
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql new features and rationale" data-tag="data" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2009/WD-sparql-features-20090702/" title="Latest draft of SPARQL New Features and Rationale formally approved by the group">SPARQL New Features and Rationale</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2009-07-02 - <a title="SPARQL New Features and Rationale publication history" href="/standards/history/sparql-features">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kjetil Kjernsmo
                            <li>Alexandre Passant
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="framework for sml epr-based reference schemes" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-sml-epr-ref-scheme-20090630/" title="Latest draft of Framework for SML EPR-Based Reference Schemes formally approved by the group">Framework for SML EPR-Based Reference Schemes</a></h2>
                        <p class=deliverer>Service Modeling Language Working Group</p>
                        <p class=pubdetails>2009-06-30 - <a title="Framework for SML EPR-Based Reference Schemes publication history" href="/standards/history/sml-epr-ref-scheme">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Len Charest
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="svg parameters 1.0, part 2: language" data-tag="graphics" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2009/WD-SVGParam-20090616/" title="Latest draft of SVG Parameters 1.0, Part 2: Language formally approved by the group">SVG Parameters 1.0, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-06-16 - <a title="SVG Parameters 1.0, Part 2: Language publication history" href="/standards/history/SVGParam">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="svg parameters 1.0, part 1: primer" data-tag="graphics" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2009/WD-SVGParamPrimer-20090616/" title="Latest draft of SVG Parameters 1.0, Part 1: Primer formally approved by the group">SVG Parameters 1.0, Part 1: Primer</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-06-16 - <a title="SVG Parameters 1.0, Part 1: Primer publication history" href="/standards/history/SVGParamPrimer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="guidelines for writing device independent tests" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-di-testing-20090512/" title="Latest draft of Guidelines for writing device independent tests formally approved by the group">Guidelines for writing device independent tests</a></h2>
                        <p class=deliverer>Mobile Web Test Suites Working Group</p>
                        <p class=pubdetails>2009-05-12 - <a title="Guidelines for writing device independent tests publication history" href="/standards/history/di-testing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dominique Hazaël-Massieux
                            <li>Carmelo Montanez
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="service modeling language, version 1.1" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-sml-20090512/" title="Latest draft of Service Modeling Language, Version 1.1 formally approved by the group">Service  Modeling  Language,  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>Service Modeling Language Working Group</p>
                        <p class=pubdetails>2009-05-12 - <a title="Service Modeling Language, Version 1.1 publication history" href="/standards/history/sml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Valentina Popescu
                            <li>Virginia Smith
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="service modeling language interchange format version 1.1" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-sml-if-20090512/" title="Latest draft of Service Modeling Language Interchange Format Version 1.1 formally approved by the group">Service  Modeling  Language  Interchange  Format  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>Service Modeling Language Working Group</p>
                        <p class=pubdetails>2009-05-12 - <a title="Service Modeling Language Interchange Format Version 1.1 publication history" href="/standards/history/sml-if">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Valentina Popescu
                            <li>Virginia Smith
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="improving access to government through better use of the web" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-egov-improving-20090512/" title="Latest draft of Improving Access to Government through Better Use of the Web formally approved by the group">Improving Access to Government through Better Use of the Web</a></h2>
                        <p class=deliverer>eGovernment Interest Group</p>
                        <p class=pubdetails>2009-05-12 - <a title="Improving Access to Government through Better Use of the Web publication history" href="/standards/history/egov-improving">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Suzanne Acar
                            <li>José Manuel Alonso
                            <li>Kevin Novak
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="basic xml schema patterns for databinding version 1.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-xmlschema-patterns-20090505/" title="Latest draft of Basic XML Schema Patterns for Databinding Version 1.0 formally approved by the group">Basic  XML  Schema  Patterns  for  Databinding  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Schema Patterns for Databinding Working Group</p>
                        <p class=pubdetails>2009-05-05 - <a title="Basic XML Schema Patterns for Databinding Version 1.0 publication history" href="/standards/history/xmlschema-patterns">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Calladine
                            <li>George Cowe
                            <li>Paul Downey
                            <li>Yves Lafon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="advanced xml schema patterns for databinding version 1.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-xmlschema-patterns-advanced-20090505/" title="Latest draft of Advanced XML Schema Patterns for Databinding Version 1.0 formally approved by the group">Advanced  XML  Schema  Patterns  for  Databinding  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Schema Patterns for Databinding Working Group</p>
                        <p class=pubdetails>2009-05-05 - <a title="Advanced XML Schema Patterns for Databinding Version 1.0 publication history" href="/standards/history/xmlschema-patterns-advanced">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Calladine
                            <li>George Cowe
                            <li>Paul Downey
                            <li>Yves Lafon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="w3c personalization roadmap: ubiquitous web integration of accessforall 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2009/NOTE-UWA-personalization-roadmap-20090409/" title="Latest draft of W3C Personalization Roadmap: Ubiquitous Web Integration of AccessForAll 1.0 formally approved by the group">W3C  Personalization  Roadmap:  Ubiquitous  Web  Integration  of  AccessForAll&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2009-04-09 - <a title="W3C Personalization Roadmap: Ubiquitous Web Integration of AccessForAll 1.0 publication history" href="/standards/history/UWA-personalization-roadmap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andy Heath
                            <li>Richard Schwerdtfeger
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="efficient xml interchange evaluation" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2009/WD-exi-evaluation-20090407/" title="Latest draft of Efficient XML Interchange Evaluation formally approved by the group">Efficient XML Interchange Evaluation</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2009-04-07 - <a title="Efficient XML Interchange Evaluation publication history" href="/standards/history/exi-evaluation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Carine Bournez
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="svg transforms 1.0, part 2: language" data-tag="graphics" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2009/WD-SVG-Transforms-20090320/" title="Latest draft of SVG Transforms 1.0, Part 2: Language formally approved by the group">SVG Transforms 1.0, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-03-20 - <a title="SVG Transforms 1.0, Part 2: Language publication history" href="/standards/history/SVG-Transforms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jun Fujisawa
                            <li>Anthony Grasso
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="emma: extensible multimodal annotation markup language" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-emma-20090210/" title="Latest draft of EMMA: Extensible MultiModal Annotation markup language formally approved by the group">EMMA: Extensible MultiModal Annotation markup language</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2009-02-10 - <a title="EMMA: Extensible MultiModal Annotation markup language publication history" href="/standards/history/emma">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Johnston
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xml base (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2009/REC-xmlbase-20090128/" title="Latest draft of XML Base (Second Edition) formally approved by the group">XML Base (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2009-01-28 - <a title="XML Base (Second Edition) publication history" href="/standards/history/xmlbase">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                            <li>Richard Tobin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xhtml media types - second edition" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2009/NOTE-xhtml-media-types-20090116/" title="Latest draft of XHTML Media Types - Second Edition formally approved by the group">XHTML Media Types - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2009-01-16 - <a title="XHTML Media Types - Second Edition publication history" href="/standards/history/xhtml-media-types">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="scalable vector graphics (svg) tiny 1.2 specification" data-tag="graphics" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-SVGTiny12-20081222/" title="Latest draft of Scalable Vector Graphics (SVG) Tiny 1.2 Specification formally approved by the group">Scalable Vector Graphics (SVG) Tiny 1.2 Specification</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2008-12-22 - <a title="Scalable Vector Graphics (SVG) Tiny 1.2 Specification publication history" href="/standards/history/SVGTiny12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ola Andersson
                            <li>Robin Berjon
                            <li>Erik Dahlström
                            <li>Andrew Emmons
                            <li>Jon Ferraiolo
                            <li>Anthony Grasso
                            <li>Vincent Hardy
                            <li>Scott Hayman
                            <li>Dean Jackson
                            <li>Chris Lilley
                            <li>Cameron McCormack
                            <li>Andreas Neumann
                            <li>Craig Northway
                            <li>Antoine Quint
                            <li>Nandini Ramani
                            <li>Doug Schepers
                            <li>Andrew Shellshear
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xforms for html" data-tag="html xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2008/WD-XForms-for-HTML-20081219/" title="Latest draft of XForms for HTML formally approved by the group">XForms for HTML</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2008-12-19 - <a title="XForms for HTML publication history" href="/standards/history/XForms-for-HTML">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="web content accessibility guidelines (wcag) 2.0" data-tag="accessibility" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-WCAG20-20081211/" title="Latest draft of Web Content Accessibility Guidelines (WCAG) 2.0 formally approved by the group">Web  Content  Accessibility  Guidelines  (WCAG)&nbsp;2.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2008-12-11 - <a title="Web Content Accessibility Guidelines (WCAG) 2.0 publication history" href="/standards/history/WCAG20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Caldwell
                            <li>Michael Cooper
                            <li>Loretta Guarino Reid
                            <li>Gregg Vanderheiden
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="w3c mobileok basic tests 1.0" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-mobileOK-basic10-tests-20081208/" title="Latest draft of W3C mobileOK Basic Tests 1.0 formally approved by the group">W3C  mobileOK  Basic  Tests&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2008-12-08 - <a title="W3C mobileOK Basic Tests 1.0 publication history" href="/standards/history/mobileOK-basic10-tests">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sean Owen
                            <li>Jo Rabin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device description repository simple api" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-DDR-Simple-API-20081205/" title="Latest draft of Device Description Repository Simple API formally approved by the group">Device Description Repository Simple API</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2008-12-05 - <a title="Device Description Repository Simple API publication history" href="/standards/history/DDR-Simple-API">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Jose Manuel Cantera Fonseca
                            <li>Rotan Hanrahan
                            <li>Ignacio Marin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device description structures" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2008/WD-dd-structures-20081205/" title="Latest draft of Device Description Structures formally approved by the group">Device Description Structures</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2008-12-05 - <a title="Device Description Structures publication history" href="/standards/history/dd-structures">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jose Manuel Cantera Fonseca
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="cool uris for the semantic web" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-cooluris-20081203/" title="Latest draft of Cool URIs for the Semantic Web formally approved by the group">Cool URIs for the Semantic Web</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2008-12-03 - <a title="Cool URIs for the Semantic Web publication history" href="/standards/history/cooluris">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Leo Sauermann
                            <li>Richard Cyganiak
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="synchronized multimedia integration language (smil 3.0)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-SMIL3-20081201/" title="Latest draft of Synchronized Multimedia Integration Language (SMIL 3.0) formally approved by the group">Synchronized Multimedia Integration Language (SMIL 3.0)</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2008-12-01 - <a title="Synchronized Multimedia Integration Language (SMIL 3.0) publication history" href="/standards/history/SMIL3">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dick Bulterman
                          </ul>
                                  </li>
                                                                                                                          <li data-title="extensible markup language (xml) 1.0 (fifth edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-xml-20081126/" title="Latest draft of Extensible Markup Language (XML) 1.0 (Fifth Edition) formally approved by the group">Extensible Markup Language (XML) 1.0 (Fifth Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2008-11-26 - <a title="Extensible Markup Language (XML) 1.0 (Fifth Edition) publication history" href="/standards/history/xml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Bray
                            <li>Jean Paoli
                            <li>Michael Sperberg-McQueen
                            <li>Eve Maler
                            <li>François Yergeau
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="legacy extended iris for xml resource identification" data-tag="i18n xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-leiri-20081103/" title="Latest draft of Legacy extended IRIs for XML resource identification formally approved by the group">Legacy extended IRIs for XML resource identification</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2008-11-03 - <a title="Legacy extended IRIs for XML resource identification publication history" href="/standards/history/leiri">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                            <li>Richard Tobin
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="pronunciation lexicon specification (pls) version 1.0" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-pronunciation-lexicon-20081014/" title="Latest draft of Pronunciation Lexicon Specification (PLS) Version 1.0 formally approved by the group">Pronunciation  Lexicon  Specification  (PLS)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2008-10-14 - <a title="Pronunciation Lexicon Specification (PLS) Version 1.0 publication history" href="/standards/history/pronunciation-lexicon">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Baggia
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) impacts" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2008/WD-exi-impacts-20080903/" title="Latest draft of Efficient XML Interchange (EXI) Impacts formally approved by the group">Efficient XML Interchange (EXI) Impacts</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2008-09-03 - <a title="Efficient XML Interchange (EXI) Impacts publication history" href="/standards/history/exi-impacts">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jaakko Kangasharju
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="best practice recipes for publishing rdf vocabularies" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-swbp-vocab-pub-20080828/" title="Latest draft of Best Practice Recipes for Publishing RDF Vocabularies formally approved by the group">Best Practice Recipes for Publishing RDF Vocabularies</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2008-08-28 - <a title="Best Practice Recipes for Publishing RDF Vocabularies publication history" href="/standards/history/swbp-vocab-pub">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Diego Berrueta
                            <li>Jon Phipps
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="voice extensible markup language (voicexml) 3.0 requirements" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2008/WD-vxml30reqs-20080808/" title="Latest draft of Voice Extensible Markup Language (VoiceXML) 3.0 Requirements formally approved by the group">Voice Extensible Markup Language (VoiceXML) 3.0 Requirements</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2008-08-08 - <a title="Voice Extensible Markup Language (VoiceXML) 3.0 Requirements publication history" href="/standards/history/vxml30reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeff Hoepfinger
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="mobile web best practices 1.0" data-tag="html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-mobile-bp-20080729/" title="Latest draft of Mobile Web Best Practices 1.0 formally approved by the group">Mobile  Web  Best  Practices&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2008-07-29 - <a title="Mobile Web Best Practices 1.0 publication history" href="/standards/history/mobile-bp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Charles McCathieNevile
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="authoring applications for the multimodal architecture" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-mmi-auth-20080702/" title="Latest draft of Authoring Applications for the Multimodal Architecture formally approved by the group">Authoring Applications for the Multimodal Architecture</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2008-07-02 - <a title="Authoring Applications for the Multimodal Architecture publication history" href="/standards/history/mmi-auth">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ingmar Kliche
                          </ul>
                                  </li>
                                                                                                                          <li data-title="html 5 publication notes" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2008/NOTE-html5-pubnotes-20080610/" title="Latest draft of HTML 5 Publication Notes formally approved by the group">HTML 5 Publication Notes</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2008-06-10 - <a title="HTML 5 Publication Notes publication history" href="/standards/history/html5-pubnotes">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael[tm] Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="test cases for c14n 1.1 and xmldsig interoperability" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-xmldsig2ed-tests-20080610/" title="Latest draft of Test Cases for C14N 1.1 and XMLDSig Interoperability formally approved by the group">Test Cases for C14N 1.1 and XMLDSig Interoperability</a></h2>
                        <p class=deliverer>XML Security Specifications Maintenance Working Group</p>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2008-06-10 - <a title="Test Cases for C14N 1.1 and XMLDSig Interoperability publication history" href="/standards/history/xmldsig2ed-tests">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Juan Carlos Cruellas
                            <li>Konrad Lanz
                            <li>Sean Mullan
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="experiences with the conversion of senselab databases to rdf/owl" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-hcls-senselab-20080604/" title="Latest draft of Experiences with the conversion of SenseLab databases to RDF/OWL formally approved by the group">Experiences with the conversion of SenseLab databases to RDF/OWL</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2008-06-04 - <a title="Experiences with the conversion of SenseLab databases to RDF/OWL publication history" href="/standards/history/hcls-senselab">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthias Samwald
                            <li>Kei-Hoi Cheung
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="a prototype knowledge base for the life sciences" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-hcls-kb-20080604/" title="Latest draft of A Prototype Knowledge Base for the Life Sciences formally approved by the group">A Prototype Knowledge Base for the Life Sciences</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2008-06-04 - <a title="A Prototype Knowledge Base for the Life Sciences publication history" href="/standards/history/hcls-kb">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>M. Scott Marshall
                            <li>Eric Prud&#039;hommeaux
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="offline web applications" data-tag="html webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-offline-webapps-20080530/" title="Latest draft of Offline Web Applications formally approved by the group">Offline Web Applications</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2008-05-30 - <a title="Offline Web Applications publication history" href="/standards/history/offline-webapps">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web accessibility for older users: a literature review" data-tag="accessibility" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2008/WD-wai-age-literature-20080514/" title="Latest draft of Web Accessibility for Older Users: A Literature Review formally approved by the group">Web Accessibility for Older Users: A Literature Review</a></h2>
                        <p class=deliverer>Accessibility Education and Outreach Working Group (EOWG)</p>
                        <p class=pubdetails>2008-05-14 - <a title="Web Accessibility for Older Users: A Literature Review publication history" href="/standards/history/wai-age-literature">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Arch
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="canonical xml version 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-xml-c14n11-20080502/" title="Latest draft of Canonical XML Version 1.1 formally approved by the group">Canonical  XML  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2008-05-02 - <a title="Canonical XML Version 1.1 publication history" href="/standards/history/xml-c14n11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Glenn Marcy
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="widgets 1.0: the widget landscape (q1 2008)" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2008/WD-widgets-land-20080414/" title="Latest draft of Widgets 1.0: The Widget Landscape (Q1 2008) formally approved by the group">Widgets 1.0: The Widget Landscape (Q1 2008)</a></h2>
                        <p class=deliverer>Web Application Formats Working Group</p>
                        <p class=pubdetails>2008-04-14 - <a title="Widgets 1.0: The Widget Landscape (Q1 2008) publication history" href="/standards/history/widgets-land">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device description repository core vocabulary" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-ddr-core-vocabulary-20080414/" title="Latest draft of Device Description Repository Core Vocabulary formally approved by the group">Device Description Repository Core Vocabulary</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2008-04-14 - <a title="Device Description Repository Core Vocabulary publication history" href="/standards/history/ddr-core-vocabulary">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Andrea Trasatti
                            <li>Rotan Hanrahan
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="extensible stylesheet language (xsl) requirements version 2.0" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2008/WD-xslfo20-req-20080326/" title="Latest draft of Extensible Stylesheet Language (XSL) Requirements Version 2.0 formally approved by the group">Extensible  Stylesheet  Language  (XSL)  Requirements  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2008-03-26 - <a title="Extensible Stylesheet Language (XSL) Requirements Version 2.0 publication history" href="/standards/history/xslfo20-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Klaas Bals
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web security experience, indicators and trust: scope and use cases" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-wsc-usecases-20080306/" title="Latest draft of Web Security Experience, Indicators and Trust: Scope and Use Cases formally approved by the group">Web Security Experience, Indicators and Trust: Scope and Use Cases</a></h2>
                        <p class=deliverer>Web Security Context Working Group</p>
                        <p class=pubdetails>2008-03-06 - <a title="Web Security Experience, Indicators and Trust: Scope and Use Cases publication history" href="/standards/history/wsc-usecases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tyler Close
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="best practices for xml internationalization" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2008/NOTE-xml-i18n-bp-20080213/" title="Latest draft of Best Practices for XML Internationalization formally approved by the group">Best Practices for XML Internationalization</a></h2>
                        <p class=deliverer>Internationalization Tag Set (ITS) Working Group</p>
                        <p class=pubdetails>2008-02-13 - <a title="Best Practices for XML Internationalization publication history" href="/standards/history/xml-i18n-bp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yves Savourel
                            <li>Jirka Kosek
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="roadmap for accessible rich internet applications (wai-aria roadmap)" data-tag="accessibility" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2008/WD-wai-aria-roadmap-20080204/" title="Latest draft of Roadmap for Accessible Rich Internet Applications (WAI-ARIA Roadmap) formally approved by the group">Roadmap for Accessible Rich Internet Applications (WAI-ARIA Roadmap)</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2008-02-04 - <a title="Roadmap for Accessible Rich Internet Applications (WAI-ARIA Roadmap) publication history" href="/standards/history/wai-aria-roadmap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql protocol for rdf" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-rdf-sparql-protocol-20080115/" title="Latest draft of SPARQL Protocol for RDF formally approved by the group">SPARQL Protocol for RDF</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2008-01-15 - <a title="SPARQL Protocol for RDF publication history" href="/standards/history/rdf-sparql-protocol">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kendall Clark
                            <li>Lee Feigenbaum
                            <li>Elias Torres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql query language for rdf" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2008/REC-rdf-sparql-query-20080115/" title="Latest draft of SPARQL Query Language for RDF formally approved by the group">SPARQL Query Language for RDF</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2008-01-15 - <a title="SPARQL Query Language for RDF publication history" href="/standards/history/rdf-sparql-query">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg print 1.2, part 1: primer" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2007/WD-SVGPrintPrimer12-20071221/" title="Latest draft of SVG Print 1.2, Part 1: Primer formally approved by the group">SVG Print 1.2, Part 1: Primer</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2007-12-21 - <a title="SVG Print 1.2, Part 1: Primer publication history" href="/standards/history/SVGPrintPrimer12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anthony Grasso
                            <li>Andrew Shellshear
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg print 1.2, part 2: language" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2007/WD-SVGPrint12-20071221/" title="Latest draft of SVG Print 1.2, Part 2: Language formally approved by the group">SVG Print 1.2, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2007-12-21 - <a title="SVG Print 1.2, Part 2: Language publication history" href="/standards/history/SVGPrint12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Danilo
                            <li>Craig Northway
                            <li>Andrew Shellshear
                            <li>Anthony Grasso
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) best practices" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2007/WD-exi-best-practices-20071219/" title="Latest draft of Efficient XML Interchange (EXI) Best Practices formally approved by the group">Efficient XML Interchange (EXI) Best Practices</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2007-12-19 - <a title="Efficient XML Interchange (EXI) Best Practices publication history" href="/standards/history/exi-best-practices">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cokus
                            <li>Daniel Vogelheim
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="device description repository requirements 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-DDR-requirements-20071217/" title="Latest draft of Device Description Repository Requirements 1.0 formally approved by the group">Device  Description  Repository  Requirements&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2007-12-17 - <a title="Device Description Repository Requirements 1.0 publication history" href="/standards/history/DDR-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kevin Smith
                            <li>David Sanders
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="html design principles" data-tag="html" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2007/WD-html-design-principles-20071126/" title="Latest draft of HTML Design Principles formally approved by the group">HTML Design Principles</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2007-11-26 - <a title="HTML Design Principles publication history" href="/standards/history/html-design-principles">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Maciej Stachowiak
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web services policy 1.5 - guidelines for policy assertion authors" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-ws-policy-guidelines-20071112/" title="Latest draft of Web Services Policy 1.5 - Guidelines for Policy Assertion Authors formally approved by the group">Web Services Policy 1.5 - Guidelines for Policy Assertion Authors</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-11-12 - <a title="Web Services Policy 1.5 - Guidelines for Policy Assertion Authors publication history" href="/standards/history/ws-policy-guidelines">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                            <li>David Orchard
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services policy 1.5 - primer" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-ws-policy-primer-20071112/" title="Latest draft of Web Services Policy 1.5 - Primer formally approved by the group">Web Services Policy 1.5 - Primer</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-11-12 - <a title="Web Services Policy 1.5 - Primer publication history" href="/standards/history/ws-policy-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                            <li>David Orchard
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web user interaction: threat trees" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-wsc-threats-20071101/" title="Latest draft of Web User Interaction: Threat Trees formally approved by the group">Web User Interaction: Threat Trees</a></h2>
                        <p class=deliverer>Web Security Context Working Group</p>
                        <p class=pubdetails>2007-11-01 - <a title="Web User Interaction: Threat Trees publication history" href="/standards/history/wsc-threats">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thomas Roessler
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="user agent accessibility guidelines 2.0 requirements" data-tag="accessibility" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2007/WD-UAAG20-requirements-20071031/" title="Latest draft of User Agent Accessibility Guidelines 2.0 Requirements formally approved by the group">User Agent Accessibility Guidelines 2.0 Requirements</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2007-10-31 - <a title="User Agent Accessibility Guidelines 2.0 Requirements publication history" href="/standards/history/UAAG20-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Allan
                            <li>Jan Richards
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="device description ecosystem 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-dd-ecosystem-20071031/" title="Latest draft of Device Description Ecosystem 1.0 formally approved by the group">Device  Description  Ecosystem&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2007-10-31 - <a title="Device Description Ecosystem 1.0 publication history" href="/standards/history/dd-ecosystem">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rotan Hanrahan
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="device description landscape 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-dd-landscape-20071031/" title="Latest draft of Device Description Landscape 1.0 formally approved by the group">Device  Description  Landscape&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2007-10-31 - <a title="Device Description Landscape 1.0 publication history" href="/standards/history/dd-landscape">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Emmanuel Nkeze
                            <li>Gavin James Pearce
                            <li>Matt Womer
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="powder: use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-powder-use-cases-20071031/" title="Latest draft of POWDER: Use Cases and Requirements formally approved by the group">POWDER: Use Cases and Requirements</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2007-10-31 - <a title="POWDER: Use Cases and Requirements publication history" href="/standards/history/powder-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="protocol for web description resources (powder): web description resources (wdr) vocabulary" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2007/WD-powder-voc-20070925/" title="Latest draft of Protocol for Web Description Resources (POWDER): Web Description Resources (WDR) Vocabulary formally approved by the group">Protocol for Web Description Resources (POWDER): Web Description Resources (WDR) Vocabulary</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2007-09-25 - <a title="Protocol for Web Description Resources (POWDER): Web Description Resources (WDR) Vocabulary publication history" href="/standards/history/powder-voc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrea Perego
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="protocol for web description resources (powder): web description resources datatypes (wdrd)" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2007/WD-powder-xsd-20070925/" title="Latest draft of Protocol for Web Description Resources (POWDER): Web Description Resources Datatypes (WDRD) formally approved by the group">Protocol for Web Description Resources (POWDER): Web Description Resources Datatypes (WDRD)</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2007-09-25 - <a title="Protocol for Web Description Resources (POWDER): Web Description Resources Datatypes (WDRD) publication history" href="/standards/history/powder-xsd">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrea Perego
                            <li>Phil Archer
                            <li>Kevin Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="mtom serialization policy assertion 1.1" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2007/WD-soap12-mtom-policy-20070918/" title="Latest draft of MTOM Serialization Policy Assertion 1.1 formally approved by the group">MTOM  Serialization  Policy  Assertion&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-09-18 - <a title="MTOM Serialization Policy Assertion 1.1 publication history" href="/standards/history/soap12-mtom-policy">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christopher Ferris
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                                          <li data-title="declarative formats for applications and user interfaces" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2007/NOTE-dfaui-20070912/" title="Latest draft of Declarative Formats for Applications and User Interfaces formally approved by the group">Declarative Formats for Applications and User Interfaces</a></h2>
                        <p class=deliverer>Web Application Formats Working Group</p>
                        <p class=pubdetails>2007-09-12 - <a title="Declarative Formats for Applications and User Interfaces publication history" href="/standards/history/dfaui">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arthur Barstow
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="grddl test cases" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-grddl-tests-20070911/" title="Latest draft of GRDDL Test Cases formally approved by the group">GRDDL Test Cases</a></h2>
                        <p class=deliverer>GRDDL Working Group</p>
                        <p class=pubdetails>2007-09-11 - <a title="GRDDL Test Cases publication history" href="/standards/history/grddl-tests">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chimezie Ogbuji
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="gleaning resource descriptions from dialects of languages (grddl)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-grddl-20070911/" title="Latest draft of Gleaning Resource Descriptions from Dialects of Languages (GRDDL) formally approved by the group">Gleaning Resource Descriptions from Dialects of Languages (GRDDL)</a></h2>
                        <p class=deliverer>GRDDL Working Group</p>
                        <p class=pubdetails>2007-09-11 - <a title="Gleaning Resource Descriptions from Dialects of Languages (GRDDL) publication history" href="/standards/history/grddl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dan Connolly
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="web services addressing 1.0 - metadata" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-ws-addr-metadata-20070904/" title="Latest draft of Web Services Addressing 1.0 - Metadata formally approved by the group">Web Services Addressing 1.0 - Metadata</a></h2>
                        <p class=deliverer>Web Services Addressing Working Group</p>
                        <p class=pubdetails>2007-09-04 - <a title="Web Services Addressing 1.0 - Metadata publication history" href="/standards/history/ws-addr-metadata">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Tony Rogers
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services policy 1.5 - attachment" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-ws-policy-attach-20070904/" title="Latest draft of Web Services Policy 1.5 - Attachment formally approved by the group">Web Services Policy 1.5 - Attachment</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-09-04 - <a title="Web Services Policy 1.5 - Attachment publication history" href="/standards/history/ws-policy-attach">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                            <li>David Orchard
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services policy 1.5 - framework" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-ws-policy-20070904/" title="Latest draft of Web Services Policy 1.5 - Framework formally approved by the group">Web Services Policy 1.5 - Framework</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-09-04 - <a title="Web Services Policy 1.5 - Framework publication history" href="/standards/history/ws-policy">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                            <li>David Orchard
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="semantic annotations for wsdl and xml schema" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-sawsdl-20070828/" title="Latest draft of Semantic Annotations for WSDL and XML Schema formally approved by the group">Semantic Annotations for WSDL and XML Schema</a></h2>
                        <p class=deliverer>Semantic Annotations for Web Services Description Language Working Group</p>
                        <p class=pubdetails>2007-08-28 - <a title="Semantic Annotations for WSDL and XML Schema publication history" href="/standards/history/sawsdl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joel Farrell
                            <li>Holger Lausen
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="semantic annotations for wsdl and xml schema — usage guide" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-sawsdl-guide-20070828/" title="Latest draft of Semantic Annotations for WSDL and XML Schema — Usage Guide formally approved by the group">Semantic Annotations for WSDL and XML Schema — Usage Guide</a></h2>
                        <p class=deliverer>Semantic Annotations for Web Services Description Language Working Group</p>
                        <p class=pubdetails>2007-08-28 - <a title="Semantic Annotations for WSDL and XML Schema — Usage Guide publication history" href="/standards/history/sawsdl-guide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rama Akkiraju
                            <li>Brahmananda Sapkota
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="efficient xml interchange measurements note" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2007/WD-exi-measurements-20070725/" title="Latest draft of Efficient XML Interchange Measurements Note formally approved by the group">Efficient XML Interchange Measurements Note</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2007-07-25 - <a title="Efficient XML Interchange Measurements Note publication history" href="/standards/history/exi-measurements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Greg White
                            <li>Jaakko Kangasharju
                            <li>Don Brutzman
                            <li>Stephen Williams
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="guide to versioning xml languages using new xml schema 1.1 features" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2007/WD-xmlschema-guide2versioning-20070720/" title="Latest draft of Guide to Versioning XML Languages using new XML Schema 1.1 features formally approved by the group">Guide to Versioning XML Languages using new XML Schema 1.1 features</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2007-07-20 - <a title="Guide to Versioning XML Languages using new XML Schema 1.1 features publication history" href="/standards/history/xmlschema-guide2versioning">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="wsdl 1.1 element identifiers" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-wsdl11elementidentifiers-20070720/" title="Latest draft of WSDL 1.1 Element Identifiers formally approved by the group">WSDL 1.1 Element Identifiers</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-07-20 - <a title="WSDL 1.1 Element Identifiers publication history" href="/standards/history/wsdl11elementidentifiers">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Orchard
                            <li>Asir Vedamuthu
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xbl 2.0 primer: an introduction for developers" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2007/WD-xbl-primer-20070718/" title="Latest draft of XBL 2.0 Primer: An Introduction for Developers formally approved by the group">XBL 2.0 Primer: An Introduction for Developers</a></h2>
                        <p class=deliverer>Web Application Formats Working Group</p>
                        <p class=pubdetails>2007-07-18 - <a title="XBL 2.0 Primer: An Introduction for Developers publication history" href="/standards/history/xbl-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lachlan Hunt
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                          <li data-title="soap 1.2 part 3: one-way mep" data-tag="" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-soap12-part3-20070702/" title="Latest draft of SOAP 1.2 Part 3: One-Way MEP formally approved by the group">SOAP 1.2 Part 3: One-Way MEP</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-07-02 - <a title="SOAP 1.2 Part 3: One-Way MEP publication history" href="/standards/history/soap12-part3">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="grddl primer" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-grddl-primer-20070628/" title="Latest draft of GRDDL Primer formally approved by the group">GRDDL Primer</a></h2>
                        <p class=deliverer>GRDDL Working Group</p>
                        <p class=pubdetails>2007-06-28 - <a title="GRDDL Primer publication history" href="/standards/history/grddl-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harry Halpin
                            <li>Ian Davis
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0: additional meps" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-wsdl20-additional-meps-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0: Additional MEPs formally approved by the group">Web Services Description Language (WSDL) Version 2.0: Additional MEPs</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0: Additional MEPs publication history" href="/standards/history/wsdl20-additional-meps">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Lewis
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0 part 0: primer" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-wsdl20-primer-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0 Part 0: Primer formally approved by the group">Web Services Description Language (WSDL) Version 2.0 Part 0: Primer</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0 Part 0: Primer publication history" href="/standards/history/wsdl20-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Booth
                            <li>Kevin Liu
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0: rdf mapping" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-wsdl20-rdf-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0: RDF Mapping formally approved by the group">Web Services Description Language (WSDL) Version 2.0: RDF Mapping</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0: RDF Mapping publication history" href="/standards/history/wsdl20-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jacek Kopecky
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0 part 1: core language" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-wsdl20-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0 Part 1: Core Language formally approved by the group">Web Services Description Language (WSDL) Version 2.0 Part 1: Core Language</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0 Part 1: Core Language publication history" href="/standards/history/wsdl20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roberto Chinnici
                            <li>Jean-Jacques Moreau
                            <li>Arthur Ryman
                            <li>Sanjiva Weerawarana
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0 soap 1.1 binding" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-wsdl20-soap11-binding-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0 SOAP 1.1 Binding formally approved by the group">Web Services Description Language (WSDL) Version 2.0 SOAP 1.1 Binding</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0 SOAP 1.1 Binding publication history" href="/standards/history/wsdl20-soap11-binding">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web services description language (wsdl) version 2.0 part 2: adjuncts" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-wsdl20-adjuncts-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0 Part 2: Adjuncts formally approved by the group">Web Services Description Language (WSDL) Version 2.0 Part 2: Adjuncts</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0 Part 2: Adjuncts publication history" href="/standards/history/wsdl20-adjuncts">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roberto Chinnici
                            <li>Hugo Haas
                            <li>Amelia Lewis
                            <li>Jean-Jacques Moreau
                            <li>David Orchard
                            <li>Sanjiva Weerawarana
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="voice extensible markup language (voicexml) 2.1" data-tag="media" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-voicexml21-20070619/" title="Latest draft of Voice Extensible Markup Language (VoiceXML) 2.1 formally approved by the group">Voice  Extensible  Markup  Language  (VoiceXML)&nbsp;2.1</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2007-06-19 - <a title="Voice Extensible Markup Language (VoiceXML) 2.1 publication history" href="/standards/history/voicexml21">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Oshry
                            <li>RJ Auburn
                            <li>Paolo Baggia
                            <li>Michael Bodell
                            <li>David Burke
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Scott McGlashan
                            <li>Alex Lee
                            <li>Brandon Porter
                            <li>Kenneth Rehor
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="serializing sparql query results in json" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-rdf-sparql-json-res-20070618/" title="Latest draft of Serializing SPARQL Query Results in JSON formally approved by the group">Serializing SPARQL Query Results in JSON</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2007-06-18 - <a title="Serializing SPARQL Query Results in JSON publication history" href="/standards/history/rdf-sparql-json-res">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kendall Clark
                            <li>Lee Feigenbaum
                            <li>Elias Torres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="speech synthesis markup language version 1.1 requirements" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2007/WD-ssml11reqs-20070611/" title="Latest draft of Speech Synthesis Markup Language Version 1.1 Requirements formally approved by the group">Speech Synthesis Markup Language Version 1.1 Requirements</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2007-06-11 - <a title="Speech Synthesis Markup Language Version 1.1 Requirements publication history" href="/standards/history/ssml11reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                            <li>Zhi Wei Shuang
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg filters 1.2, part 2: language" data-tag="graphics" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2007/WD-SVGFilter12-20070501/" title="Latest draft of SVG Filters 1.2, Part 2: Language formally approved by the group">SVG Filters 1.2, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2007-05-01 - <a title="SVG Filters 1.2, Part 2: Language publication history" href="/standards/history/SVGFilter12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Erik Dahlström
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg filters 1.2, part 1: primer" data-tag="graphics" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2007/WD-SVGFilterPrimer12-20070501/" title="Latest draft of SVG Filters 1.2, Part 1: Primer formally approved by the group">SVG Filters 1.2, Part 1: Primer</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2007-05-01 - <a title="SVG Filters 1.2, Part 1: Primer publication history" href="/standards/history/SVGFilterPrimer12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Erik Dahlström
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                    <li data-title="soap version 1.2 part 1: messaging framework (second edition)" data-tag="" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-soap12-part1-20070427/" title="Latest draft of SOAP Version 1.2 Part 1: Messaging Framework (Second Edition) formally approved by the group">SOAP Version 1.2 Part 1: Messaging Framework (Second Edition)</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-04-27 - <a title="SOAP Version 1.2 Part 1: Messaging Framework (Second Edition) publication history" href="/standards/history/soap12-part1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Noah Mendelsohn
                            <li>Jean-Jacques Moreau
                            <li>Henrik Frystyk Nielsen
                            <li>Anish Karmarkar
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                    <li data-title="soap version 1.2 part 0: primer (second edition)" data-tag="" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-soap12-part0-20070427/" title="Latest draft of SOAP Version 1.2 Part 0: Primer (Second Edition) formally approved by the group">SOAP Version 1.2 Part 0: Primer (Second Edition)</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-04-27 - <a title="SOAP Version 1.2 Part 0: Primer (Second Edition) publication history" href="/standards/history/soap12-part0">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nilo Mitra
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                                          <li data-title="soap version 1.2 part 2: adjuncts (second edition)" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-soap12-part2-20070427/" title="Latest draft of SOAP Version 1.2 Part 2: Adjuncts (Second Edition) formally approved by the group">SOAP Version 1.2 Part 2: Adjuncts (Second Edition)</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-04-27 - <a title="SOAP Version 1.2 Part 2: Adjuncts (Second Edition) publication history" href="/standards/history/soap12-part2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Noah Mendelsohn
                            <li>Jean-Jacques Moreau
                            <li>Henrik Frystyk Nielsen
                            <li>Anish Karmarkar
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="soap version 1.2 specification assertions and test collection (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-soap12-testcollection-20070427/" title="Latest draft of SOAP Version 1.2 Specification Assertions and Test Collection (Second Edition) formally approved by the group">SOAP Version 1.2 Specification Assertions and Test Collection (Second Edition)</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-04-27 - <a title="SOAP Version 1.2 Specification Assertions and Test Collection (Second Edition) publication history" href="/standards/history/soap12-testcollection">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hugo Haas
                            <li>Oisin Hurley
                            <li>Anish Karmarkar
                            <li>Jeff Mischkinsky
                            <li>Mark Jones
                            <li>Lynne R. Thompson
                            <li>Richard D. Martin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="grddl use cases: scenarios of extracting rdf data from xml documents" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-grddl-scenarios-20070406/" title="Latest draft of GRDDL Use Cases: Scenarios of extracting RDF data from XML documents formally approved by the group">GRDDL Use Cases: Scenarios of extracting RDF data from XML documents</a></h2>
                        <p class=deliverer>GRDDL Working Group</p>
                        <p class=pubdetails>2007-04-06 - <a title="GRDDL Use Cases: Scenarios of extracting RDF data from XML documents publication history" href="/standards/history/grddl-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Fabien Gandon
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="semantic interpretation for speech recognition (sisr) version 1.0" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-semantic-interpretation-20070405/" title="Latest draft of Semantic Interpretation for Speech Recognition (SISR) Version 1.0 formally approved by the group">Semantic  Interpretation  for  Speech  Recognition  (SISR)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2007-04-05 - <a title="Semantic Interpretation for Speech Recognition (SISR) Version 1.0 publication history" href="/standards/history/semantic-interpretation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Van Tichelen
                            <li>David Burke
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="internationalization tag set (its) version 1.0" data-tag="i18n" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2007/REC-its-20070403/" title="Latest draft of Internationalization Tag Set (ITS) Version 1.0 formally approved by the group">Internationalization  Tag  Set  (ITS)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Internationalization Tag Set (ITS) Working Group</p>
                        <p class=pubdetails>2007-04-03 - <a title="Internationalization Tag Set (ITS) Version 1.0 publication history" href="/standards/history/its">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christian Lieske
                            <li>Felix Sasaki
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdfa use cases: scenarios for embedding rdf in html" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2007/WD-xhtml-rdfa-scenarios-20070330/" title="Latest draft of RDFa Use Cases: Scenarios for Embedding RDF in HTML formally approved by the group">RDFa Use Cases: Scenarios for Embedding RDF in HTML</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2007-03-30 - <a title="RDFa Use Cases: Scenarios for Embedding RDF in HTML publication history" href="/standards/history/xhtml-rdfa-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Adida
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                    <li data-title="xml query use cases" data-tag="xml" data-status="note" data-version="">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-xquery-use-cases-20070323/" title="Latest draft of XML Query Use Cases formally approved by the group">XML Query Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2007-03-23 - <a title="XML Query Use Cases publication history" href="/standards/history/xquery-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Don Chamberlin
                            <li>Peter Fankhauser
                            <li>Daniela Florescu
                            <li>Massimo Marchiori
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xml query (xquery) requirements" data-tag="xml" data-status="note" data-version="">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2007/NOTE-xquery-requirements-20070323/" title="Latest draft of XML Query (XQuery) Requirements formally approved by the group">XML Query (XQuery) Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2007-03-23 - <a title="XML Query (XQuery) Requirements publication history" href="/standards/history/xquery-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Don Chamberlin
                            <li>Peter Fankhauser
                            <li>Massimo Marchiori
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="using xml digital signatures in the 2006 xml environment" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-DSig-usage-20061220/" title="Latest draft of Using XML Digital Signatures in the 2006 XML Environment formally approved by the group">Using XML Digital Signatures in the 2006 XML Environment</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-12-20 - <a title="Using XML Digital Signatures in the 2006 XML Environment publication history" href="/standards/history/DSig-usage">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thomas Roessler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="known issues with canonical xml 1.0 (c14n/1.0)" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-C14N-issues-20061220/" title="Latest draft of Known Issues with Canonical XML 1.0 (C14N/1.0) formally approved by the group">Known Issues with Canonical XML 1.0 (C14N/1.0)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-12-20 - <a title="Known Issues with Canonical XML 1.0 (C14N/1.0) publication history" href="/standards/history/C14N-issues">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>José Kahan
                            <li>Konrad Lanz
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="extensible stylesheet language (xsl) version 1.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2006/REC-xsl11-20061205/" title="Latest draft of Extensible Stylesheet Language (XSL) Version 1.1 formally approved by the group">Extensible  Stylesheet  Language  (XSL)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2006-12-05 - <a title="Extensible Stylesheet Language (XSL) Version 1.1 publication history" href="/standards/history/xsl11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anders Berglund
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rich web application backplane" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-backplane-20061116/" title="Latest draft of Rich Web Application Backplane formally approved by the group">Rich Web Application Backplane</a></h2>
                        <p class=deliverer>Hypertext Coordination Group (Member)</p>
                        <p class=pubdetails>2006-11-16 - <a title="Rich Web Application Backplane publication history" href="/standards/history/backplane">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>John Boyer
                            <li>Alfred S. Gilman
                            <li>Kevin Kelly
                            <li>Steven Pemberton
                            <li>Charles Wiecha
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml inclusions (xinclude) version 1.0 (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2006/REC-xinclude-20061115/" title="Latest draft of XML Inclusions (XInclude) Version 1.0 (Second Edition) formally approved by the group">XML Inclusions (XInclude) Version 1.0 (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-11-15 - <a title="XML Inclusions (XInclude) Version 1.0 (Second Edition) publication history" href="/standards/history/xinclude">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                            <li>David Orchard
                            <li>Daniel Veillard
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="remote events for xml (rex) 1.0" data-tag="dom xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2006/WD-rex-20061013/" title="Latest draft of Remote Events for XML (REX) 1.0 formally approved by the group">Remote  Events  for  XML  (REX)&nbsp;1.0</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>Web API Working Group</p>
                        <p class=pubdetails>2006-10-13 - <a title="Remote Events for XML (REX) 1.0 publication history" href="/standards/history/rex">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="common sense suggestions for developing multimodal user interfaces" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-mmi-suggestions-20060911/" title="Latest draft of Common Sense Suggestions for Developing Multimodal User Interfaces formally approved by the group">Common Sense Suggestions for Developing Multimodal User Interfaces</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2006-09-11 - <a title="Common Sense Suggestions for Developing Multimodal User Interfaces publication history" href="/standards/history/mmi-suggestions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Larson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="namespaces in xml 1.1 (second edition)" data-tag="xml" data-status="rec" data-version="upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2006/REC-xml-names11-20060816/" title="Latest draft of Namespaces in XML 1.1 (Second Edition) formally approved by the group">Namespaces in XML 1.1 (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-08-16 - <a title="Namespaces in XML 1.1 (Second Edition) publication history" href="/standards/history/xml-names11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Bray
                            <li>Dave Hollander
                            <li>Andrew Layman
                            <li>Richard Tobin
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="extensible markup language (xml) 1.1 (second edition)" data-tag="xml" data-status="rec" data-version="upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2006/REC-xml11-20060816/" title="Latest draft of Extensible Markup Language (XML) 1.1 (Second Edition) formally approved by the group">Extensible Markup Language (XML) 1.1 (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-08-16 - <a title="Extensible Markup Language (XML) 1.1 (Second Edition) publication history" href="/standards/history/xml11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Bray
                            <li>Jean Paoli
                            <li>Michael Sperberg-McQueen
                            <li>Eve Maler
                            <li>François Yergeau
                            <li>John Cowan
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="svgt 1.2 requirements" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2006/WD-SVGTiny12Reqs-20060810/" title="Latest draft of SVGT 1.2 Requirements formally approved by the group">SVGT 1.2 Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2006-08-10 - <a title="SVGT 1.2 Requirements publication history" href="/standards/history/SVGTiny12Reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Emmons
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="web services choreography description language: primer" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2006/WD-ws-cdl-10-primer-20060619/" title="Latest draft of Web Services Choreography Description Language: Primer formally approved by the group">Web Services Choreography Description Language: Primer</a></h2>
                        <p class=deliverer>Web Services Choreography Working Group</p>
                        <p class=pubdetails>2006-06-19 - <a title="Web Services Choreography Description Language: Primer publication history" href="/standards/history/ws-cdl-10-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Ross-Talbot
                            <li>Tony Fletcher
                          </ul>
                                  </li>
                                                                                                                          <li data-title="rdf/owl representation of wordnet" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2006/WD-wordnet-rdf-20060619/" title="Latest draft of RDF/OWL Representation of WordNet formally approved by the group">RDF/OWL Representation of WordNet</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-06-19 - <a title="RDF/OWL Representation of WordNet publication history" href="/standards/history/wordnet-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark van Assem
                            <li>Aldo Gangemi
                            <li>Guus Schreiber
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="internationalization and localization markup requirements" data-tag="i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2006/WD-itsreq-20060518/" title="Latest draft of Internationalization and Localization Markup Requirements formally approved by the group">Internationalization and Localization Markup Requirements</a></h2>
                        <p class=deliverer>Internationalization Tag Set (ITS) Working Group</p>
                        <p class=pubdetails>2006-05-18 - <a title="Internationalization and Localization Markup Requirements publication history" href="/standards/history/itsreq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yves Savourel
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web services addressing 1.0 - core" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2006/REC-ws-addr-core-20060509/" title="Latest draft of Web Services Addressing 1.0 - Core formally approved by the group">Web Services Addressing 1.0 - Core</a></h2>
                        <p class=deliverer>Web Services Addressing Working Group</p>
                        <p class=pubdetails>2006-05-09 - <a title="Web Services Addressing 1.0 - Core publication history" href="/standards/history/ws-addr-core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Tony Rogers
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services addressing 1.0 - soap binding" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2006/REC-ws-addr-soap-20060509/" title="Latest draft of Web Services Addressing 1.0 - SOAP Binding formally approved by the group">Web Services Addressing 1.0 - SOAP Binding</a></h2>
                        <p class=deliverer>Web Services Addressing Working Group</p>
                        <p class=pubdetails>2006-05-09 - <a title="Web Services Addressing 1.0 - SOAP Binding publication history" href="/standards/history/ws-addr-soap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Tony Rogers
                          </ul>
                                  </li>
                                                                                                                          <li data-title="timed text (tt) authoring format 1.0 use cases and requirements" data-tag="media" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-ttaf1-req-20060427/" title="Latest draft of Timed Text (TT) Authoring Format 1.0 Use Cases and Requirements formally approved by the group">Timed Text (TT) Authoring Format 1.0 Use Cases and Requirements</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2006-04-27 - <a title="Timed Text (TT) Authoring Format 1.0 Use Cases and Requirements publication history" href="/standards/history/ttaf1-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="requirements for wcag 2.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-wcag2-req-20060425/" title="Latest draft of Requirements for WCAG 2.0 formally approved by the group">Requirements  for  WCAG&nbsp;2.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2006-04-25 - <a title="Requirements for WCAG 2.0 publication history" href="/standards/history/wcag2-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Vanderheiden
                            <li>John Slatin
                            <li>Wendy Chisholm
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="multimodal application developer feedback" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-mmi-dev-feedback-20060414/" title="Latest draft of Multimodal Application Developer Feedback formally approved by the group">Multimodal Application Developer Feedback</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2006-04-14 - <a title="Multimodal Application Developer Feedback publication history" href="/standards/history/mmi-dev-feedback">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gerald McCobb
                            <li>Klaus Reifenrath
                            <li>Raj Tumuluri
                            <li>Sunil Kumar
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="defining n-ary relations on the semantic web" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-swbp-n-aryRelations-20060412/" title="Latest draft of Defining N-ary Relations on the Semantic Web formally approved by the group">Defining N-ary Relations on the Semantic Web</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-04-12 - <a title="Defining N-ary Relations on the Semantic Web publication history" href="/standards/history/swbp-n-aryRelations">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Natasha Noy
                            <li>Alan Rector
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml processing model requirements and use cases" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2006/WD-xproc-requirements-20060411/" title="Latest draft of XML Processing Model Requirements and Use Cases formally approved by the group">XML Processing Model Requirements and Use Cases</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2006-04-11 - <a title="XML Processing Model Requirements and Use Cases publication history" href="/standards/history/xproc-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Miłowski
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the disposition of names in an xml namespace" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2006/WD-namespaceState-20060329/" title="Latest draft of The Disposition of Names in an XML Namespace formally approved by the group">The Disposition of Names in an XML Namespace</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2006-03-29 - <a title="The Disposition of Names in an XML Namespace publication history" href="/standards/history/namespaceState">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="image annotation on the semantic web" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2006/WD-swbp-image-annotation-20060322/" title="Latest draft of Image Annotation on the Semantic Web formally approved by the group">Image Annotation on the Semantic Web</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-03-22 - <a title="Image Annotation on the Semantic Web publication history" href="/standards/history/swbp-image-annotation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jacco van Ossenbruggen
                            <li>Raphaël Troncy
                            <li>Giorgos Stamou
                            <li>Jeff Pan
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="soap 1.1 request optional response http binding" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-soap11-ror-httpbinding-20060321/" title="Latest draft of SOAP 1.1 Request Optional Response HTTP Binding formally approved by the group">SOAP 1.1 Request Optional Response HTTP Binding</a></h2>
                        <p class=deliverer>Web Services Addressing Working Group</p>
                        <p class=pubdetails>2006-03-21 - <a title="SOAP 1.1 Request Optional Response HTTP Binding publication history" href="/standards/history/soap11-ror-httpbinding">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="delivery context overview for device independence" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-di-dco-20060320/" title="Latest draft of Delivery Context Overview for Device Independence formally approved by the group">Delivery Context Overview for Device Independence</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2006-03-20 - <a title="Delivery Context Overview for Device Independence publication history" href="/standards/history/di-dco">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roger Gimson
                            <li>Rhys Lewis
                            <li>Sailesh Sathish
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xml schema datatypes in rdf and owl" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-swbp-xsch-datatypes-20060314/" title="Latest draft of XML Schema Datatypes in RDF and OWL formally approved by the group">XML Schema Datatypes in RDF and OWL</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-03-14 - <a title="XML Schema Datatypes in RDF and OWL publication history" href="/standards/history/swbp-xsch-datatypes">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Carroll
                            <li>Jeff Pan
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a semantic web primer for object-oriented software developers" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-sw-oosd-primer-20060309/" title="Latest draft of A Semantic Web Primer for Object-Oriented Software Developers formally approved by the group">A Semantic Web Primer for Object-Oriented Software Developers</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-03-09 - <a title="A Semantic Web Primer for Object-Oriented Software Developers publication history" href="/standards/history/sw-oosd-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Holger Knublauch
                            <li>Daniel Oberle
                            <li>Philip Tetlow
                            <li>Evan Wallace
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a survey of rdf/topic maps interoperability proposals" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-rdftm-survey-20060210/" title="Latest draft of A Survey of RDF/Topic Maps Interoperability Proposals formally approved by the group">A Survey of RDF/Topic Maps Interoperability Proposals</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-02-10 - <a title="A Survey of RDF/Topic Maps Interoperability Proposals publication history" href="/standards/history/rdftm-survey">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Pepper
                            <li>Fabio Vitali
                            <li>Lars Marius Garshol
                            <li>Nicola Gessa
                            <li>Valentina Presutti
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="remote events for xml (rex) requirements" data-tag="dom xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-rex-reqs-20060202/" title="Latest draft of Remote Events for XML (REX) Requirements formally approved by the group">Remote Events for XML (REX) Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2006-02-02 - <a title="Remote Events for XML (REX) Requirements publication history" href="/standards/history/rex-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="arabic mathematical notation" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2006/NOTE-arabic-math-20060131/" title="Latest draft of Arabic mathematical notation formally approved by the group">Arabic mathematical notation</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2006-01-31 - <a title="Arabic mathematical notation publication history" href="/standards/history/arabic-math">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Azzeddine Lazrek
                            <li>Bruce Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                <li data-title="scope of mobile web best practices" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-mobile-bp-scope-20051220/" title="Latest draft of Scope of Mobile Web Best Practices formally approved by the group">Scope of Mobile Web Best Practices</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2005-12-20 - <a title="Scope of Mobile Web Best Practices publication history" href="/standards/history/mobile-bp-scope">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Edward Mitukiewicz
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="compound document use cases and requirements version 2.0" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2005/WD-CDFReqs-20051219/" title="Latest draft of Compound Document Use Cases and Requirements Version 2.0 formally approved by the group">Compound  Document  Use  Cases  and  Requirements  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2005-12-19 - <a title="Compound Document Use Cases and Requirements Version 2.0 publication history" href="/standards/history/CDFReqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Speicher
                            <li>Petri Vuorimaa
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="using xkms with pgp" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-xkms-pgp-20051219/" title="Latest draft of Using XKMS with PGP formally approved by the group">Using XKMS with PGP</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2005-12-19 - <a title="Using XKMS with PGP publication history" href="/standards/history/xkms-pgp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tommy Lindberg
                            <li>José Kahan
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="compound document by reference use cases and requirements version 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-CDRReqs-20051219/" title="Latest draft of Compound Document by Reference Use Cases and Requirements Version 1.0 formally approved by the group">Compound  Document  by  Reference  Use  Cases  and  Requirements  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2005-12-19 - <a title="Compound Document by Reference Use Cases and Requirements Version 1.0 publication history" href="/standards/history/CDRReqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Appelquist
                            <li>Timur Mehrvarz
                            <li>Antoine Quint
                          </ul>
                                  </li>
                                                                                                    <li data-title="synchronized multimedia integration language (smil 2.1)" data-tag="" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2005/REC-SMIL2-20051213/" title="Latest draft of Synchronized Multimedia Integration Language (SMIL 2.1) formally approved by the group">Synchronized Multimedia Integration Language (SMIL 2.1)</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2005-12-13 - <a title="Synchronized Multimedia Integration Language (SMIL 2.1) publication history" href="/standards/history/SMIL2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thierry Michel
                            <li>Guido Grassel
                            <li>Antti Koivisto
                            <li>Nabil Layaida
                            <li>Jack Jansen
                            <li>Sjoerd Mullender
                            <li>Daniel Zucker
                            <li>Dick Bulterman
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="a wsdl 1.1 description for xkms" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-xkms-wsdl-20051118/" title="Latest draft of A WSDL 1.1 description for XKMS formally approved by the group">A WSDL 1.1 description for XKMS</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2005-11-18 - <a title="A WSDL 1.1 description for XKMS publication history" href="/standards/history/xkms-wsdl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rich Salz
                            <li>Yunhao Zhang
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="web services choreography description language version 1.0" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2005/CR-ws-cdl-10-20051109/" title="Latest draft of Web Services Choreography Description Language Version 1.0 formally approved by the group">Web  Services  Choreography  Description  Language  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Services Choreography Working Group</p>
                        <p class=pubdetails>2005-11-09 - <a title="Web Services Choreography Description Language Version 1.0 publication history" href="/standards/history/ws-cdl-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nickolas Kavantzas
                            <li>David Burdett
                            <li>Greg Ritzinger
                            <li>Tony Fletcher
                            <li>Yves Lafon
                            <li>Charlton Barreto
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="sparql protocol for rdf using wsdl 1.1" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2005/WD-sprot11-20051024/" title="Latest draft of SPARQL Protocol for RDF Using WSDL 1.1 formally approved by the group">SPARQL  Protocol  for  RDF  Using  WSDL&nbsp;1.1</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2005-10-24 - <a title="SPARQL Protocol for RDF Using WSDL 1.1 publication history" href="/standards/history/sprot11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lee Feigenbaum
                            <li>Andy Seaborne
                            <li>Elias Torres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf calendar - an application of the resource description framework to icalendar data" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-rdfcal-20050929/" title="Latest draft of RDF Calendar - an application of the Resource Description Framework to iCalendar Data formally approved by the group">RDF Calendar - an application of the Resource Description Framework to iCalendar Data</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2005-09-29 - <a title="RDF Calendar - an application of the Resource Description Framework to iCalendar Data publication history" href="/standards/history/rdfcal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dan Connolly
                            <li>Libby Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="test metadata" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-test-metadata-20050914/" title="Latest draft of Test Metadata formally approved by the group">Test Metadata</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2005-09-14 - <a title="Test Metadata publication history" href="/standards/history/test-metadata">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Curran
                            <li>Karl Dubost
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="xml:id version 1.0" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2005/REC-xml-id-20050909/" title="Latest draft of xml:id Version 1.0 formally approved by the group">xml:id  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2005-09-09 - <a title="xml:id Version 1.0 publication history" href="/standards/history/xml-id">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                            <li>Daniel Veillard
                            <li>Norman Walsh
                          </ul>
                                  </li>
                                                                                                                          <li data-title="the qa handbook" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-qa-handbook-20050906/" title="Latest draft of The QA Handbook formally approved by the group">The QA Handbook</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2005-09-06 - <a title="The QA Handbook publication history" href="/standards/history/qa-handbook">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lofton Henderson
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="variability in specifications" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-spec-variability-20050831/" title="Latest draft of Variability in Specifications formally approved by the group">Variability in Specifications</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2005-08-31 - <a title="Variability in Specifications publication history" href="/standards/history/spec-variability">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dominique Hazaël-Massieux
                            <li>Lynne Rosenthal
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="discussion of alternative schema languages and type system support in wsdl 2.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-wsdl20-altschemalangs-20050817/" title="Latest draft of Discussion of Alternative Schema Languages and Type System Support in WSDL 2.0 formally approved by the group">Discussion  of  Alternative  Schema  Languages  and  Type  System  Support  in  WSDL&nbsp;2.0</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2005-08-17 - <a title="Discussion of Alternative Schema Languages and Type System Support in WSDL 2.0 publication history" href="/standards/history/wsdl20-altschemalangs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Lewis
                            <li>Bijan Parsia
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="qa framework: specification guidelines" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2005/REC-qaframe-spec-20050817/" title="Latest draft of QA Framework: Specification Guidelines formally approved by the group">QA Framework: Specification Guidelines</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2005-08-17 - <a title="QA Framework: Specification Guidelines publication history" href="/standards/history/qaframe-spec">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Karl Dubost
                            <li>Lynne Rosenthal
                            <li>Dominique Hazaël-Massieux
                            <li>Lofton Henderson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="svg&#039;s xml binding language (sxbl)" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2005/WD-sXBL-20050815/" title="Latest draft of SVG&#039;s XML Binding Language (sXBL) formally approved by the group">SVG's XML Binding Language (sXBL)</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2005-08-15 - <a title="SVG&#039;s XML Binding Language (sXBL) publication history" href="/standards/history/sXBL">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jon Ferraiolo
                            <li>Ian Hickson
                            <li>David Hyatt
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml key management specification (xkms 2.0) bindings" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2005/REC-xkms2-bindings-20050628/" title="Latest draft of XML Key Management Specification (XKMS 2.0) Bindings formally approved by the group">XML Key Management Specification (XKMS 2.0) Bindings</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2005-06-28 - <a title="XML Key Management Specification (XKMS 2.0) Bindings publication history" href="/standards/history/xkms2-bindings">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phillip Hallam-Baker
                            <li>Shivaram Mysore
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml key management specification (xkms 2.0)" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2005/REC-xkms2-20050628/" title="Latest draft of XML Key Management Specification (XKMS 2.0) formally approved by the group">XML Key Management Specification (XKMS 2.0)</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2005-06-28 - <a title="XML Key Management Specification (XKMS 2.0) publication history" href="/standards/history/xkms2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phillip Hallam-Baker
                            <li>Shivaram Mysore
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xpath requirements version 2.0" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2005/WD-xpath20req-20050603/" title="Latest draft of XPath Requirements Version 2.0 formally approved by the group">XPath  Requirements  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2005-06-03 - <a title="XPath Requirements Version 2.0 publication history" href="/standards/history/xpath20req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mary Fernandez
                            <li>K Karun
                            <li>Mark Scardina
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ssml 1.0 say-as attribute values" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-ssml-sayas-20050526/" title="Latest draft of SSML 1.0 say-as attribute values formally approved by the group">SSML 1.0 say-as attribute values</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2005-05-26 - <a title="SSML 1.0 say-as attribute values publication history" href="/standards/history/ssml-sayas">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                            <li>Paolo Baggia
                            <li>An Buyle
                            <li>Ellen Eide
                            <li>Luc Van Tichelen
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="representing specified values in owl: &quot;value partitions&quot; and &quot;value sets&quot;" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-swbp-specified-values-20050517/" title="Latest draft of Representing Specified Values in OWL: &quot;value partitions&quot; and &quot;value sets&quot; formally approved by the group">Representing Specified Values in OWL: "value partitions" and "value sets"</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2005-05-17 - <a title="Representing Specified Values in OWL: &quot;value partitions&quot; and &quot;value sets&quot; publication history" href="/standards/history/swbp-specified-values">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alan Rector
                          </ul>
                                  </li>
                                                                                                                          <li data-title="quick guide to publishing a thesaurus on the semantic web" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2005/WD-swbp-thesaurus-pubguide-20050517/" title="Latest draft of Quick Guide to Publishing a Thesaurus on the Semantic Web formally approved by the group">Quick Guide to Publishing a Thesaurus on the Semantic Web</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2005-05-17 - <a title="Quick Guide to Publishing a Thesaurus on the Semantic Web publication history" href="/standards/history/swbp-thesaurus-pubguide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alistair Miles
                          </ul>
                                  </li>
                                                                                                    <li data-title="processing xml 1.1 documents with xml schema 1.0 processors" data-tag="xml" data-status="note" data-version="">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-xml11schema10-20050511/" title="Latest draft of Processing XML 1.1 documents with XML Schema 1.0 processors formally approved by the group">Processing XML 1.1 documents with XML Schema 1.0 processors</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2005-05-11 - <a title="Processing XML 1.1 documents with XML Schema 1.0 processors publication history" href="/standards/history/xml11schema10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="describing media content of binary data in xml" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-xml-media-types-20050504/" title="Latest draft of Describing Media Content of Binary Data in XML formally approved by the group">Describing Media Content of Binary Data in XML</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2005-05-04 - <a title="Describing Media Content of Binary Data in XML publication history" href="/standards/history/xml-media-types">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anish Karmarkar
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                          <li data-title="scalable vector graphics (svg) full 1.2 specification" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2005/WD-SVG12-20050413/" title="Latest draft of Scalable Vector Graphics (SVG) Full 1.2 Specification formally approved by the group">Scalable Vector Graphics (SVG) Full 1.2 Specification</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2005-04-13 - <a title="Scalable Vector Graphics (SVG) Full 1.2 Specification publication history" href="/standards/history/SVG12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dean Jackson
                            <li>Craig Northway
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="representing classes as property values on the semantic web" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-swbp-classes-as-values-20050405/" title="Latest draft of Representing Classes As Property Values on the Semantic Web formally approved by the group">Representing Classes As Property Values on the Semantic Web</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2005-04-05 - <a title="Representing Classes As Property Values on the Semantic Web publication history" href="/standards/history/swbp-classes-as-values">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Natasha Noy
                          </ul>
                                  </li>
                                                                                                                          <li data-title="building a tokenizer for xpath or xquery" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2005/WD-xquery-xpath-parsing-20050404/" title="Latest draft of Building a Tokenizer for XPath or XQuery formally approved by the group">Building a Tokenizer for XPath or XQuery</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2005-04-04 - <a title="Building a Tokenizer for XPath or XQuery publication history" href="/standards/history/xquery-xpath-parsing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Boag
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml binary characterization" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-xbc-characterization-20050331/" title="Latest draft of XML Binary Characterization formally approved by the group">XML Binary Characterization</a></h2>
                        <p class=deliverer>XML Binary Characterization Working Group</p>
                        <p class=pubdetails>2005-03-31 - <a title="XML Binary Characterization publication history" href="/standards/history/xbc-characterization">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Oliver Goldman
                            <li>Dmitry Lenkov
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml binary characterization measurement methodologies" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-xbc-measurement-20050331/" title="Latest draft of XML Binary Characterization Measurement Methodologies formally approved by the group">XML Binary Characterization Measurement Methodologies</a></h2>
                        <p class=deliverer>XML Binary Characterization Working Group</p>
                        <p class=pubdetails>2005-03-31 - <a title="XML Binary Characterization Measurement Methodologies publication history" href="/standards/history/xbc-measurement">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stephen Williams
                            <li>Peter Haggar
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml binary characterization properties" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-xbc-properties-20050331/" title="Latest draft of XML Binary Characterization Properties formally approved by the group">XML Binary Characterization Properties</a></h2>
                        <p class=deliverer>XML Binary Characterization Working Group</p>
                        <p class=pubdetails>2005-03-31 - <a title="XML Binary Characterization Properties publication history" href="/standards/history/xbc-properties">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cokus
                            <li>Santiago Pericas-Geertsen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml binary characterization use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-xbc-use-cases-20050331/" title="Latest draft of XML Binary Characterization Use Cases formally approved by the group">XML Binary Characterization Use Cases</a></h2>
                        <p class=deliverer>XML Binary Characterization Working Group</p>
                        <p class=pubdetails>2005-03-31 - <a title="XML Binary Characterization Use Cases publication history" href="/standards/history/xbc-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cokus
                            <li>Santiago Pericas-Geertsen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdf data access use cases and requirements" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2005/WD-rdf-dawg-uc-20050325/" title="Latest draft of RDF Data Access Use Cases and Requirements formally approved by the group">RDF Data Access Use Cases and Requirements</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2005-03-25 - <a title="RDF Data Access Use Cases and Requirements publication history" href="/standards/history/rdf-dawg-uc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kendall Clark
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="character model for the world wide web 1.0: fundamentals" data-tag="i18n" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2005/REC-charmod-20050215/" title="Latest draft of Character Model for the World Wide Web 1.0: Fundamentals formally approved by the group">Character Model for the World Wide Web 1.0: Fundamentals</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2005-02-15 - <a title="Character Model for the World Wide Web 1.0: Fundamentals publication history" href="/standards/history/charmod">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Dürst
                            <li>François Yergeau
                            <li>Richard Ishida
                            <li>Misha Wolf
                            <li>Tex Texin
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="extending xlink 1.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2005/NOTE-xlink10-ext-20050127/" title="Latest draft of Extending XLink 1.0 formally approved by the group">Extending  XLink&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2005-01-27 - <a title="Extending XLink 1.0 publication history" href="/standards/history/xlink10-ext">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="soap message transmission optimization mechanism" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2005/REC-soap12-mtom-20050125/" title="Latest draft of SOAP Message Transmission Optimization Mechanism formally approved by the group">SOAP Message Transmission Optimization Mechanism</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2005-01-25 - <a title="SOAP Message Transmission Optimization Mechanism publication history" href="/standards/history/soap12-mtom">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Noah Mendelsohn
                            <li>Mark Nottingham
                            <li>Hervé Ruellan
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml-binary optimized packaging" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2005/REC-xop10-20050125/" title="Latest draft of XML-binary Optimized Packaging formally approved by the group">XML-binary Optimized Packaging</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2005-01-25 - <a title="XML-binary Optimized Packaging publication history" href="/standards/history/xop10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Noah Mendelsohn
                            <li>Mark Nottingham
                            <li>Hervé Ruellan
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="resource representation soap header block" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2005/REC-soap12-rep-20050125/" title="Latest draft of Resource Representation SOAP Header Block formally approved by the group">Resource Representation SOAP Header Block</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2005-01-25 - <a title="Resource Representation SOAP Header Block publication history" href="/standards/history/soap12-rep">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anish Karmarkar
                            <li>Martin Gudgin
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                                          <li data-title="glossary of terms for device independence" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2005/WD-di-gloss-20050118/" title="Latest draft of Glossary of Terms for Device Independence formally approved by the group">Glossary of Terms for Device Independence</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2005-01-18 - <a title="Glossary of Terms for Device Independence publication history" href="/standards/history/di-gloss">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="architecture of the world wide web, volume one" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-webarch-20041215/" title="Latest draft of Architecture of the World Wide Web, Volume One formally approved by the group">Architecture of the World Wide Web, Volume One</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2004-12-15 - <a title="Architecture of the World Wide Web, Volume One publication history" href="/standards/history/webarch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Jacobs
                            <li>Norman Walsh
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="requirements for the internationalization of web services" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-ws-i18n-req-20041116/" title="Latest draft of Requirements for the Internationalization of Web Services formally approved by the group">Requirements for the Internationalization of Web Services</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2004-11-16 - <a title="Requirements for the Internationalization of Web Services publication history" href="/standards/history/ws-i18n-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="pronunciation lexicon specification (pls) version 1.0 requirements" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2004/WD-lexicon-reqs-20041029/" title="Latest draft of Pronunciation Lexicon Specification (PLS) Version 1.0 Requirements formally approved by the group">Pronunciation Lexicon Specification (PLS) Version 1.0 Requirements</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2004-10-29 - <a title="Pronunciation Lexicon Specification (PLS) Version 1.0 Requirements publication history" href="/standards/history/lexicon-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Baggia
                            <li>Frank Scahill
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                    <li data-title="xml schema part 0: primer second edition" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-xmlschema-0-20041028/" title="Latest draft of XML Schema Part 0: Primer Second Edition formally approved by the group">XML Schema Part 0: Primer Second Edition</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2004-10-28 - <a title="XML Schema Part 0: Primer Second Edition publication history" href="/standards/history/xmlschema-0">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Fallside
                            <li>Priscilla Walmsley
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xml schema part 1: structures second edition" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-xmlschema-1-20041028/" title="Latest draft of XML Schema Part 1: Structures Second Edition formally approved by the group">XML Schema Part 1: Structures Second Edition</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2004-10-28 - <a title="XML Schema Part 1: Structures Second Edition publication history" href="/standards/history/xmlschema-1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                            <li>David Beech
                            <li>Murray Maloney
                            <li>Noah Mendelsohn
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="xml schema part 2: datatypes second edition" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-xmlschema-2-20041028/" title="Latest draft of XML Schema Part 2: Datatypes Second Edition formally approved by the group">XML Schema Part 2: Datatypes Second Edition</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2004-10-28 - <a title="XML Schema Part 2: Datatypes Second Edition publication history" href="/standards/history/xmlschema-2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul V. Biron
                            <li>Ashok Malhotra
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <li data-title="speech synthesis markup language (ssml) version 1.0" data-tag="media" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-speech-synthesis-20040907/" title="Latest draft of Speech Synthesis Markup Language (SSML) Version 1.0 formally approved by the group">Speech  Synthesis  Markup  Language  (SSML)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2004-09-07 - <a title="Speech Synthesis Markup Language (SSML) Version 1.0 publication history" href="/standards/history/speech-synthesis">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                            <li>Mark Walker
                            <li>Andrew Hunt
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xforms 1.1 requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-xforms-11-req-20040831/" title="Latest draft of XForms 1.1 Requirements formally approved by the group">XForms 1.1 Requirements</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2004-08-31 - <a title="XForms 1.1 Requirements publication history" href="/standards/history/xforms-11-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Roland Merrick
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="qa framework: test guidelines" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2004/WD-qaframe-test-20040820/" title="Latest draft of QA Framework: Test Guidelines formally approved by the group">QA Framework: Test Guidelines</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2004-08-20 - <a title="QA Framework: Test Guidelines publication history" href="/standards/history/qaframe-test">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Curran
                            <li>Dimitris Dimitriadis
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services internationalization usage scenarios" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-ws-i18n-scenarios-20040730/" title="Latest draft of Web Services Internationalization Usage Scenarios formally approved by the group">Web Services Internationalization Usage Scenarios</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2004-07-30 - <a title="Web Services Internationalization Usage Scenarios publication history" href="/standards/history/ws-i18n-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Debasish Banerjee
                            <li>Martin Dürst
                            <li>Michael McKenna
                            <li>Addison Phillips
                            <li>Takao Suzuki
                            <li>Tex Texin
                            <li>Mary Trumble
                            <li>Andrea Vine
                            <li>Kentaro Noji
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="soap optimized serialization use cases and requirements" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2004/WD-soap12-os-ucr-20040608/" title="Latest draft of SOAP Optimized Serialization Use Cases and Requirements formally approved by the group">SOAP Optimized Serialization Use Cases and Requirements</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2004-06-08 - <a title="SOAP Optimized Serialization Use Cases and Requirements publication history" href="/standards/history/soap12-os-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tony Graham
                            <li>Anish Karmarkar
                            <li>Mark Jones
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="soap 1.2 attachment feature" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-soap12-af-20040608/" title="Latest draft of SOAP 1.2 Attachment Feature formally approved by the group">SOAP 1.2 Attachment Feature</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2004-06-08 - <a title="SOAP 1.2 Attachment Feature publication history" href="/standards/history/soap12-af">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henrik Frystyk Nielsen
                            <li>Hervé Ruellan
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xop inclusion mechanism - frequently asked questions" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-xopinc-FAQ-20040608/" title="Latest draft of XOP Inclusion Mechanism - Frequently Asked Questions formally approved by the group">XOP Inclusion Mechanism - Frequently Asked Questions</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2004-06-08 - <a title="XOP Inclusion Mechanism - Frequently Asked Questions publication history" href="/standards/history/xopinc-FAQ">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Mahan
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="modality component to host environment dom requirements and capabilities assessment" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-modality-interface-20040510/" title="Latest draft of Modality Component to Host Environment DOM Requirements and Capabilities Assessment formally approved by the group">Modality Component to Host Environment DOM Requirements and Capabilities Assessment</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2004-05-10 - <a title="Modality Component to Host Environment DOM Requirements and Capabilities Assessment publication history" href="/standards/history/modality-interface">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Porter
                          </ul>
                                  </li>
                                                                                                                          <li data-title="document object model (dom) level 3 load and save specification" data-tag="dom" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/" title="Latest draft of Document Object Model (DOM) Level 3 Load and Save Specification formally approved by the group">Document Object Model (DOM) Level 3 Load and Save Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2004-04-07 - <a title="Document Object Model (DOM) Level 3 Load and Save Specification publication history" href="/standards/history/DOM-Level-3-LS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johnny Stenback
                            <li>Andy Heninger
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                    <li data-title="document object model (dom) level 3 core specification" data-tag="dom" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/" title="Latest draft of Document Object Model (DOM) Level 3 Core Specification formally approved by the group">Document Object Model (DOM) Level 3 Core Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2004-04-07 - <a title="Document Object Model (DOM) Level 3 Core Specification publication history" href="/standards/history/DOM-Level-3-Core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arnaud Le Hors
                            <li>Philippe Le Hégaret
                            <li>Lauren Wood
                            <li>Gavin Nicol
                            <li>Jonathan Robie
                            <li>Mike Champion
                            <li>Steven B Byrne
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml processing model requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-proc-model-req-20040405/" title="Latest draft of XML Processing Model Requirements formally approved by the group">XML Processing Model Requirements</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2004-04-05 - <a title="XML Processing Model Requirements publication history" href="/standards/history/proc-model-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dmitry Lenkov
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="ws choreography model overview" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2004/WD-ws-chor-model-20040324/" title="Latest draft of WS Choreography Model Overview formally approved by the group">WS Choreography Model Overview</a></h2>
                        <p class=deliverer>Web Services Choreography Working Group</p>
                        <p class=pubdetails>2004-03-24 - <a title="WS Choreography Model Overview publication history" href="/standards/history/ws-chor-model">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Burdett
                            <li>Nickolas Kavantzas
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <li data-title="voice extensible markup language (voicexml) version 2.0" data-tag="media" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-voicexml20-20040316/" title="Latest draft of Voice Extensible Markup Language (VoiceXML) Version 2.0 formally approved by the group">Voice  Extensible  Markup  Language  (VoiceXML)  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2004-03-16 - <a title="Voice Extensible Markup Language (VoiceXML) Version 2.0 publication history" href="/standards/history/voicexml20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott McGlashan
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Peter Danielsen
                            <li>Jim Ferrans
                            <li>Andrew Hunt
                            <li>Bruce Lucas
                            <li>Brandon Porter
                            <li>Kenneth Rehor
                            <li>Steph Tryphonas
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="speech recognition grammar specification version 1.0" data-tag="media" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-speech-grammar-20040316/" title="Latest draft of Speech Recognition Grammar Specification Version 1.0 formally approved by the group">Speech  Recognition  Grammar  Specification  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2004-03-16 - <a title="Speech Recognition Grammar Specification Version 1.0 publication history" href="/standards/history/speech-grammar">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Hunt
                            <li>Scott McGlashan
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="web services choreography requirements" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2004/WD-ws-chor-reqs-20040311/" title="Latest draft of Web Services Choreography Requirements formally approved by the group">Web Services Choreography Requirements</a></h2>
                        <p class=deliverer>Web Services Choreography Working Group</p>
                        <p class=pubdetails>2004-03-11 - <a title="Web Services Choreography Requirements publication history" href="/standards/history/ws-chor-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Austin
                            <li>Abbie Barbir
                            <li>Ed Peters
                            <li>Steve Ross-Talbot
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="authoring techniques for device independence" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-di-atdi-20040218/" title="Latest draft of Authoring Techniques for Device Independence formally approved by the group">Authoring Techniques for Device Independence</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2004-02-18 - <a title="Authoring Techniques for Device Independence publication history" href="/standards/history/di-atdi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rotan Hanrahan
                            <li>Roland Merrick
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services architecture requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-wsa-reqs-20040211/" title="Latest draft of Web Services Architecture Requirements formally approved by the group">Web Services Architecture Requirements</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Services Architecture Requirements publication history" href="/standards/history/wsa-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Austin
                            <li>Abbie Barbir
                            <li>Christopher Ferris
                            <li>Sharad Garg
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services glossary" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-ws-gloss-20040211/" title="Latest draft of Web Services Glossary formally approved by the group">Web Services Glossary</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Services Glossary publication history" href="/standards/history/ws-gloss">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hugo Haas
                            <li>Allen Brown
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services architecture" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-ws-arch-20040211/" title="Latest draft of Web Services Architecture formally approved by the group">Web Services Architecture</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Services Architecture publication history" href="/standards/history/ws-arch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Booth
                            <li>Hugo Haas
                            <li>Francis McCabe
                            <li>Eric Newcomer
                            <li>Mike Champion
                            <li>Christopher Ferris
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services architecture usage scenarios" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-ws-arch-scenarios-20040211/" title="Latest draft of Web Services Architecture Usage Scenarios formally approved by the group">Web Services Architecture Usage Scenarios</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Services Architecture Usage Scenarios publication history" href="/standards/history/ws-arch-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hao He
                            <li>Hugo Haas
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web service management: service life cycle" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-wslc-20040211/" title="Latest draft of Web Service Management: Service Life Cycle formally approved by the group">Web Service Management: Service Life Cycle</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Service Management: Service Life Cycle publication history" href="/standards/history/wslc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hao He
                            <li>Mark Potts
                            <li>Igor Sedukhin
                          </ul>
                                  </li>
                                                                                                    <li data-title="rdf test cases" data-tag="data" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-rdf-testcases-20040210/" title="Latest draft of RDF Test Cases formally approved by the group">RDF Test Cases</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="RDF Test Cases publication history" href="/standards/history/rdf-testcases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>jan grant
                            <li>Dave Beckett
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language use cases and requirements" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-webont-req-20040210/" title="Latest draft of OWL Web Ontology Language Use Cases and Requirements formally approved by the group">OWL Web Ontology Language Use Cases and Requirements</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Use Cases and Requirements publication history" href="/standards/history/webont-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeff Heflin
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language overview" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-owl-features-20040210/" title="Latest draft of OWL Web Ontology Language Overview formally approved by the group">OWL Web Ontology Language Overview</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Overview publication history" href="/standards/history/owl-features">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deborah McGuinness
                            <li>Frank van Harmelen
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language guide" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-owl-guide-20040210/" title="Latest draft of OWL Web Ontology Language Guide formally approved by the group">OWL Web Ontology Language Guide</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Guide publication history" href="/standards/history/owl-guide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christopher Welty
                            <li>Deborah McGuinness
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                    <li data-title="rdf semantics" data-tag="data" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-rdf-mt-20040210/" title="Latest draft of RDF Semantics formally approved by the group">RDF Semantics</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="RDF Semantics publication history" href="/standards/history/rdf-mt">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Hayes
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                    <li data-title="resource description framework (rdf): concepts and abstract syntax" data-tag="data" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-rdf-concepts-20040210/" title="Latest draft of Resource Description Framework (RDF): Concepts and Abstract Syntax formally approved by the group">Resource Description Framework (RDF): Concepts and Abstract Syntax</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="Resource Description Framework (RDF): Concepts and Abstract Syntax publication history" href="/standards/history/rdf-concepts">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Graham Klyne
                            <li>Jeremy Carroll
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                    <li data-title="owl web ontology language semantics and abstract syntax" data-tag="data" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-owl-semantics-20040210/" title="Latest draft of OWL Web Ontology Language Semantics and Abstract Syntax formally approved by the group">OWL Web Ontology Language Semantics and Abstract Syntax</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Semantics and Abstract Syntax publication history" href="/standards/history/owl-semantics">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Peter Patel-Schneider
                            <li>Patrick Hayes
                            <li>Ian Horrocks
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language reference" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-owl-ref-20040210/" title="Latest draft of OWL Web Ontology Language Reference formally approved by the group">OWL Web Ontology Language Reference</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Reference publication history" href="/standards/history/owl-ref">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike Dean
                            <li>Guus Schreiber
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                    <li data-title="rdf primer" data-tag="data" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-rdf-primer-20040210/" title="Latest draft of RDF Primer formally approved by the group">RDF Primer</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="RDF Primer publication history" href="/standards/history/rdf-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frank Manola
                            <li>Eric Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="owl web ontology language test cases" data-tag="data" data-status="rec" data-version="upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-owl-test-20040210/" title="Latest draft of OWL Web Ontology Language Test Cases formally approved by the group">OWL Web Ontology Language Test Cases</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Test Cases publication history" href="/standards/history/owl-test">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Carroll
                            <li>Jos De Roo
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml information set (second edition)" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-xml-infoset-20040204/" title="Latest draft of XML Information Set (Second Edition) formally approved by the group">XML Information Set (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2004-02-04 - <a title="XML Information Set (Second Edition) publication history" href="/standards/history/xml-infoset">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Cowan
                            <li>Richard Tobin
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 3 validation specification" data-tag="dom" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-DOM-Level-3-Val-20040127/" title="Latest draft of Document Object Model (DOM) Level 3 Validation Specification formally approved by the group">Document Object Model (DOM) Level 3 Validation Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2004-01-27 - <a title="Document Object Model (DOM) Level 3 Validation Specification publication history" href="/standards/history/DOM-Level-3-Val">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Chang
                            <li>Joseph Kesselman
                            <li>rezaur rahman
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language parsing owl in rdf/xml" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2004/NOTE-owl-parsing-20040121/" title="Latest draft of OWL Web Ontology Language Parsing OWL in RDF/XML formally approved by the group">OWL Web Ontology Language Parsing OWL in RDF/XML</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-01-21 - <a title="OWL Web Ontology Language Parsing OWL in RDF/XML publication history" href="/standards/history/owl-parsing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sean Bechhofer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="composite capability/preference profiles (cc/pp): structure and vocabularies 1.0" data-tag="data" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2004/REC-CCPP-struct-vocab-20040115/" title="Latest draft of Composite Capability/Preference Profiles (CC/PP): Structure and Vocabularies 1.0 formally approved by the group">Composite  Capability/Preference  Profiles  (CC/PP):  Structure  and  Vocabularies&nbsp;1.0</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2004-01-15 - <a title="Composite Capability/Preference Profiles (CC/PP): Structure and Vocabularies 1.0 publication history" href="/standards/history/CCPP-struct-vocab">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Graham Klyne
                            <li>Franklin Reynolds
                            <li>Christopher Woodrow
                            <li>Hidetaka Ohto
                            <li>Johan Hjelm
                            <li>Mark Butler
                            <li>Luu Tran
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="extensible stylesheet language (xsl) version 1.1 requirements" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2003/WD-xsl11-req-20031217/" title="Latest draft of Extensible Stylesheet Language (XSL) Version 1.1 Requirements formally approved by the group">Extensible Stylesheet Language (XSL) Version 1.1 Requirements</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2003-12-17 - <a title="Extensible Stylesheet Language (XSL) Version 1.1 Requirements publication history" href="/standards/history/xsl11-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="bound variables in mathml" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-mathml-bvar-20031110/" title="Latest draft of Bound Variables in MathML formally approved by the group">Bound Variables in MathML</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2003-11-10 - <a title="Bound Variables in MathML publication history" href="/standards/history/mathml-bvar">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stan Devitt
                            <li>Michael Kohlhase
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="structured types in mathml 2.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-mathml-types-20031110/" title="Latest draft of Structured Types in MathML 2.0 formally approved by the group">Structured  Types  in  MathML&nbsp;2.0</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2003-11-10 - <a title="Structured Types in MathML 2.0 publication history" href="/standards/history/mathml-types">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stan Devitt
                            <li>Michael Kohlhase
                            <li>Max Froumentin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="units in mathml" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-mathml-units-20031110/" title="Latest draft of Units in MathML formally approved by the group">Units in MathML</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2003-11-10 - <a title="Units in MathML publication history" href="/standards/history/mathml-units">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Douglas Harder
                            <li>Stan Devitt
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="portable network graphics (png) specification (second edition)" data-tag="graphics" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2003/REC-PNG-20031110/" title="Latest draft of Portable Network Graphics (PNG) Specification (Second Edition) formally approved by the group">Portable Network Graphics (PNG) Specification (Second Edition)</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2003-11-10 - <a title="Portable Network Graphics (PNG) Specification (Second Edition) publication history" href="/standards/history/PNG">History</a>
                        - <a href="https://w3c.github.io/PNG-spec/" title="Latest editor's draft of Portable Network Graphics (PNG) Specification (Second Edition)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Duce
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                    <li data-title="mathematical markup language (mathml) version 2.0 (second edition)" data-tag="" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2003/REC-MathML2-20031021/" title="Latest draft of Mathematical Markup Language (MathML) Version 2.0 (Second Edition) formally approved by the group">Mathematical Markup Language (MathML) Version 2.0 (Second Edition)</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2003-10-21 - <a title="Mathematical Markup Language (MathML) Version 2.0 (Second Edition) publication history" href="/standards/history/MathML2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Carlisle
                            <li>Patrick D F Ion
                            <li>Robert R Miner
                            <li>Nico Poppelier
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml events" data-tag="dom xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2003/REC-xml-events-20031014/" title="Latest draft of XML Events formally approved by the group">XML Events</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2003-10-14 - <a title="XML Events publication history" href="/standards/history/xml-events">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Steven Pemberton
                            <li>T.V. Raman
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xforms 1.0 basic profile" data-tag="xml" data-status="cr" data-version="latest upcoming">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2003/CR-xforms-basic-20031014/" title="Latest draft of XForms 1.0 Basic Profile formally approved by the group">XForms 1.0 Basic Profile</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2003-10-14 - <a title="XForms 1.0 Basic Profile publication history" href="/standards/history/xforms-basic">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Micah Dubinko
                            <li>T.V. Raman
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="lbase: semantics for languages of the semantic web" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-lbase-20031010/" title="Latest draft of LBase: Semantics for Languages of the Semantic Web formally approved by the group">LBase: Semantics for Languages of the Semantic Web</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2003-10-10 - <a title="LBase: Semantics for Languages of the Semantic Web publication history" href="/standards/history/lbase">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ramanathan Guha
                            <li>Patrick Hayes
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="soap version 1.2 message normalization" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-soap12-n11n-20031008/" title="Latest draft of SOAP Version 1.2 Message Normalization formally approved by the group">SOAP Version 1.2 Message Normalization</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2003-10-08 - <a title="SOAP Version 1.2 Message Normalization publication history" href="/standards/history/soap12-n11n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="proposal for xml fragment identifier syntax 0.9" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2003/NOTE-xml-fragid-20030912/" title="Latest draft of Proposal for XML Fragment Identifier Syntax 0.9 formally approved by the group">Proposal  for  XML  Fragment  Identifier  Syntax&nbsp;0.9</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2003-09-12 - <a title="Proposal for XML Fragment Identifier Syntax 0.9 publication history" href="/standards/history/xml-fragid">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device independence principles" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-di-princ-20030901/" title="Latest draft of Device Independence Principles formally approved by the group">Device Independence Principles</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2003-09-01 - <a title="Device Independence Principles publication history" href="/standards/history/di-princ">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roger Gimson
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="authoring challenges for device independence" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-acdi-20030901/" title="Latest draft of Authoring Challenges for Device Independence formally approved by the group">Authoring Challenges for Device Independence</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2003-09-01 - <a title="Authoring Challenges for Device Independence publication history" href="/standards/history/acdi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml:id requirements" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2003/WD-xml-id-req-20030806/" title="Latest draft of xml:id Requirements formally approved by the group">xml:id Requirements</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2003-08-06 - <a title="xml:id Requirements publication history" href="/standards/history/xml-id-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="soap version 1.2 usage scenarios" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-xmlp-scenarios-20030730/" title="Latest draft of SOAP Version 1.2 Usage Scenarios formally approved by the group">SOAP Version 1.2 Usage Scenarios</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2003-07-30 - <a title="SOAP Version 1.2 Usage Scenarios publication history" href="/standards/history/xmlp-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Ibbotson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml protocol (xmlp) requirements" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-xmlp-reqs-20030728/" title="Latest draft of XML Protocol (XMLP) Requirements formally approved by the group">XML Protocol (XMLP) Requirements</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2003-07-28 - <a title="XML Protocol (XMLP) Requirements publication history" href="/standards/history/xmlp-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Ceponkus
                            <li>Paul Cotton
                            <li>David Ezell
                            <li>David Fallside
                            <li>Martin Gudgin
                            <li>Oisin Hurley
                            <li>John Ibbotson
                            <li>Alex Miłowski
                            <li>Kevin Mitchell
                            <li>Jean-Jacques Moreau
                            <li>Eric Newcomer
                            <li>Henrik Frystyk Nielsen
                            <li>Bob Lojek
                            <li>Mark Nottingham
                            <li>Waqar Sadiq
                            <li>Stuart Williams
                            <li>Amr Yassin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="owl web ontology language xml presentation syntax" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-owl-xmlsyntax-20030611/" title="Latest draft of OWL Web Ontology Language XML Presentation Syntax formally approved by the group">OWL Web Ontology Language XML Presentation Syntax</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2003-06-11 - <a title="OWL Web Ontology Language XML Presentation Syntax publication history" href="/standards/history/owl-xmlsyntax">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Masahiro Hori
                            <li>Jérôme Euzenat
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="core presentation characteristics: requirements and use cases" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2003/WD-cpc-req-20030510/" title="Latest draft of Core Presentation Characteristics: Requirements and Use Cases formally approved by the group">Core Presentation Characteristics: Requirements and Use Cases</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2003-05-10 - <a title="Core Presentation Characteristics: Requirements and Use Cases publication history" href="/standards/history/cpc-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markus Lauff
                            <li>Amy Yu
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="w3c multimodal interaction framework" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-mmi-framework-20030506/" title="Latest draft of W3C Multimodal Interaction Framework formally approved by the group">W3C Multimodal Interaction Framework</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2003-05-06 - <a title="W3C Multimodal Interaction Framework publication history" href="/standards/history/mmi-framework">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>T.V. Raman
                            <li>Dave Raggett
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xml key management (xkms 2.0) requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-xkms2-req-20030505" title="Latest draft of XML Key Management (XKMS 2.0) Requirements formally approved by the group">XML Key Management (XKMS 2.0) Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2003-05-05 - <a title="XML Key Management (XKMS 2.0) Requirements publication history" href="/standards/history/xkms2-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Mike Just
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="framework document for i18n guidelines 1.0" data-tag="i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2003/WD-i18n-guide-framework-20030417/" title="Latest draft of Framework Document for i18n Guidelines 1.0 formally approved by the group">Framework  Document  for  i18n  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2003-04-17 - <a title="Framework Document for i18n Guidelines 1.0 publication history" href="/standards/history/i18n-guide-framework">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xpointer framework" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2003/REC-xptr-framework-20030325/" title="Latest draft of XPointer Framework formally approved by the group">XPointer Framework</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2003-03-25 - <a title="XPointer Framework publication history" href="/standards/history/xptr-framework">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                            <li>Eve Maler
                            <li>Jonathan Marsh
                            <li>Norman Walsh
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xpointer element() scheme" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2003/REC-xptr-element-20030325/" title="Latest draft of XPointer element() Scheme formally approved by the group">XPointer element() Scheme</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2003-03-25 - <a title="XPointer element() Scheme publication history" href="/standards/history/xptr-element">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                            <li>Eve Maler
                            <li>Jonathan Marsh
                            <li>Norman Walsh
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xpointer xmlns() scheme" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2003/REC-xptr-xmlns-20030325/" title="Latest draft of XPointer xmlns() Scheme formally approved by the group">XPointer xmlns() Scheme</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2003-03-25 - <a title="XPointer xmlns() Scheme publication history" href="/standards/history/xptr-xmlns">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                            <li>Ron Daniel
                            <li>Eve Maler
                            <li>Jonathan Marsh
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml protocol abstract model" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2003/WD-xmlp-am-20030220/" title="Latest draft of XML Protocol Abstract Model formally approved by the group">XML Protocol Abstract Model</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2003-02-20 - <a title="XML Protocol Abstract Model publication history" href="/standards/history/xmlp-am">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stuart Williams
                            <li>Mark Jones
                          </ul>
                                  </li>
                                                                                                                          <li data-title="svg printing requirements" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2003/WD-SVGPrintReqs-20030218/" title="Latest draft of SVG Printing Requirements formally approved by the group">SVG Printing Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2003-02-18 - <a title="SVG Printing Requirements publication history" href="/standards/history/SVGPrintReqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jun Fujisawa
                            <li>Lee Klosterman
                            <li>Craig Brown
                            <li>Alex Danilo
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="requirements for wcag 2.0 checklists and techniques" data-tag="accessibility" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2003/WD-wcag2-tech-req-20030207/" title="Latest draft of Requirements for WCAG 2.0 Checklists and Techniques formally approved by the group">Requirements for WCAG 2.0 Checklists and Techniques</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2003-02-07 - <a title="Requirements for WCAG 2.0 Checklists and Techniques publication history" href="/standards/history/wcag2-tech-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="requirements for the ink markup language" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-inkreqs-20030122/" title="Latest draft of Requirements for the Ink Markup Language formally approved by the group">Requirements for the Ink Markup Language</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2003-01-22 - <a title="Requirements for the Ink Markup Language publication history" href="/standards/history/inkreqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yi-Min Chee
                            <li>Sai Prasad
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="requirements for xml schema 1.1" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2003/WD-xmlschema-11-req-20030121/" title="Latest draft of Requirements for XML Schema 1.1 formally approved by the group">Requirements  for  XML  Schema&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2003-01-21 - <a title="Requirements for XML Schema 1.1 publication history" href="/standards/history/xmlschema-11-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Charles Campbell
                            <li>Ashok Malhotra
                            <li>Priscilla Walmsley
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                    <li data-title="mobile svg profiles: svg tiny and svg basic" data-tag="graphics" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2003/REC-SVGMobile-20030114/" title="Latest draft of Mobile SVG Profiles: SVG Tiny and SVG Basic formally approved by the group">Mobile SVG Profiles: SVG Tiny and SVG Basic</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2003-01-14 - <a title="Mobile SVG Profiles: SVG Tiny and SVG Basic publication history" href="/standards/history/SVGMobile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tolga Capin
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="requirements for emma" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-EMMAreqs-20030113/" title="Latest draft of Requirements for EMMA formally approved by the group">Requirements for EMMA</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2003-01-13 - <a title="Requirements for EMMA publication history" href="/standards/history/EMMAreqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stéphane Maes
                            <li>Stephen Potter
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="multimodal interaction requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2003/NOTE-mmi-reqs-20030108/" title="Latest draft of Multimodal Interaction Requirements formally approved by the group">Multimodal Interaction Requirements</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2003-01-08 - <a title="Multimodal Interaction Requirements publication history" href="/standards/history/mmi-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stéphane Maes
                            <li>Vijay Saraswat
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xpointer xpointer() scheme" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/WD-xptr-xpointer-20021219/" title="Latest draft of XPointer xpointer() Scheme formally approved by the group">XPointer xpointer() Scheme</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2002-12-19 - <a title="XPointer xpointer() Scheme publication history" href="/standards/history/xptr-xpointer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                            <li>Eve Maler
                            <li>Ron Daniel
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="user agent accessibility guidelines 1.0" data-tag="accessibility" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2002/REC-UAAG10-20021217/" title="Latest draft of User Agent Accessibility Guidelines 1.0 formally approved by the group">User  Agent  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2002-12-17 - <a title="User Agent Accessibility Guidelines 1.0 publication history" href="/standards/history/UAAG10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Jacobs
                            <li>Jon Gunderson
                            <li>Eric Hansen
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="techniques for user agent accessibility guidelines 1.0" data-tag="accessibility html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2002/NOTE-UAAG10-TECHS-20021217/" title="Latest draft of Techniques for User Agent Accessibility Guidelines 1.0 formally approved by the group">Techniques  for  User  Agent  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2002-12-17 - <a title="Techniques for User Agent Accessibility Guidelines 1.0 publication history" href="/standards/history/UAAG10-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Jacobs
                            <li>Jon Gunderson
                            <li>Eric Hansen
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="decryption transform for xml signature" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2002/REC-xmlenc-decrypt-20021210" title="Latest draft of Decryption Transform for XML Signature formally approved by the group">Decryption Transform for XML Signature</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2002-12-10 - <a title="Decryption Transform for XML Signature publication history" href="/standards/history/xmlenc-decrypt">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Merlin Hughes
                            <li>Takeshi Imamura
                            <li>Hiroshi Maruyama
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="multimodal interaction use cases" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2002/NOTE-mmi-use-cases-20021204/" title="Latest draft of Multimodal Interaction Use Cases formally approved by the group">Multimodal Interaction Use Cases</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2002-12-04 - <a title="Multimodal Interaction Use Cases publication history" href="/standards/history/mmi-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                          </ul>
                                  </li>
                                                                                                                          <li data-title="qa framework: operational examples &amp; techniques" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/NOTE-qaframe-ops-extech-20021202/" title="Latest draft of QA Framework: Operational Examples &amp; Techniques formally approved by the group">QA Framework: Operational Examples & Techniques</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2002-12-02 - <a title="QA Framework: Operational Examples &amp; Techniques publication history" href="/standards/history/qaframe-ops-extech">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lofton Henderson
                            <li>Lynne Rosenthal
                            <li>Dimitris Dimitriadis
                            <li>Kirill Gavrylyuk
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xml-signature xpath filter 2.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2002/REC-xmldsig-filter2-20021108/" title="Latest draft of XML-Signature XPath Filter 2.0 formally approved by the group">XML-Signature  XPath  Filter&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2002-11-08 - <a title="XML-Signature XPath Filter 2.0 publication history" href="/standards/history/xmldsig-filter2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Merlin Hughes
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="techniques for authoring tool accessibility guidelines 1.0" data-tag="accessibility" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2002/NOTE-ATAG10-TECHS-20021029/" title="Latest draft of Techniques for Authoring Tool Accessibility Guidelines 1.0 formally approved by the group">Techniques  for  Authoring  Tool  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Authoring Tool Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2002-10-29 - <a title="Techniques for Authoring Tool Accessibility Guidelines 1.0 publication history" href="/standards/history/ATAG10-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jutta Treviranus
                            <li>Charles McCathieNevile
                            <li>Jan Richards
                            <li>Gregory Rosmaita
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="web services description requirements" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/WD-ws-desc-reqs-20021028/" title="Latest draft of Web Services Description Requirements formally approved by the group">Web Services Description Requirements</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2002-10-28 - <a title="Web Services Description Requirements publication history" href="/standards/history/ws-desc-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeffrey Schlimmer
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml accessibility guidelines" data-tag="accessibility" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2002/WD-xag-20021003" title="Latest draft of XML Accessibility Guidelines formally approved by the group">XML Accessibility Guidelines</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2002-10-03 - <a title="XML Accessibility Guidelines publication history" href="/standards/history/xag">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Dardailler
                            <li>Sean Palmer
                            <li>Charles McCathieNevile
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xhtml 1.0 in xml schema" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2002/NOTE-xhtml1-schema-20020902/" title="Latest draft of XHTML 1.0 in XML Schema formally approved by the group">XHTML 1.0 in XML Schema</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2002-09-02 - <a title="XHTML 1.0 in XML Schema publication history" href="/standards/history/xhtml1-schema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="an xhtml + mathml + svg profile" data-tag="graphics html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/WD-XHTMLplusMathMLplusSVG-20020809/" title="Latest draft of An XHTML + MathML + SVG Profile formally approved by the group">An XHTML + MathML + SVG Profile</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2002-08-09 - <a title="An XHTML + MathML + SVG Profile publication history" href="/standards/history/XHTMLplusMathMLplusSVG">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="voice browser interoperation: requirements" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/WD-vbi-reqs-20020808/" title="Latest draft of Voice Browser Interoperation: Requirements formally approved by the group">Voice Browser Interoperation: Requirements</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2002-08-08 - <a title="Voice Browser Interoperation: Requirements publication history" href="/standards/history/vbi-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kenneth Rehor
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="exclusive xml canonicalization version 1.0" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2002/REC-xml-exc-c14n-20020718/" title="Latest draft of Exclusive XML Canonicalization Version 1.0 formally approved by the group">Exclusive  XML  Canonicalization  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2002-07-18 - <a title="Exclusive XML Canonicalization Version 1.0 publication history" href="/standards/history/xml-exc-c14n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Donald Eastlake
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="soap version 1.2 email binding" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2002/NOTE-soap12-email-20020703" title="Latest draft of SOAP Version 1.2 Email Binding formally approved by the group">SOAP Version 1.2 Email Binding</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2002-07-03 - <a title="SOAP Version 1.2 Email Binding publication history" href="/standards/history/soap12-email">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Highland Mary Mountain
                            <li>Jacek Kopecky
                            <li>Stuart Williams
                            <li>Glen Daniels
                            <li>Noah Mendelsohn
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web service description usage scenarios" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/WD-ws-desc-usecases-20020604/" title="Latest draft of Web Service Description Usage Scenarios formally approved by the group">Web Service Description Usage Scenarios</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2002-06-04 - <a title="Web Service Description Usage Scenarios publication history" href="/standards/history/ws-desc-usecases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Waqar Sadiq
                            <li>Sandeep Kumar
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="svg 1.1/1.2/2.0 requirements" data-tag="graphics" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2002/WD-SVG2Reqs-20020422/" title="Latest draft of SVG 1.1/1.2/2.0 Requirements formally approved by the group">SVG 1.1/1.2/2.0 Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2002-04-22 - <a title="SVG 1.1/1.2/2.0 Requirements publication history" href="/standards/history/SVG2Reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dean Jackson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="a p3p preference exchange language 1.0 (appel1.0)" data-tag="privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/WD-P3P-preferences-20020415/" title="Latest draft of A P3P Preference Exchange Language 1.0 (APPEL1.0) formally approved by the group">A P3P Preference Exchange Language 1.0 (APPEL1.0)</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2002-04-15 - <a title="A P3P Preference Exchange Language 1.0 (APPEL1.0) publication history" href="/standards/history/P3P-preferences">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marc Langheinrich
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="namespaces in xml 1.1 requirements" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/WD-xml-names11-req-20020403/" title="Latest draft of Namespaces in XML 1.1 Requirements formally approved by the group">Namespaces in XML 1.1 Requirements</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2002-04-03 - <a title="Namespaces in XML 1.1 Requirements publication history" href="/standards/history/xml-names11-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml key management specification bulk operation (x-bulk)" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/WD-xkms2-xbulk-20020318/" title="Latest draft of XML Key Management Specification Bulk Operation (X-BULK) formally approved by the group">XML Key Management Specification Bulk Operation (X-BULK)</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2002-03-18 - <a title="XML Key Management Specification Bulk Operation (X-BULK) publication history" href="/standards/history/xkms2-xbulk">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Merlin Hughes
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml encryption requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2002/NOTE-xml-encryption-req-20020304" title="Latest draft of XML Encryption Requirements formally approved by the group">XML Encryption Requirements</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2002-03-04 - <a title="XML Encryption Requirements publication history" href="/standards/history/xml-encryption-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="the platform for privacy preferences 1.0 deployment guide" data-tag="privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2002/NOTE-p3pdeployment-20020211" title="Latest draft of The Platform for Privacy Preferences 1.0 Deployment Guide formally approved by the group">The Platform for Privacy Preferences 1.0 Deployment Guide</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2002-02-11 - <a title="The Platform for Privacy Preferences 1.0 Deployment Guide publication history" href="/standards/history/p3pdeployment">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin PreslerMarshall
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xhtml+smil profile" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2002/NOTE-XHTMLplusSMIL-20020131/" title="Latest draft of XHTML+SMIL Profile formally approved by the group">XHTML+SMIL Profile</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2002-01-31 - <a title="XHTML+SMIL Profile publication history" href="/standards/history/XHTMLplusSMIL">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Patterson
                            <li>Patrick Schmitz
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="cc/pp implementors guide: privacy and protocols" data-tag="data" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2001/WD-CCPP-trust-20011220/" title="Latest draft of CC/PP Implementors Guide: Privacy and Protocols formally approved by the group">CC/PP Implementors Guide: Privacy and Protocols</a></h2>
                        <p class=deliverer>CC/PP Working Group</p>
                        <p class=pubdetails>2001-12-20 - <a title="CC/PP Implementors Guide: Privacy and Protocols publication history" href="/standards/history/CCPP-trust">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hidetaka Ohto
                            <li>Lalitha Suryanarayana
                            <li>Johan Hjelm
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="cc/pp implementors guide: harmonization with existing vocabularies and content transformation heuristics" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2001/NOTE-CCPP-COORDINATION-20011220/" title="Latest draft of CC/PP Implementors Guide: Harmonization with Existing Vocabularies and Content Transformation Heuristics formally approved by the group">CC/PP Implementors Guide: Harmonization with Existing Vocabularies and Content Transformation Heuristics</a></h2>
                        <p class=deliverer>CC/PP Working Group</p>
                        <p class=pubdetails>2001-12-20 - <a title="CC/PP Implementors Guide: Harmonization with Existing Vocabularies and Content Transformation Heuristics publication history" href="/standards/history/CCPP-COORDINATION">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johan Hjelm
                            <li>Lalitha Suryanarayana
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="component extension (cx) api requirements version 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2001/NOTE-CX-20011211" title="Latest draft of Component Extension (CX) API requirements Version 1.0 formally approved by the group">Component  Extension  (CX)  API  requirements  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Hypertext Coordination Group (Member)</p>
                        <p class=pubdetails>2001-12-11 - <a title="Component Extension (CX) API requirements Version 1.0 publication history" href="/standards/history/CX">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Angel Diaz
                            <li>Jon Ferraiolo
                            <li>Philippe Le Hégaret
                            <li>Chris Lilley
                            <li>Charles McCathieNevile
                            <li>Tapas Roy
                            <li>Ray Whitmer
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="extensible stylesheet language (xsl) version 1.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2001/REC-xsl-20011015/" title="Latest draft of Extensible Stylesheet Language (XSL) Version 1.0 formally approved by the group">Extensible  Stylesheet  Language  (XSL)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2001-10-15 - <a title="Extensible Stylesheet Language (XSL) Version 1.0 publication history" href="/standards/history/xsl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sharon Adler
                            <li>Anders Berglund
                            <li>Jeffrey Caruso
                            <li>Stephen Deach
                            <li>Tony Graham
                            <li>Paul Grosso
                            <li>Eduardo Gutentag
                            <li>Alex Miłowski
                            <li>Scott Parnell
                            <li>Jeremy Richman
                            <li>Steve Zilles
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml schema: formal description" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2001/WD-xmlschema-formal-20010925/" title="Latest draft of XML Schema: Formal Description formally approved by the group">XML Schema: Formal Description</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2001-09-25 - <a title="XML Schema: Formal Description publication history" href="/standards/history/xmlschema-formal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Allen Brown
                            <li>Matthew Fuchs
                            <li>Jonathan Robie
                            <li>Philip Wadler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="uris, urls, and urns: clarifications and recommendations 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2001/NOTE-uri-clarification-20010921/" title="Latest draft of URIs, URLs, and URNs: Clarifications and Recommendations 1.0 formally approved by the group">URIs,  URLs,  and  URNs:  Clarifications  and  Recommendations&nbsp;1.0</a></h2>
                        <p class=deliverer>URI Coordination Group</p>
                        <p class=pubdetails>2001-09-21 - <a title="URIs, URLs, and URNs: Clarifications and Recommendations 1.0 publication history" href="/standards/history/uri-clarification">History</a>
                        </p>
                                  </li>
                                                                                                                          <li data-title="xml blueberry requirements" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2001/WD-xml-blueberry-req-20010921" title="Latest draft of XML Blueberry Requirements formally approved by the group">XML Blueberry Requirements</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2001-09-21 - <a title="XML Blueberry Requirements publication history" href="/standards/history/xml-blueberry-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Cowan
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="smil animation" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2001/REC-smil-animation-20010904/" title="Latest draft of SMIL Animation formally approved by the group">SMIL Animation</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2001-09-04 - <a title="SMIL Animation publication history" href="/standards/history/smil-animation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Schmitz
                            <li>Aaron Cohen
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xsl transformations (xslt) version 1.1" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2001/WD-xslt11-20010824/" title="Latest draft of XSL Transformations (XSLT) Version 1.1 formally approved by the group">XSL  Transformations  (XSLT)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2001-08-24 - <a title="XSL Transformations (XSLT) Version 1.1 publication history" href="/standards/history/xslt11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg mobile requirements" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2001/WD-SVGMobileReqs-20010803" title="Latest draft of SVG Mobile Requirements formally approved by the group">SVG Mobile Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2001-08-03 - <a title="SVG Mobile Requirements publication history" href="/standards/history/SVGMobileReqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rick Graham
                            <li>Tolga Capin
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xml linking language (xlink) version 1.0" data-tag="xml" data-status="rec" data-version="upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2001/REC-xlink-20010627/" title="Latest draft of XML Linking Language (XLink) Version 1.0 formally approved by the group">XML  Linking  Language  (XLink)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2001-06-27 - <a title="XML Linking Language (XLink) Version 1.0 publication history" href="/standards/history/xlink">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                            <li>Eve Maler
                            <li>David Orchard
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml linking and style" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2001/NOTE-xml-link-style-20010605/" title="Latest draft of XML Linking and Style formally approved by the group">XML Linking and Style</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2001-06-05 - <a title="XML Linking and Style publication history" href="/standards/history/xml-link-style">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ruby annotation" data-tag="html i18n" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2001/REC-ruby-20010531/" title="Latest draft of Ruby Annotation formally approved by the group">Ruby Annotation</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2001-05-31 - <a title="Ruby Annotation publication history" href="/standards/history/ruby">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcin Sawicki
                            <li>Michel Suignard
                            <li>Masayasu Ishikawa
                            <li>Martin Dürst
                            <li>Tex Texin
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="call control requirements in a voice browser framework" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2001/WD-call-control-reqs-20010413/" title="Latest draft of Call Control Requirements in a Voice Browser Framework formally approved by the group">Call Control Requirements in a Voice Browser Framework</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2001-04-13 - <a title="Call Control Requirements in a Voice Browser Framework publication history" href="/standards/history/call-control-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Porter
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="an rdf schema for the xml information set" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2001/NOTE-xml-infoset-rdfs-20010406" title="Latest draft of An RDF Schema for the XML Information Set formally approved by the group">An RDF Schema for the XML Information Set</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2001-04-06 - <a title="An RDF Schema for the XML Information Set publication history" href="/standards/history/xml-infoset-rdfs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Tobin
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xforms requirements" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2001/WD-xhtml-forms-req-20010404" title="Latest draft of XForms Requirements formally approved by the group">XForms Requirements</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2001-04-04 - <a title="XForms Requirements publication history" href="/standards/history/xhtml-forms-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Micah Dubinko
                            <li>Sebastian Schnitzenbaumer
                            <li>Dave Raggett
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                      <li data-title="canonical xml version 1.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2001/REC-xml-c14n-20010315" title="Latest draft of Canonical XML Version 1.0 formally approved by the group">Canonical  XML  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2001-03-15 - <a title="Canonical XML Version 1.0 publication history" href="/standards/history/xml-c14n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xslt requirements version 2.0" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2001/WD-xslt20req-20010214" title="Latest draft of XSLT Requirements Version 2.0 formally approved by the group">XSLT  Requirements  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2001-02-14 - <a title="XSLT Requirements Version 2.0 publication history" href="/standards/history/xslt20req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Muench
                            <li>Mark Scardina
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml fragment interchange" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2001/CR-xml-fragment-20010212" title="Latest draft of XML Fragment Interchange formally approved by the group">XML Fragment Interchange</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2001-02-12 - <a title="XML Fragment Interchange publication history" href="/standards/history/xml-fragment">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                            <li>Daniel Veillard
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="a p3p assurance signature profile" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2001/NOTE-xmldsig-p3p-profile-20010202/" title="Latest draft of A P3P Assurance Signature Profile formally approved by the group">A P3P Assurance Signature Profile</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2001-02-02 - <a title="A P3P Assurance Signature Profile publication history" href="/standards/history/xmldsig-p3p-profile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Reagle
                          </ul>
                                  </li>
                                                                                                                          <li data-title="stochastic language models (n-gram) specification" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2001/WD-ngram-spec-20010103/" title="Latest draft of Stochastic Language Models (N-Gram) Specification formally approved by the group">Stochastic Language Models (N-Gram) Specification</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2001-01-03 - <a title="Stochastic Language Models (N-Gram) Specification publication history" href="/standards/history/ngram-spec">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andreas Kellner
                            <li>Dave Raggett
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="voice browsers, introduction" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-voice-intro-20001204/" title="Latest draft of Voice Browsers, Introduction formally approved by the group">Voice Browsers, Introduction</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2000-12-04 - <a title="Voice Browsers, Introduction publication history" href="/standards/history/voice-intro">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Larson
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="natural language semantics markup language for the speech interface framework" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-nl-spec-20001120/" title="Latest draft of Natural Language Semantics Markup Language for the Speech Interface Framework formally approved by the group">Natural Language Semantics Markup Language for the Speech Interface Framework</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2000-11-20 - <a title="Natural Language Semantics Markup Language for the Speech Interface Framework publication history" href="/standards/history/nl-spec">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deborah Dahl
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="html working group roadmap" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/NOTE-xhtml-roadmap-20001108/" title="Latest draft of HTML Working Group Roadmap formally approved by the group">HTML Working Group Roadmap</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2000-11-08 - <a title="HTML Working Group Roadmap publication history" href="/standards/history/xhtml-roadmap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Pemberton
                            <li>Dave Raggett
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="core techniques for web content accessibility guidelines 1.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2000/NOTE-WCAG10-CORE-TECHS-20001106/" title="Latest draft of Core Techniques for Web Content Accessibility Guidelines 1.0 formally approved by the group">Core  Techniques  for  Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-11-06 - <a title="Core Techniques for Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WCAG10-CORE-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="css techniques for web content accessibility guidelines 1.0" data-tag="accessibility css" data-status="note" data-version="">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2000/NOTE-WCAG10-CSS-TECHS-20001106/" title="Latest draft of CSS Techniques for Web Content Accessibility Guidelines 1.0 formally approved by the group">CSS  Techniques  for  Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-11-06 - <a title="CSS Techniques for Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WCAG10-CSS-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="html techniques for web content accessibility guidelines 1.0" data-tag="accessibility html" data-status="note" data-version="">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2000/NOTE-WCAG10-HTML-TECHS-20001106/" title="Latest draft of HTML Techniques for Web Content Accessibility Guidelines 1.0 formally approved by the group">HTML  Techniques  for  Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-11-06 - <a title="HTML Techniques for Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WCAG10-HTML-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="techniques for web content accessibility guidelines 1.0" data-tag="accessibility" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2000/NOTE-WCAG10-TECHS-20001106/" title="Latest draft of Techniques for Web Content Accessibility Guidelines 1.0 formally approved by the group">Techniques  for  Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-11-06 - <a title="Techniques for Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WCAG10-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="harvesting rdf statements from xlinks" data-tag="data xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2000/NOTE-xlink2rdf-20000929/" title="Latest draft of Harvesting RDF Statements from XLinks formally approved by the group">Harvesting RDF Statements from XLinks</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2000-09-29 - <a title="Harvesting RDF Statements from XLinks publication history" href="/standards/history/xlink2rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ron Daniel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xsl transformations requirements version 1.1" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-xslt11req-20000825" title="Latest draft of XSL Transformations Requirements Version 1.1 formally approved by the group">XSL  Transformations  Requirements  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2000-08-25 - <a title="XSL Transformations Requirements Version 1.1 publication history" href="/standards/history/xslt11req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Muench
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="composite capabilities/preference profiles: terminology and abbreviations" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-CCPP-ta-20000721/" title="Latest draft of Composite Capabilities/Preference Profiles: Terminology and Abbreviations formally approved by the group">Composite Capabilities/Preference Profiles: Terminology and Abbreviations</a></h2>
                        <p class=deliverer>CC/PP Working Group</p>
                        <p class=pubdetails>2000-07-21 - <a title="Composite Capabilities/Preference Profiles: Terminology and Abbreviations publication history" href="/standards/history/CCPP-ta">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mikael Nilsson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="composite capabilities/preference profiles: requirements and architecture" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-CCPP-ra-20000721/" title="Latest draft of Composite Capabilities/Preference Profiles: Requirements and Architecture formally approved by the group">Composite Capabilities/Preference Profiles: Requirements and Architecture</a></h2>
                        <p class=deliverer>CC/PP Working Group</p>
                        <p class=pubdetails>2000-07-21 - <a title="Composite Capabilities/Preference Profiles: Requirements and Architecture publication history" href="/standards/history/CCPP-ra">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mikael Nilsson
                            <li>Johan Hjelm
                            <li>Hidetaka Ohto
                          </ul>
                                  </li>
                                                                                                                          <li data-title="multimodal requirements for voice markup languages" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-multimodal-reqs-20000710" title="Latest draft of Multimodal Requirements for Voice Markup Languages formally approved by the group">Multimodal Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2000-07-10 - <a title="Multimodal Requirements for Voice Markup Languages publication history" href="/standards/history/multimodal-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marianne Hickey
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="techniques for accessibility evaluation and repair tools" data-tag="accessibility" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-AERT-20000426" title="Latest draft of Techniques For Accessibility Evaluation And Repair Tools formally approved by the group">Techniques For Accessibility Evaluation And Repair Tools</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2000-04-26 - <a title="Techniques For Accessibility Evaluation And Repair Tools publication history" href="/standards/history/AERT">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Ridpath
                            <li>Wendy Chisholm
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="reusable dialog requirements for voice markup language" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-reusable-dialog-reqs-20000426" title="Latest draft of Reusable Dialog Requirements for Voice Markup Language formally approved by the group">Reusable Dialog Requirements for Voice Markup Language</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2000-04-26 - <a title="Reusable Dialog Requirements for Voice Markup Language publication history" href="/standards/history/reusable-dialog-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="synchronized multimedia integration language document object model" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-smil-boston-dom-20000225/" title="Latest draft of Synchronized Multimedia Integration Language Document Object Model formally approved by the group">Synchronized Multimedia Integration Language Document Object Model</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2000-02-25 - <a title="Synchronized Multimedia Integration Language Document Object Model publication history" href="/standards/history/smil-boston-dom">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Philippe Le Hégaret
                            <li>Patrick Schmitz
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                              <li data-title="authoring tool accessibility guidelines 1.0" data-tag="accessibility" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2000/REC-ATAG10-20000203/" title="Latest draft of Authoring Tool Accessibility Guidelines 1.0 formally approved by the group">Authoring  Tool  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Authoring Tool Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-02-03 - <a title="Authoring Tool Accessibility Guidelines 1.0 publication history" href="/standards/history/ATAG10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jutta Treviranus
                            <li>Charles McCathieNevile
                            <li>Ian Jacobs
                            <li>Jan Richards
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c and electronic commerce" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/NOTE-EC-related-activities-20000107" title="Latest draft of W3C and Electronic Commerce formally approved by the group">W3C and Electronic Commerce</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2000-01-07 - <a title="W3C and Electronic Commerce publication history" href="/standards/history/EC-related-activities">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thierry Michel
                          </ul>
                                  </li>
                                                                                                                          <li data-title="building xhtml™ modules" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2000/WD-xhtml-building-20000105/" title="Latest draft of Building XHTML™ Modules formally approved by the group">Building XHTML™ Modules</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2000-01-05 - <a title="Building XHTML™ Modules publication history" href="/standards/history/xhtml-building">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Murray Altheim
                            <li>Shane McCarron
                          </ul>
                                  </li>
                                                                                                                          <li data-title="model architecture for voice browser systems" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-voice-architecture-19991223/" title="Latest draft of Model Architecture for Voice Browser Systems formally approved by the group">Model Architecture for Voice Browser Systems</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Model Architecture for Voice Browser Systems publication history" href="/standards/history/voice-architecture">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="dialog requirements for voice markup languages" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-voice-dialog-reqs-19991223/" title="Latest draft of Dialog Requirements for Voice Markup Languages formally approved by the group">Dialog Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Dialog Requirements for Voice Markup Languages publication history" href="/standards/history/voice-dialog-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott McGlashan
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="grammar representation requirements for voice markup languages" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-voice-grammar-reqs-19991223/" title="Latest draft of Grammar Representation Requirements for Voice Markup Languages formally approved by the group">Grammar Representation Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Grammar Representation Requirements for Voice Markup Languages publication history" href="/standards/history/voice-grammar-reqs">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="natural language processing requirements for voice markup languages" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-voice-nlu-reqs-19991223/" title="Latest draft of Natural Language Processing Requirements for Voice Markup Languages formally approved by the group">Natural Language Processing Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Natural Language Processing Requirements for Voice Markup Languages publication history" href="/standards/history/voice-nlu-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deborah Dahl
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="speech synthesis markup requirements for voice markup languages" data-tag="media" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-voice-tts-reqs-19991223/" title="Latest draft of Speech Synthesis Markup Requirements for Voice Markup Languages formally approved by the group">Speech Synthesis Markup Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Speech Synthesis Markup Requirements for Voice Markup Languages publication history" href="/standards/history/voice-tts-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Hunt
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <li data-title="xml path language (xpath) version 1.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/1999/REC-xpath-19991116/" title="Latest draft of XML Path Language (XPath) Version 1.0 formally approved by the group">XML  Path  Language  (XPath)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1999-11-16 - <a title="XML Path Language (XPath) Version 1.0 publication history" href="/standards/history/xpath">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                            <li>Steven DeRose
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                              <li data-title="xsl transformations (xslt) version 1.0" data-tag="xml" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/1999/REC-xslt-19991116" title="Latest draft of XSL Transformations (XSLT) Version 1.0 formally approved by the group">XSL  Transformations  (XSLT)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>1999-11-16 - <a title="XSL Transformations (XSLT) Version 1.0 publication history" href="/standards/history/xslt">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="tv broadcast uri schemes requirements" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-TVWeb-URI-Requirements-19991021" title="Latest draft of TV Broadcast URI Schemes Requirements formally approved by the group">TV Broadcast URI Schemes Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-10-21 - <a title="TV Broadcast URI Schemes Requirements publication history" href="/standards/history/TVWeb-URI-Requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Warner ten Kate
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml-signature requirements" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-xmldsig-requirements-19991014" title="Latest draft of XML-Signature Requirements formally approved by the group">XML-Signature Requirements</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>1999-10-14 - <a title="XML-Signature Requirements publication history" href="/standards/history/xmldsig-requirements">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the cambridge communiqué" data-tag="data xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-schema-arch-19991007" title="Latest draft of The Cambridge Communiqué formally approved by the group">The Cambridge Communiqué</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-10-07 - <a title="The Cambridge Communiqué publication history" href="/standards/history/schema-arch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml™ document profile requirements" data-tag="html" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-xhtml-prof-req-19990906/" title="Latest draft of XHTML™ Document Profile Requirements formally approved by the group">XHTML™ Document Profile Requirements</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>1999-09-06 - <a title="XHTML™ Document Profile Requirements publication history" href="/standards/history/xhtml-prof-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                            <li>Peter Stark
                            <li>Ted Wugofski
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="aural cascading style sheets (acss) specification" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-acss-19990902" title="Latest draft of Aural Cascading Style Sheets (ACSS) Specification formally approved by the group">Aural Cascading Style Sheets (ACSS) Specification</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>1999-09-02 - <a title="Aural Cascading Style Sheets (ACSS) Specification publication history" href="/standards/history/WD-acss">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                            <li>T.V. Raman
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="positioning html elements with cascading style sheets" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-positioning-19990902" title="Latest draft of Positioning HTML Elements with Cascading Style Sheets formally approved by the group">Positioning HTML Elements with Cascading Style Sheets</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>1999-09-02 - <a title="Positioning HTML Elements with Cascading Style Sheets publication history" href="/standards/history/WD-positioning">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Furman
                            <li>Scott Isaacson
                            <li>Robert Stevahn
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="css printing extensions" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-print-19990902" title="Latest draft of CSS Printing Extensions formally approved by the group">CSS Printing Extensions</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-09-02 - <a title="CSS Printing Extensions publication history" href="/standards/history/WD-print">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Stevahn
                            <li>Håkon Wium Lie
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="common markup for micropayment per-fee-links" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1999/WD-Micropayment-Markup-19990825/" title="Latest draft of Common Markup for micropayment per-fee-links formally approved by the group">Common Markup for micropayment per-fee-links</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-08-25 - <a title="Common Markup for micropayment per-fee-links publication history" href="/standards/history/Micropayment-Markup">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thierry Michel
                          </ul>
                                  </li>
                                                                                                                          <li data-title="composite capability/preference profiles (cc/pp): a user side framework for content negotiation" data-tag="data" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/1999/07/NOTE-CCPP-19990727/" title="Latest draft of Composite Capability/Preference Profiles (CC/PP): A user side framework for content negotiation formally approved by the group">Composite Capability/Preference Profiles (CC/PP): A user side framework for content negotiation</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-07-27 - <a title="Composite Capability/Preference Profiles (CC/PP): A user side framework for content negotiation publication history" href="/standards/history/CCPP">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Franklin Reynolds
                            <li>Johan Hjelm
                            <li>Spencer Dawkins
                            <li>Sandeep Singhal
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                    <li data-title="mathematical markup language (mathml) 1.01 specification" data-tag="" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/1999/07/REC-MathML-19990707/" title="Latest draft of Mathematical Markup Language (MathML) 1.01 Specification formally approved by the group">Mathematical Markup Language (MathML) 1.01 Specification</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>1999-07-07 - <a title="Mathematical Markup Language (MathML) 1.01 Specification publication history" href="/standards/history/REC-MathML">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick D F Ion
                            <li>Robert R Miner
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml canonicalization requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-xml-canonical-req-19990605" title="Latest draft of XML Canonicalization Requirements formally approved by the group">XML Canonicalization Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-06-05 - <a title="XML Canonicalization Requirements publication history" href="/standards/history/xml-canonical-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Tauber
                            <li>Joel Nava
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="web characterization terminology &amp; definitions sheet" data-tag="" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/1999/05/WCA-terms/01" title="Latest draft of Web Characterization Terminology &amp; Definitions Sheet formally approved by the group">Web Characterization Terminology & Definitions Sheet</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-05-24 - <a title="Web Characterization Terminology &amp; Definitions Sheet publication history" href="/standards/history/WCA-terms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henrik Frystyk Nielsen
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                              <li data-title="web content accessibility guidelines 1.0" data-tag="accessibility" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/1999/WAI-WEBCONTENT-19990505/" title="Latest draft of Web Content Accessibility Guidelines 1.0 formally approved by the group">Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>1999-05-05 - <a title="Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WAI-WEBCONTENT">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="web characterization: from working group to activity" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-WCA-19990319/" title="Latest draft of Web Characterization: From working group to activity formally approved by the group">Web Characterization: From working group to activity</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-03-19 - <a title="Web Characterization: From working group to activity publication history" href="/standards/history/WCA">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johan Hjelm
                            <li>Henrik Frystyk Nielsen
                          </ul>
                                  </li>
                                                                                                                          <li data-title="html 4.0 guidelines for mobile access" data-tag="html" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-html40-mobile-19990315/" title="Latest draft of HTML 4.0 Guidelines for Mobile Access formally approved by the group">HTML 4.0 Guidelines for Mobile Access</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-03-15 - <a title="HTML 4.0 Guidelines for Mobile Access publication history" href="/standards/history/html40-mobile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tomihisa Kamada
                            <li>Masayasu Ishikawa
                            <li>Shinichi Matsui
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml xlink requirements version 1.0" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-xlink-req-19990224/" title="Latest draft of XML XLink Requirements Version 1.0 formally approved by the group">XML  XLink  Requirements  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1999-02-24 - <a title="XML XLink Requirements Version 1.0 publication history" href="/standards/history/xlink-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xpointer-information set liaison statement version 1.0" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-xptr-infoset-liaison-19990224" title="Latest draft of XPointer-Information Set Liaison Statement Version 1.0 formally approved by the group">XPointer-Information  Set  Liaison  Statement  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1999-02-24 - <a title="XPointer-Information Set Liaison Statement Version 1.0 publication history" href="/standards/history/xptr-infoset-liaison">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml xpointer requirements version 1.0" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-xptr-req-19990224" title="Latest draft of XML XPointer Requirements Version 1.0 formally approved by the group">XML  XPointer  Requirements  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1999-02-24 - <a title="XML XPointer Requirements Version 1.0 publication history" href="/standards/history/xptr-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="synchronized multimedia modules based upon smil 1.0" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-SYMM-modules-19990223" title="Latest draft of Synchronized Multimedia Modules based upon SMIL 1.0 formally approved by the group">Synchronized  Multimedia  Modules  based  upon  SMIL&nbsp;1.0</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>1999-02-23 - <a title="Synchronized Multimedia Modules based upon SMIL 1.0 publication history" href="/standards/history/SYMM-modules">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Schmitz
                            <li>Ted Wugofski
                            <li>Warner ten Kate
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml information set requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-xml-infoset-req-19990218" title="Latest draft of XML Information Set Requirements formally approved by the group">XML Information Set Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-02-18 - <a title="XML Information Set Requirements publication history" href="/standards/history/xml-infoset-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Megginson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml schema requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1999/NOTE-xml-schema-req-19990215" title="Latest draft of XML Schema Requirements formally approved by the group">XML Schema Requirements</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-02-15 - <a title="XML Schema Requirements publication history" href="/standards/history/xml-schema-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ashok Malhotra
                            <li>Murray Maloney
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="list of suggested extensions to css" data-tag="css" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/NOTE-CSS-potential-19981210" title="Latest draft of List of suggested extensions to CSS formally approved by the group">List of suggested extensions to CSS</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>1998-12-10 - <a title="List of suggested extensions to CSS publication history" href="/standards/history/CSS-potential">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xml fragment interchange requirements, version 1.0" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1998/NOTE-XML-FRAG-REQ-19981123" title="Latest draft of XML Fragment Interchange Requirements, Version 1.0 formally approved by the group">XML  Fragment  Interchange  Requirements,  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-11-23 - <a title="XML Fragment Interchange Requirements, Version 1.0 publication history" href="/standards/history/XML-FRAG-REQ">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="scalable vector graphics (svg) requirements" data-tag="graphics" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/WD-SVGReq-19981029" title="Latest draft of Scalable Vector Graphics (SVG) Requirements formally approved by the group">Scalable Vector Graphics (SVG) Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>1998-10-29 - <a title="Scalable Vector Graphics (SVG) Requirements publication history" href="/standards/history/WD-SVGReq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jon Ferraiolo
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="a discussion of the relationship between rdf-schema and uml" data-tag="data" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1998/NOTE-rdf-uml-19980804/" title="Latest draft of A Discussion of the Relationship Between RDF-Schema and UML formally approved by the group">A Discussion of the Relationship Between RDF-Schema and UML</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-08-04 - <a title="A Discussion of the Relationship Between RDF-Schema and UML publication history" href="/standards/history/rdf-uml">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="http-ng architectural model" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/WD-HTTP-NG-architecture-19980710/" title="Latest draft of HTTP-ng Architectural Model formally approved by the group">HTTP-ng Architectural Model</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="HTTP-ng Architectural Model publication history" href="/standards/history/WD-HTTP-NG-architecture">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henrik Frystyk Nielsen
                            <li>Mike Spreitzer
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="http-ng web interfaces" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/WD-HTTP-NG-interfaces-19980710/" title="Latest draft of HTTP-ng Web Interfaces formally approved by the group">HTTP-ng Web Interfaces</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="HTTP-ng Web Interfaces publication history" href="/standards/history/WD-HTTP-NG-interfaces">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="design of http-ng testbed" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/NOTE-HTTP-NG-testbed-19980710/" title="Latest draft of Design of HTTP-ng Testbed formally approved by the group">Design of HTTP-ng Testbed</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="Design of HTTP-ng Testbed publication history" href="/standards/history/HTTP-NG-testbed">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Veillard
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="smux protocol specification" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/WD-mux-19980710" title="Latest draft of SMUX Protocol Specification formally approved by the group">SMUX Protocol Specification</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="SMUX Protocol Specification publication history" href="/standards/history/WD-mux">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Gettys
                            <li>Henrik Frystyk Nielsen
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="http-ng binary wire protocol" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/WD-HTTP-NG-wire-19980710/" title="Latest draft of HTTP-ng Binary Wire Protocol formally approved by the group">HTTP-ng Binary Wire Protocol</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="HTTP-ng Binary Wire Protocol publication history" href="/standards/history/WD-HTTP-NG-wire">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                    <li data-title="synchronized multimedia integration language (smil) 1.0 specification" data-tag="" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/1998/REC-smil-19980615/" title="Latest draft of Synchronized Multimedia Integration Language (SMIL) 1.0 Specification formally approved by the group">Synchronized Multimedia Integration Language (SMIL) 1.0 Specification</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>1998-06-15 - <a title="Synchronized Multimedia Integration Language (SMIL) 1.0 Specification publication history" href="/standards/history/REC-smil">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Philipp Hoschka
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml in html meeting report" data-tag="data" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1998/NOTE-xh-19980511" title="Latest draft of XML in HTML Meeting Report formally approved by the group">XML in HTML Meeting Report</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-05-11 - <a title="XML in HTML Meeting Report publication history" href="/standards/history/xh">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dan Connolly
                            <li>Lauren Wood
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="xsl requirements summary" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/WD-XSLReq-19980511" title="Latest draft of XSL Requirements Summary formally approved by the group">XSL Requirements Summary</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>1998-05-11 - <a title="XSL Requirements Summary publication history" href="/standards/history/WD-XSLReq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="short- and long-term goals for the http-ng project" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/WD-HTTP-NG-goals-19980327" title="Latest draft of Short- and Long-Term Goals for the HTTP-NG Project formally approved by the group">Short- and Long-Term Goals for the HTTP-NG Project</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-03-27 - <a title="Short- and Long-Term Goals for the HTTP-NG Project publication history" href="/standards/history/WD-HTTP-NG-goals">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike Spreitzer
                            <li>Henrik Frystyk Nielsen
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="p3p protocol and data transport working group draft white paper" data-tag="privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/NOTE-P3P10-Protocols-19980324" title="Latest draft of P3P Protocol and Data Transport Working Group Draft White Paper formally approved by the group">P3P Protocol and Data Transport Working Group Draft White Paper</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-03-24 - <a title="P3P Protocol and Data Transport Working Group Draft White Paper publication history" href="/standards/history/P3P10-Protocols">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Philip DesAutels
                            <li>Steven Lucas
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="primary language in html" data-tag="html i18n" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/1998/NOTE-html-lan-19980313" title="Latest draft of Primary Language in HTML formally approved by the group">Primary Language in HTML</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-03-13 - <a title="Primary Language in HTML publication history" href="/standards/history/html-lan">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml linking language (xlink) design principles" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1998/NOTE-xlink-principles-19980303" title="Latest draft of XML Linking Language (XLink) Design Principles formally approved by the group">XML Linking Language (XLink) Design Principles</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1998-03-03 - <a title="XML Linking Language (XLink) Design Principles publication history" href="/standards/history/xlink-principles">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eve Maler
                            <li>Steven DeRose
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="voice browsers" data-tag="media" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/1998/NOTE-voice-0128" title="Latest draft of Voice Browsers formally approved by the group">Voice Browsers</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-01-28 - <a title="Voice Browsers publication history" href="/standards/history/voice">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="comparison of sgml and xml" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/NOTE-sgml-xml-971215" title="Latest draft of Comparison of SGML and XML formally approved by the group">Comparison of SGML and XML</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-12-15 - <a title="Comparison of SGML and XML publication history" href="/standards/history/sgml-xml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="pep specification: an extension mechanism for http" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/WD-http-pep-971121" title="Latest draft of PEP Specification: an Extension Mechanism for HTTP formally approved by the group">PEP Specification: an Extension Mechanism for HTTP</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-11-21 - <a title="PEP Specification: an Extension Mechanism for HTTP publication history" href="/standards/history/WD-http-pep">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henrik Frystyk Nielsen
                            <li>Dan Connolly
                            <li>Rohit Khare
                            <li>Eric Prud&#039;hommeaux
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="p3p architecture working group: general overview of the p3p architecture" data-tag="privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/WD-P3P-arch-971022" title="Latest draft of P3P Architecture Working Group: General Overview of the P3P Architecture formally approved by the group">P3P Architecture Working Group: General Overview of the P3P Architecture</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>1997-10-22 - <a title="P3P Architecture Working Group: General Overview of the P3P Architecture publication history" href="/standards/history/WD-P3P-arch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Reagle
                            <li>Martin PreslerMarshall
                            <li>Melissa W Dunn
                            <li>Philip DesAutels
                            <li>Lorrie Cranor
                            <li>Mark Ackerman
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="p3p vocabulary working group: grammatical model and data design model" data-tag="privacy" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/WD-P3P-grammar-971014" title="Latest draft of P3P Vocabulary Working Group: Grammatical Model and Data Design Model formally approved by the group">P3P Vocabulary Working Group: Grammatical Model and Data Design Model</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>1997-10-14 - <a title="P3P Vocabulary Working Group: Grammatical Model and Data Design Model publication history" href="/standards/history/WD-P3P-grammar">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Ackerman
                            <li>Lorrie Cranor
                            <li>Philip DesAutels
                            <li>Melissa W Dunn
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="use of cgm as a scalable graphics format" data-tag="graphics" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/NOTE-cgm-970618" title="Latest draft of Use of CGM as a Scalable Graphics Format formally approved by the group">Use of CGM as a Scalable Graphics Format</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-06-18 - <a title="Use of CGM as a Scalable Graphics Format publication history" href="/standards/history/cgm">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="digital signature label architecture" data-tag="xml" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/WD-DSIG-label-arch-970610" title="Latest draft of Digital Signature Label Architecture formally approved by the group">Digital Signature Label Architecture</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-06-10 - <a title="Digital Signature Label Architecture publication history" href="/standards/history/WD-DSIG-label-arch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rohit Khare
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="selecting payment mechanisms over http" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/WD-jepi-uppflow-970106" title="Latest draft of Selecting Payment Mechanisms Over HTTP formally approved by the group">Selecting Payment Mechanisms Over HTTP</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-01-06 - <a title="Selecting Payment Mechanisms Over HTTP publication history" href="/standards/history/WD-jepi-uppflow">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Donald Eastlake
                            <li>Rohit Khare
                            <li>Jim Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="imagemapped images and image-incapable user agents" data-tag="html" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/NOTE-imagemap" title="Latest draft of Imagemapped Images and Image-Incapable User Agents formally approved by the group">Imagemapped Images and Image-Incapable User Agents</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1996-11-27 - <a title="Imagemapped Images and Image-Incapable User Agents publication history" href="/standards/history/imagemap">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="a proposed convention for embedding metadata in html" data-tag="data" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/Search/9605-Indexing-Workshop/ReportOutcomes/S6Group2" title="Latest draft of A Proposed Convention for Embedding Metadata in HTML formally approved by the group">A Proposed Convention for Embedding Metadata in HTML</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1996-06-02 - <a title="A Proposed Convention for Embedding Metadata in HTML publication history" href="/standards/history/S6Group2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stu Weibel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="the ilu requester: object services in http servers" data-tag="http" data-status="ret" data-version="" style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/WD-ilu-requestor-960307" title="Latest draft of The ILU Requester: Object Services in HTTP Servers formally approved by the group">The ILU Requester: Object Services in HTTP Servers</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1996-03-07 - <a title="The ILU Requester: Object Services in HTTP Servers publication history" href="/standards/history/WD-ilu-requestor">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                  </ul></div>
      </div>
    </div>
</div>
        </div> <!-- /end #w3c_mainCol -->
    </div> <!-- end #w3c_main -->
 <!-- /end #w3c_container -->

<div id="w3c_footer">
<div id="w3c_footer-inner">
<h2 class="offscreen">Footer Navigation</h2>
<div class="w3c_footer-nav">
<h3>Navigation</h3>
<ul class="footer_top_nav">
<li><a href="http://www.w3.org/">Home</a></li>
<li><a href="http://www.w3.org/standards/">Standards</a></li>
<li><a href="http://www.w3.org/participate/">Participate</a></li>
<li><a href="http://www.w3.org/Consortium/membership">Membership</a></li>
<li class="last-item"><a href="http://www.w3.org/Consortium/">About W3C</a></li>
</ul>
</div>
<div class="w3c_footer-nav">
<h3>Contact W3C</h3>
<ul class="footer_bottom_nav">
<li><a href="http://www.w3.org/Consortium/contact">Contact</a></li>
<li><a accesskey="0" href="http://www.w3.org/Help/">Help and FAQ</a></li>
<li><a href="http://www.w3.org/Consortium/sponsor/">Sponsor / Donate</a></li>
<li><a href="http://www.w3.org/Consortium/siteindex">Site Map</a></li>
<li>
<address id="w3c_signature"><a href="http://lists.w3.org/Archives/Public/site-comments/">Feedback</a></address></li>

</ul>
</div>
<div class="w3c_footer-nav">
<h3>W3C Updates</h3>
<ul class="footer_follow_nav">
<li><a href="http://twitter.com/W3C" title="Follow W3C on Twitter"><img src="https://www.w3.org/2008/site/images/Twitter_bird_logo_2012.svg" alt="Twitter" class="social-icon" height="40"></a></li>
</ul>
</div>
<!-- #footer address / page signature -->
<p class="copyright">Copyright © 2021
W3C <sup>®</sup> (<a href="http://www.csail.mit.edu/"><abbr title="Massachusetts Institute of Technology">MIT</abbr></a>, <a href="http://www.ercim.eu/"><abbr title="European Research Consortium for Informatics and Mathematics"> ERCIM</abbr></a>, <a href="http://www.keio.ac.jp/">Keio</a>, <a href="http://ev.buaa.edu.cn/">Beihang</a>) <a href="http://www.w3.org/Consortium/Legal/ipr-notice">Usage policies apply</a>.</p>
</div>
</div>
<div id="w3c_scripts"><script type="text/javascript" src="https://www.w3.org/2008/site/js/main"></script></div>
    <script src="/2008/site/sf/build/runtime.783b3300.js"></script><script src="/2008/site/sf/build/1.45b22a26.js"></script><script src="/2008/site/sf/build/5.539980a5.js"></script><script src="/2008/site/sf/build/publication-tr.d855dd9f.js"></script>
</body></html>

  recorded_at: Fri, 14 May 2021 17:22:55 GMT
recorded_with: VCR 6.0.0
