---
http_interactions:
- request:
    method: get
    uri: https://www.w3.org/TR/2020/NOTE-DOM-Requirements-20201103/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.w3.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 18 Mar 2021 17:25:44 GMT
      Content-Location:
      - Overview.html
      Last-Modified:
      - Tue, 03 Nov 2020 06:17:46 GMT
      Etag:
      - '"10474-5b32dd2421680-gzip"'
      Accept-Ranges:
      - bytes
      Cache-Control:
      - max-age=31536000
      Expires:
      - Fri, 18 Mar 2022 17:25:44 GMT
      Vary:
      - Accept-Encoding
      Link:
      - <https://timetravel.mementoweb.org/w3c/timegate/https://www.w3.org/TR/DOM-Requirements/>;rel="timegate",
        <https://www.w3.org/TR/DOM-Requirements/>;rel="original"
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '18468'
      Content-Type:
      - text/html; charset=utf-8
      Memento-Datetime:
      - Tue, 03 Nov 2020 06:17:46 GMT
      X-Backend:
      - ssl-mirrors
      Strict-Transport-Security:
      - max-age=15552000; includeSubdomains; preload
      Content-Security-Policy:
      - upgrade-insecure-requests
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 18 Mar 2021 17:25:45 GMT
recorded_with: VCR 6.0.0
